<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>图像处理 on SurprisedCat</title><link>https://surprisedcat.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</link><description>Recent content in 图像处理 on SurprisedCat</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020–2021, SurprisedCat; all rights reserved.</copyright><lastBuildDate>Tue, 07 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://surprisedcat.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>图像处理-opencv中RGB与BGR通道</title><link>https://surprisedcat.github.io/projectnotes/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-opencv%E4%B8%ADrgb%E4%B8%8Ebgr%E9%80%9A%E9%81%93/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-opencv%E4%B8%ADrgb%E4%B8%8Ebgr%E9%80%9A%E9%81%93/</guid><description>
&lt;h2 id="基于python的opencv中rgb与bgr图片格式转换---omit-in-toc---">基于Python的OpenCV中RGB与BGR图片格式转换&lt;!-- omit in toc -->&lt;/h2>
&lt;p>我们在使用OpenCV时，经常需要将处理过的图片展示出来，由于OpenCV中显示图片的函数cv2.imshow()功能往往不能满足我们的需求，所以经常用Matplotlib显示图像，方便结果图片的放大、保存等操作。&lt;/p>
&lt;p>但是，OpenCV和Matplotlib中图片的像素排列方式略有不同。OpenCV中图片像素按照BGR方式排列，而Matpoltlib中图片按照RGB方式排序，这样使用OpenCV读入的图片经过Matplotlib展示时，就会出现反相问题。&lt;/p>
&lt;p>这里使用OpenCV的logo作为实验对象：&lt;/p>
&lt;p>&lt;img src="../../images/opencv_logo.jpg" alt="OpenCV Logo">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;logo.png&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#使用OpenCV读入图像&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#使用matplotliob展示图片&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/opencv_logo_br_reversed.jpg" alt="OpenCV Logo">&lt;/p>
&lt;p>与原图相比，上图的红色部分与蓝色部分交换了位置，意思是图片中红色像素和蓝色像素排列位置做了交换，印证了读入的BGR格式经过Matplotlib展示后变成了RGB格式。而且绿色的部分也有明显的色差。&lt;/p>
&lt;p>要想正确的显示图片，必须先把读入的BGR图片中的B通道和R通道交换位置。这里有两种可行的方法可以实现BGR TO RGB操作。&lt;/p>
&lt;h2 id="方法1先拆分通道bgr再合并通道rgb">方法1：先拆分通道B、G、R，再合并通道R、G、B&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>b,g,r = cv.split(img)#拆分通道
&lt;span class="ln">2&lt;/span>img_1 = cv.merge([r,g,b])#合并通道
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在拆分通道时，除了使用OpenCV的split（）方法，还可以用Numpy的索引：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到蓝色通道&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到绿色通道&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到红色通道&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Matplotlib中显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">122&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/opencv_logo_rgb_bgr.jpg" alt="opencv logo rgb bgr">&lt;/p>
&lt;p>在第二幅图片中，可以看到展示结果与原图一致。&lt;/p>
&lt;h2 id="方法2直接使用numpy索引">方法2：直接使用Numpy索引&lt;/h2>
&lt;p>我们都知道Numpy在计算这种大型矩阵时，索引的效率很高，所以下面的方法简单高效，及其推荐使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">img_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="p">[:,:,::&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">131&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">132&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">133&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/opencv_logo_bgr2rgb.jpg" alt="opencv logo brg to rgb">&lt;/p>
&lt;p>可以看出，后面两幅图片与OpenCV的logo图片一致，都能正确的显示结果，但方法2更简单、高效、容易理解。&lt;/p></description></item></channel></rss>
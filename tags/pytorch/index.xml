<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pytorch on SurprisedCat</title><link>https://surprisedcat.github.io/tags/pytorch/</link><description>Recent content in pytorch on SurprisedCat</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020–2021, SurprisedCat; all rights reserved.</copyright><lastBuildDate>Tue, 18 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://surprisedcat.github.io/tags/pytorch/index.xml" rel="self" type="application/rss+xml"/><item><title>python-Pytorch中随机种子问题</title><link>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</guid><description>
&lt;h2 id="可复现的pytorch---omit-in-toc---">可复现的pytorch&lt;!-- omit in toc -->&lt;/h2>
&lt;p>为了保证实验的「可复现性」，许多机器学习的代码都会有一个方法叫 seed_everything，这个方法尝试固定随机种子以让一些随机的过程在每一次的运行中产生相同的结果。但如果用谷歌搜索「how to seed everything in pytorch」，会得到各种不同的版本，本文就来讨论如何正确设置&lt;strong>随机种子&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90">什么是随机种子&lt;/a>&lt;/li>
&lt;li>&lt;a href="#linux-%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">Linux 系统中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">程序中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cuda%E9%9A%8F%E6%9C%BA%E6%95%B0">CUDA随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">不同设备之间的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%80%A7">多进程的随机性&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="什么是随机种子">什么是随机种子&lt;/h2>
&lt;p>随机数，分为&lt;strong>真随机数&lt;/strong>和&lt;strong>伪随机数&lt;/strong>，真随机数需要自然界中真实的随机物理现象才能产生，而对于计算机来说生成这种随机数是很难办到的。而伪随机数是通过一个初始化的值，来计算来产生一个随机序列，如果初始值是不变的，那么多次从该种子产生的随机序列也是相同的。这个初始值一般就称为&lt;strong>种子&lt;/strong>。&lt;/p>
&lt;h2 id="linux-系统中的随机数">Linux 系统中的随机数&lt;/h2>
&lt;p>在 Ubuntu 系统中，有一个专门管理随机种子的服务&lt;a href="https://manpages.ubuntu.com/manpages/focal/en/man8/systemd-random-seed.service.8.html">systemd-random-seed.service&lt;/a>，该服务负责在计算机启动的时候，从硬盘上加载一个随机种子文件到内核中，以作为随机初始化值在整个系统运行的过程中提供服务。Linux 会通过许多硬件信息来获得这个初始化值。可以通过&lt;code>/dev/urandom&lt;/code>文件来产生随机字节，然后使用&lt;code>od&lt;/code>命令（该命令可将字节转换成希望的格式并打印）来获得随机数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 随机生成 0 ~ 255 的数。&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># -N1 从 /dev/urandom 中读取一个字节&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># -t u1 将字节流格式化为为 1 字节的无符号整型&lt;/span>
&lt;span class="ln">4&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 输出 194&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 再次调用&lt;/span>
&lt;span class="ln">8&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">9&lt;/span>&lt;span class="c1"># 输出 50&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果仅希望获得随机数，直接读取&lt;code>/dev/urandom&lt;/code>或调用 Linux 系统调用&lt;code> getrandom()&lt;/code>(内部也使用&lt;code>/dev/urandom&lt;/code>)是不错的选择。但这种随机数是无法复现的，因为种子是由系统设置的，并且每次开机设置的种子都不一样。在「可复现」的场景中，我们需要的是一种能手动控制随机种子和读取随机序列的方式，以便可以重复获得相同随机序列的功能。&lt;/p>
&lt;p>如果一个过程依赖系统产生的随机数，则称这个过程是 Non Deterministic（不确定的）；相反的如果一个过程对相同的输入种子都有相同的输出，则这个随机过程是Deterministic 的。在「可复现」场景中，我们需要保证所有的随机过程都是 Deterministic 的。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>/dev/random&lt;/code>可生成「随机性」更强的随机数，但由于其依赖的系统资源更多，导致性能缓慢，因此绝大多数场景都只使用&lt;code>/dev/urandom&lt;/code>。&lt;code>/dev/random&lt;/code>依赖于系统的熵池，在没有足够多随机性时并不会产生随机数从而导致阻塞。&lt;/p>
&lt;/blockquote>
&lt;h2 id="程序中的随机数">程序中的随机数&lt;/h2>
&lt;p>在 PyTorch 中，设置随机种子的方法是&lt;code>torch.manual_seed(777)&lt;/code>，这里 777 就是我们所设置的随机种子，设置完毕后，如果多次调用同样的具有随机过程 PyTorch 方法，就会获得相同的结果，例如下面的代码在多次调用后的打印是一样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.0819])&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.4911])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不论在任何机器或系统，只要使用 &lt;code>torch==1.10.0&lt;/code> 版本（其他版本大概率也是 OK 的），输出应该都是长这样的。诶？既然随机种子产生跟系统硬件信息相关，那不同的机器至少应该不一样才对呀？上文说了，在要求「可复现」的场景下，是不能使用&lt;code>/dev/urandom&lt;/code>来产生随机数的，那剩下的是需要搞清楚 PyTorch 是如何生成随机数的。&lt;/p>
&lt;p>通过&lt;code>torch.manual_seed&lt;/code>方法往下找，可以知道 PyTorch 生成随机数是使用了&lt;a href="https://en.wikipedia.org/wiki/Mersenne_Twister">MT19937（梅森旋轉）算法&lt;/a>，这个算法的输入只有一个初始化值也不需要其他的环境信息。因此无论在任何机器，只要 PyTorch 的版本一致（算法部分没有改变）并且设置了随机种子，那么调用随机过程所产生的随机数就是一致的。&lt;/p>
&lt;p>C++ 11 在标准库中直接引入了这个方法：&lt;code>std::mt19937&lt;/code>，而 PyTorch 是自己实现的，官方称性能比 C++ 的版本要更好一些，感兴趣的话可以直接看 PyTorch &lt;a href="https://github.com/pytorch/pytorch/blob/main/aten/src/ATen/core/MT19937RNGEngine.h">源码&lt;/a>。&lt;/p>
&lt;p>NumPy 的&lt;code>np.random.seed&lt;/code>也同样使用 &lt;code>MT19937&lt;/code>来生成随机数，因此也与硬件无关。要注意的是：&lt;code>np.random.seed&lt;/code> 只影响 NumPy 的随机过程，&lt;code>torch.manual_seed&lt;/code> 也只影响 PyTorch 的随机过程。通过下面的代码很容易验证这个结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用产生不同输出&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 [0.15266373]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可以得到这样的结论：程序中所有依赖 MT19937 算法产生随机数的包，都需要手动设置随机种子，才能使整个程序的随机性是可复现的。&lt;/p>
&lt;blockquote>
&lt;p>PS: 根据&lt;a href="https://pytorch.org/docs/stable/notes/randomness.html#pytorch-random-number-generator">文档中可复现性描述&lt;/a>，设置 &lt;code>torch.manual_seed&lt;/code> 是对所有的设备设置随机种子。目前似乎没有单独为 CPU 设备设置随机种子的方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cuda随机数">CUDA随机数&lt;/h2>
&lt;p>PyTorch 中，还有另一个设置随机种子的方法：&lt;code>torch.cuda.manual_seed_all&lt;/code>，从名字可知这是设置&lt;strong>显卡&lt;/strong>的随机种子。&lt;/p>
&lt;p>在 PyTorch 的内部，使用 &lt;code>CUDA Runtime API&lt;/code> 提供的 &lt;code>curand&lt;/code> 来设置随机种子，根据 &lt;code>curand&lt;/code> 的文档，他们提供的所有随机数生成算法都是 Deterministic 的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码看起来不够「随机」，因为在不同的 GPU 设备上产生了相同的结果，如果希望不同设备可以产生不同的随机数，可以这么做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">777&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">device_count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_device&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.4315], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.6701], device=&amp;#39;cuda:1&amp;#39;)&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码既保证了随机性（不同设备产生不同的随机数），也保证了确定性（多次调用只产生相同结果）。在真实场景中，一般只会用相同的设备来产生随机数，因此&lt;code>torch.manual_seed(777)&lt;/code>应该就能满足大多数需求。&lt;/p>
&lt;h2 id="不同设备之间的随机数">不同设备之间的随机数&lt;/h2>
&lt;p>先问一个问题：「用 GPU 训练的实验结果，可以在 CPU 上复现吗？」。&lt;/p>
&lt;p>答案是「也许可以」。&lt;/p>
&lt;p>根据前文可知，CPU 设置随机种子是用 PyTorch 官方实现的 MT19937，而 GPU 是用到了 CUDA Runtime API 的&lt;code>curand&lt;/code>。因此两套实现是完全不同的，那么对于相同的随机种子，理应产生不同的随机序列，用下面的代码可以验证：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 将下面的 cuda:0 改为 cuda:1 会产生相同的结果，因为都是 curand 算法&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的例子中知道，对于同一个随机种子，在 CPU 和 GPU 上产出的结果是不同的，因此这种情况在 GPU 上的结果是无法在 CPU 上复现的。那为什么的答案是「也许可以」呢？&lt;/p>
&lt;p>因为很多代码，都会在 CPU 上创建 Tensor，再切换到 GPU 上。&lt;em>只要不直接在 GPU 上创建随机变量，就可以避免这个问题&lt;/em>。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码输出值跟 CPU 一致，但是 device 是在 CUDA 上。这样写可能性能不如直接在 GPU 上直接创建随机变量效率高，但为了保证程序的确定性，牺牲一点性能我认为是值得的。&lt;/p>
&lt;h2 id="多进程的随机性">多进程的随机性&lt;/h2>
&lt;p>PyTorch 的 &lt;code>torch.utils.data.DataLoader&lt;/code> 在 &lt;code>num_worker &amp;gt; 0&lt;/code> 的情况下会 fork 出子进程，而通常又会在加载数据的时候做很多「随机变换」，那么就有必要讨论一下多进程下的随机性是怎样的，&lt;/p>
&lt;p>子进程一般会保留父进程的一些状态，这也包括随机种子。因此若不做特殊处理，所有子进程都会产生和父进程相同的随机序列。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">torch.utils.data&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dataset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DataLoader&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dataset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__getitem__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_numpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__len__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataLoader&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">num_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">loader_result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1"># 输出&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># tensor([[0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685],&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c1"># [0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685]], dtype=torch.float64)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注：上面的结果在 torch&amp;gt;=1.9.0 是不能复现的，因为 PyTorch 1.9 之后给 DataLoader 默认给每个 worker 重新设置随机种子。&lt;/p>
&lt;/blockquote>
&lt;p>可以发现两次 batch 输出的结果是一样的，这是因为主进程中 numpy 的随机性，被两个 worker 保留了，因此两个 worker 的随机性是相同的。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on SurprisedCat</title><link>https://surprisedcat.github.io/tags/python/</link><description>Recent content in Python on SurprisedCat</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020–2021, SurprisedCat; all rights reserved.</copyright><lastBuildDate>Wed, 25 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://surprisedcat.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>AI-神经网络玩雅达利游戏(atari 2600)的预处理</title><link>https://surprisedcat.github.io/projectnotes/ai-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%8E%A9%E9%9B%85%E8%BE%BE%E5%88%A9%E6%B8%B8%E6%88%8Fatari-2600%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/ai-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%8E%A9%E9%9B%85%E8%BE%BE%E5%88%A9%E6%B8%B8%E6%88%8Fatari-2600%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</guid><description>
&lt;h2 id="ai-神经网络玩雅达利游戏atari-2600的预处理---omit-in-toc---">AI-神经网络玩雅达利游戏(atari 2600)的预处理&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在阅读DQN的一些基本文章时，发现都是大家着重于神经网络部分（这也没错），中文互联网缺乏对DQN实验环境——Atari 2600游戏环境的处理。本文通过阅读国外的一些博文、论文以及源码，整理了Atari游戏的环境处理步骤。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#atari%E6%B8%B8%E6%88%8F%E5%A4%84%E7%90%86%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6">Atari游戏处理整体框架&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%8E%B7%E5%8F%96%E8%A7%82%E6%B5%8B%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96">获取观测与初始化&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%B8%B8%E6%88%8F%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96">游戏环境初始化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%8E%B7%E5%8F%96%E8%A7%82%E6%B5%8B%E5%9B%BE%E5%83%8F%E4%B8%8E%E4%BA%A4%E4%BA%92">获取观测图像与交互&lt;/a>&lt;/li>
&lt;li>&lt;a href="#firereset-%E5%90%AF%E5%8A%A8">FireReset 启动&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%A2%9E%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%80%A7">增加随机性&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#sticky-action">Sticky Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#noop">Noop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frame-skip-%E4%B8%8E-max-pooling">Frame skip 与 Max pooling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%A1%A5%E5%85%85frame-stack">补充：Frame stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gym%E6%8F%90%E4%BE%9B%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%80%A7">Gym提供的随机性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E4%BD%93%E6%AD%A5%E9%AA%A4%E7%9A%84%E9%99%90%E5%88%B6">总体步骤的限制&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B8%B8%E6%88%8F%E5%9B%BE%E5%83%8F%E7%9A%84%E5%A4%84%E7%90%86">游戏图像的处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BA%E4%BA%86%E9%80%82%E5%BA%94%E4%BA%8E%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%A4%84%E7%90%86">为了适应于神经网络的处理&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#episodic-life">Episodic Life&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clipreward">ClipReward&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scaledfloat">ScaledFloat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frame-stack">Frame Stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frametopytorch">FrameToPytorch&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="atari游戏处理整体框架">Atari游戏处理整体框架&lt;/h2>
&lt;p>Atari游戏是过去一款风靡世界的游戏机，有着丰富的游戏可选。2017年，OpenAI团队正是使用Atari 2600作为环境，发表了那篇神经网络领域的里程碑之作：《Human-level control through deep reinforcement learning》。这篇文章以及很多后续论文中，对Atrai环境本身的处理也是非常重要的引入了不少新的概念，如frame skip, frame stack, sticky action, max pooling等等，为DQN的发展打下了良好的基础。&lt;/p>
&lt;p>为了适应DQN的处理，目前主流Atari游戏的整体处理步骤如下：&lt;/p>
&lt;p>&lt;img src="../../images/Atari%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.drawio.svg" alt="Atari处理流程.drawio.svg">&lt;/p>
&lt;p>注意，这些步骤在不同项目中可能属于不同的项目。例如，在ALE中实现了sticky action, gymnasium中就没有特地实现。stable-baselines3这个库基本上就都是自己实现的。另外，同一个大步骤在具体细节上也可能不同，例如对于游戏图像的处理，原始论文是直接缩放，没有剪裁图像，而现在一些实现代码例如《Deep Reinforcement Learning Hands On Second Edition》剪裁了图像。&lt;/p>
&lt;h2 id="获取观测与初始化">获取观测与初始化&lt;/h2>
&lt;p>为了将Atari 2600游戏环境作为DQN的交互环境，我们通常使用 Arcade Learning Environment(ALE)来模拟游戏并提供用于选择要执行的操作的接口。ALE是一个简洁的框架，允许研究人员和爱好者为Atari 2600游戏开发AI代理。它构建在Atari 2600仿真器 Stella 之上，并将仿真细节与代理设计分开。ALE允许我们在每个时间步骤提取Atari游戏反馈的信息，这种信息既可以是人眼可观测的图像(RGB图像)也可以是计算机处理的内存内容(RAM)，同时在每个时间步骤接收操作信息，用于与游戏环境交互。&lt;/p>
&lt;p>本文默认使用RGB图像信息作为ALE的反馈内容，其图像大小为&lt;code>210 * 160&lt;/code>像素，采用RGB模式，即返回的观测数据规模为&lt;code>210*160*3&lt;/code>。每个像素点都是0-255取值范围的整数。为了不失一般性，本文采用Breakout（打砖块）这个游戏为例，Gym环境为0.29.1版本，环境创建时采用最原始（并非默认）的配置，即从ALE中获取1帧RGB图像，并给ALE每一帧一个操作（对应环境为&lt;code>BreakoutNoFrameskip-v4&lt;/code>）。&lt;/p>
&lt;p>注：默认情况下，ALE中Atari游戏每秒有60帧。&lt;/p>
&lt;h3 id="游戏环境初始化">游戏环境初始化&lt;/h3>
&lt;p>我们可以通过如下代码构建环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">gymnasium&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">gym&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">cv2&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">deque&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，gym版本更新后全程是gymnasium，为了与过去统一所以&lt;code>import gymnasium as gym&lt;/code>。引入&lt;code>matplotlib.pyplot&lt;/code>和&lt;code>cv2&lt;/code>是为了画图与处理图像，而&lt;code>deque&lt;/code>是为了存储反馈的图像帧。为了保持可复现性，本文中设置了随机种子值都是100，至此，我们可以创建Breakout的游戏环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置随机种子值&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BreakoutNoFrameskip-v4&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，为了获得Atari游戏最原始，未经任何处理的观测数据，我们使用了&lt;code>BreakoutNoFrameskip-v4&lt;/code>，这个名称的创建的环境返回的结果不会使用Sticky action过滤动作，也不会使用frame skip跳帧来增强随机性（这些我们接下来要自己实现）。&lt;/p>
&lt;p>至于如何在gym中对环境返回的动作和观测进行修改，这里推荐使用&lt;a href="https://gymnasium.farama.org/api/wrappers/">gym Wrapper模块&lt;/a>，具体操作方法超出了本文的阐述范围，需要了解的读者可以通过gym官方文档深入学习。&lt;/p>
&lt;p>未经处理的Breakout游戏信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 游戏动作的含义&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">action_space&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 游戏操作的动作空间&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 游戏图像的观测空间，对于Atari游戏来说，一般是210*160的RGB图像，每个像素点RGB范围都是[0,255]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">observation_space&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;NOOP&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;FIRE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;RIGHT&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;LEFT&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">Discrete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="n">Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">210&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">160&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">uint8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上述可以发现，Breakout游戏的操作动作有四种：无操作（NOOP），开火/开球（FIRE），向右移动（RIGHT）和向左移动（LEFT），其动作空间是四个离散的数值（&lt;code>Discrete(4)&lt;/code>），分别对应着0——NOOP，1——FIRE，2——RIGHT，3——LEFT。而游戏的反馈（返回值）是一个210 $\times$ 160大小的RGB图像，以&lt;code>numpy.ndarray&lt;/code>的形式返回，具体来说是 $210\times 160\times 3$的三维数组，每个元素都是0-255的整数（如果熟悉图像处理，这部分就很好理解了）。&lt;/p>
&lt;h3 id="获取观测图像与交互">获取观测图像与交互&lt;/h3>
&lt;p>在生成Atari环境之后，Gym主要通过两个函数与Agents进行操作，一是重置函数&lt;code>env.reset()&lt;/code>，二是操作函数&lt;code>env.step()&lt;/code>。&lt;/p>
&lt;p>&lt;code>env.reset()&lt;/code>将环境重置为初始状态，返回初始观测结果和信息。该函数最好接收一个整数参数作为随机数种子。其返回值是一个210 $\times$ 160大小的初始RGB图像和一些与游戏初始化信息。常见用法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 以图片的形式显示numpy.ndarray&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># info一般是游戏相关信息，如lives表示游戏中剩余的生命数，frame_number表示游戏进行了多少帧&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;lives&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;episode_frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;seeds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">271914307&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3436027390&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/breakout_reset.png" alt="breakout_reset.png">&lt;/p>
&lt;p>&lt;code>env.step()&lt;/code>函数根据给定的动作与游戏环境进行一次交互。在Gym atari实际环境中，每执行一次step函数，游戏进行一帧（1/60秒）。当游戏进行到终止时（&lt;code>terminated or truncated&lt;/code>），需要重新调用&lt;code>env.reset()&lt;/code>函数重置环境以继续游戏交互。常见的用法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reward&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>step&lt;/code>函数的参数来自于动作空间&lt;code>action_space&lt;/code>，由上可知，Breakout的动作空间是0-3四个离散整数。&lt;code>observation&lt;/code>和过去一样是&lt;code>numpy.ndarray&lt;/code>数组。&lt;code>reward&lt;/code>是采取该动作获取的奖励；&lt;code>terminated&lt;/code>指的是游戏是否进入到终止状态，&lt;code>truncated&lt;/code>则是在0.26版本后新添加的结果，表示是否达到一个截断状态，通常截断状态是由超时&lt;code>TimeLimit&lt;/code>引起的。&lt;code>info&lt;/code>和&lt;code>env.reset()&lt;/code>反馈的结果类似，也是游戏的辅助信息。函数返回的信息结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 图片多了球&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;reward: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reward&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;termianted: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;truncated: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">reward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.0&lt;/span> &lt;span class="n">termianted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;lives&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;episode_frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/breakout_start.png" alt="breakout_reset.png">&lt;/p>
&lt;h3 id="firereset-启动">FireReset 启动&lt;/h3>
&lt;p>对于像breakout、pong之类的Atari游戏，我们需要需要通过Fire操作来发球（或者说开始游戏），如果让Agent自己学习的话，可能会花很多时间来发球，因此有些神经网络项目在Atari游戏的预处理中，会将发球和reset进行绑定，如果这个游戏需要通过Fire来启动，那么则添加&lt;code>FireReset&lt;/code>这个Wrapper。需要说明的是，对于是否需要使用FireReset，大家并没有统一意见，有人认为学习发球也是神经网络的工作之一，并不需要额外地设置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">gymnasium.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Env&lt;/span> &lt;span class="c1"># typing类型提示&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">FireResetEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Wrapper&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s1"> 对于使用FIRE开始游戏的游戏采取FIRE操作来初始化
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s1"> :param env: Environment to wrap
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Env&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1"># 检查第2个动作是否为FIRE。&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;FIRE&amp;#34;&lt;/span> &lt;span class="c1"># type: ignore[attr-defined]&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1"># type: ignore[attr-defined]&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># 重载reset函数，使用FireReset&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># 核心代码&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1"># Fire to start&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="c1"># 特殊情况处理&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1"># 如果已经结束了，则重置环境&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">terminated&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1"># 存疑，为啥这里用使用step(2)???&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">terminated&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>FireResetEnv&lt;/code>类继承了&lt;code>gym.Wrapper&lt;/code>，它的初始化函数仅仅检查动作空间中是否存在“Fire”这个选项。由于只需要在重置阶段起作用，因此只重写了&lt;code>reset()&lt;/code>函数。主要修改就是在原始的&lt;code>reset()&lt;/code>之后添加一步“Fire”动作，从而触发开始游戏。后面特殊处理的代码是为了防止游戏已经结束从而重置游戏。从本人实践的实际效果来看，至少对于（初期）探索性比较强的算法，&lt;code>FireResetEnv&lt;/code>并不是很必要。参见讨论&lt;a href="https://github.com/openai/baselines/issues/240">https://github.com/openai/baselines/issues/240&lt;/a>。&lt;/p>
&lt;p>如果要使用上述Wrapper，只需要将原始的环境作为参数传递给Wrapper即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BreakoutNoFrameskip-v4&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">env_firereset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FireResetEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么新的环境&lt;code>env_firereset&lt;/code>在调用重置函数&lt;code>reset&lt;/code>时就会调用&lt;code>FireResetEnv&lt;/code>中重写的&lt;code>reset&lt;/code>函数。&lt;/p>
&lt;p>最后需要指出的是，&lt;code>FireResetEnv&lt;/code>类虽然负责开启特定游戏，但是在各个项目的Atari预处理流程中并不一定是最先处理的，甚至Gym项目中已经移除了FireReset的相关代码。（个人觉得只要放在NOOP处理的后面就问题不大）。&lt;/p>
&lt;h2 id="增加随机性">增加随机性&lt;/h2>
&lt;p>《The arcade learning environment: An evaluation platform for general agents》中指出，Atari 游戏是完全确定性的。 因此，玩家可以通过简单地记住最佳的动作序列而完全忽略对环境的观察来实现最先进的性能（例如背板行为）。为了避免这种情况，游戏环境都需要增加随机性。从添加随机性的时机来看，可以分为在初始阶段添加随机性（例如：NOOP）和交互阶段添加随机性（例如：Sticky action、frame skip）。&lt;/p>
&lt;p>在初始阶段，我们可以等一段时间在开始操作（即开始有几步什么都不做，No Operation），让环境自动演变一会，从而获得不同的初始状态。在交互阶段，可以使用Sticky action(粘连动作)：即动作不是总是准确传递到环境中的，而是有概率使用之前执行的动作，从而增加动作的随机性。此外，还可以应用Frame Skip（随机跳帧）：在每个环境步骤中，都会针对随机数量的帧重复该操作。可以通过将关键字参数frameskip设置为正整数或两个正整数的元组来更改此行为。如果frameskip是一个整数，则跳帧是确定性的，并且在每个步骤中动作都会重复frameskip很多次。否则，frameskip若是一个元组，则在每个环境步骤中，在（frameskip[0]， frameskip[1]）之间均匀随机选择跳过帧的数量来创造随机性。&lt;/p>
&lt;p>下面我们按照处理流程介绍增加随机性的功能。&lt;/p>
&lt;h3 id="sticky-action">Sticky Action&lt;/h3>
&lt;p>Sticky Action，中文翻译为粘连动作，是论文《Revisiting the Arcade Learning Environment:
Evaluation Protocols and Open Problems for General Agents》在Section 5.2中提出的方法，具体步骤为设定一个概率阈值&lt;code>repeat_action_probability&lt;/code>，每次Agent执行动作前先生成一个随机数，如果这个随机数大于&lt;code>repeat_action_probability&lt;/code>，则执行Agent本身的动作，否则沿用上一次的动作。这就使得动作产生了随机性，Atari游戏实际执行的动作并不一定是Agent传递的操作。&lt;/p>
&lt;p>ALE和Gymnasium都自己实现了Sticky action(粘连动作)代码，为了方便理解，我们将以Gymnaisum的代码作为基础进行适当简化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">StickyAction&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ActionWrapper&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Env&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Initialize StickyAction wrapper.
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s2"> env (Env): the wrapped environment
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> repeat_action_probability (int | float): a probability of repeating the old action.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="n">InvalidProbability&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;repeat_action_probability should be in the interval [0,1). Received &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ActionWrapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ActType&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">reset&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Reset the environment.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># 为了方便NOOP操作，这里设置为None&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="c1"># 如果随机数未超过阈值概率，则不接受新的动作，执行之前的动作&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">):&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span>
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">action&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">action&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="noop">Noop&lt;/h3>
&lt;p>在游戏刚开始阶段，在一定随机步数内不做任何操作，从而获得一定的初始随机化能力。我只需要设置一个最大Noop步数，代码会在0-max Noop中选择一个随机数N，执行N步的Noop。&lt;/p>
&lt;h3 id="frame-skip-与-max-pooling">Frame skip 与 Max pooling&lt;/h3>
&lt;h3 id="补充frame-stack">补充：Frame stack&lt;/h3>
&lt;h3 id="gym提供的随机性">Gym提供的随机性&lt;/h3>
&lt;p>在Gym V26中所有Atari游戏均提供三个随机性版本。它们的不同之处在于上述参数的默认设置。默认参数差异如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Version&lt;/th>
&lt;th style="text-align:center">frame skip&lt;/th>
&lt;th style="text-align:center">repeat_action_probability&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">V0&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">V4&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">V5&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0.25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>具体来说，对于每个 Atari 游戏，Gymnasium 中都会注册几种不同的配置。 v0 和 v4 的命名方案类似。 让我们以Amidar游戏为例看一下在gymnasium注册的Amidar的所有变体：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Env-id&lt;/th>
&lt;th style="text-align:left">obs_type=&lt;/th>
&lt;th style="text-align:left">frameskip=&lt;/th>
&lt;th style="text-align:left">repeat_action_probability=&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Amidar-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ram-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramDeterministic-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramNoFrameskip-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarDeterministic-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarNoFrameskip-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ram-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramDeterministic-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramNoFrameskip-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarDeterministic-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarNoFrameskip-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ALE/Amidar-v5&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ALE/Amidar-ram-v5&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注：obs_type表示观测返回的类型。可以有三种&lt;/p>
&lt;ol>
&lt;li>“ram”: The 128 Bytes of RAM&lt;/li>
&lt;li>“rgb”: 类似于人眼看到的RGB图像&lt;/li>
&lt;li>“grayscale”： 返回的是单一色的灰度图&lt;/li>
&lt;/ol>
&lt;h2 id="总体步骤的限制">总体步骤的限制&lt;/h2>
&lt;p>TimeLimit&lt;/p>
&lt;h2 id="游戏图像的处理">游戏图像的处理&lt;/h2>
&lt;p>WarpFrame流程：灰度图+缩放，有的需要裁剪&lt;/p>
&lt;h2 id="为了适应于神经网络的处理">为了适应于神经网络的处理&lt;/h2>
&lt;h3 id="episodic-life">Episodic Life&lt;/h3>
&lt;h3 id="clipreward">ClipReward&lt;/h3>
&lt;h3 id="scaledfloat">ScaledFloat&lt;/h3>
&lt;h3 id="frame-stack">Frame Stack&lt;/h3>
&lt;h3 id="frametopytorch">FrameToPytorch&lt;/h3>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.html">https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/">https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gymlibrary.dev/environments/atari/index.html">https://www.gymlibrary.dev/environments/atari/index.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stable-baselines3.readthedocs.io/en/master/_modules/stable_baselines3/common/atari_wrappers.html">https://stable-baselines3.readthedocs.io/en/master/_modules/stable_baselines3/common/atari_wrappers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition/blob/master/Chapter06/lib/wrappers.py">https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition/blob/master/Chapter06/lib/wrappers.py&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>python-gym中box空间环境解读</title><link>https://surprisedcat.github.io/projectnotes/python-gym%E4%B8%ADbox%E7%A9%BA%E9%97%B4%E7%8E%AF%E5%A2%83%E8%A7%A3%E8%AF%BB/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-gym%E4%B8%ADbox%E7%A9%BA%E9%97%B4%E7%8E%AF%E5%A2%83%E8%A7%A3%E8%AF%BB/</guid><description>
&lt;h2 id="python-gym中box空间环境解读---omit-in-toc---">python-gym中box空间环境解读&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Box空间环境中使用的辅助函数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>is_float_integer()&lt;/code>判断是否为整数或浮点数&lt;/li>
&lt;li>&lt;code>_broadcast()&lt;/code>将标量扩充为给定的shape大小与dtype类型，附带处理&lt;code>np.inf&lt;/code>的转换问题。&lt;/li>
&lt;li>&lt;code>get_precision()&lt;/code>获取数据类型精度，小知识：python中整型精度是无限。&lt;/li>
&lt;li>&lt;code>_short_repr()&lt;/code>如何将对象转换为一种简单的描述，一般用于&lt;code>print()&lt;/code>或者文本化。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 查看变量是否为整数或浮点数&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Checks if a variable is an integer or float.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 变量广播，实际上这个函数只对标量变量进行了广播，ndarray不变&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Handle infinite bounds and broadcast at the same time if needed.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> 包括对无穷大边界的整数化处理（实际就是±2）
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s2"> This is needed primarily because:
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s2"> &amp;gt;&amp;gt;&amp;gt; import numpy as np
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s2"> &amp;gt;&amp;gt;&amp;gt; np.full((2,), np.inf, dtype=np.int32)
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="s2"> array([-2147483648, -2147483648], dtype=int32)
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1"># 对于value值只是一个数字，直接扩展到shape大小&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># 判断value是否为负无穷大，以及类型是否为signed integer(缩写i)。对于float类型，-np.inf不用修改&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1"># np.iinfo表示机器对整数类型的限制（根据机器不同会有所区别）,这里根据实际类型将-np.inf值转换为对应dtype类型的下限。&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1"># 至于为什么是+2 我也不知道&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1"># 判断value是否为正无穷大，以及类型是否为signed integer(缩写i)，对于float类型，np.inf不用修改&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="c1"># 这里根据实际类型将np.inf值转换为对应dtype类型的上限&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># 至于为什么是-2 我也不知道&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="c1"># 使用np.full 填充常常数&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="c1"># 对于np.array类型，不需要再次填充，但是需要根据数据类型对无穷（inf）进行对应转换，因为astype对np.inf向整数类型的转换存在问题&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c1"># this is needed because we can&amp;#39;t stuff np.iinfo(int).min into an array of dtype float&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">casted_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="c1"># 对于整数类型无穷的转换处理（float类型与非inf值不用额外处理）&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="c1"># 只处理inf值&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">casted_value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="n">casted_value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">casted_value&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="c1"># only np.ndarray allowed beyond this point&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">TypeError&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Unknown dtype for `value`, expected `np.ndarray` or float/integer, got &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Get precision of a data type.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="c1"># 获取数据类型的精度，只针对float类型，其他类型精度无限？&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="c1"># 在Python 中整型的取值范围是无限的（整数具有无限的精度）&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">finfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">precision&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">56&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>
&lt;span class="ln">57&lt;/span>
&lt;span class="ln">58&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="c1"># 主要用来打印的时期，以何种方式简要地说明arr参数&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a shortened string representation of a numpy array.
&lt;/span>&lt;span class="ln">61&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">62&lt;/span>&lt;span class="s2"> If arr is a multiple of the all-ones vector, return a string representation of the multiplier.
&lt;/span>&lt;span class="ln">63&lt;/span>&lt;span class="s2"> Otherwise, return a string representation of the entire array.
&lt;/span>&lt;span class="ln">64&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">65&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="ln">66&lt;/span>&lt;span class="s2"> arr: The array to represent
&lt;/span>&lt;span class="ln">67&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">68&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="ln">69&lt;/span>&lt;span class="s2"> A short representation of the array
&lt;/span>&lt;span class="ln">70&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">71&lt;/span> &lt;span class="c1"># 首先处理特殊情况，一般情况就是使用arr自身的__repr__功能&lt;/span>
&lt;span class="ln">72&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">73&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">74&lt;/span> &lt;span class="c1"># 主要还是利用array自身的__repr__功能&lt;/span>
&lt;span class="ln">75&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体实现自己的MyBox模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Mapping&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">numpy.typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">NDArray&lt;/span> &lt;span class="c1"># NDArray Can be used during runtime for typing arrays with a given dtype and unspecified shape.&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy.typing&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">npt&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyBox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spaces&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Space&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">any&lt;/span>&lt;span class="p">]]):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 10&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 11&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 12&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float32&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 13&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 14&lt;/span> &lt;span class="c1"># super().__init__(shape, dtype, seed)&lt;/span>
&lt;span class="ln"> 15&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;Box dtype must be explicitly provided, cannot be None.&amp;#34;&lt;/span>
&lt;span class="ln"> 16&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 17&lt;/span>
&lt;span class="ln"> 18&lt;/span> &lt;span class="c1"># determine shape if it isn&amp;#39;t provided directly&lt;/span>
&lt;span class="ln"> 19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 20&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dim&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">dim&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Expected all shape elements to be an integer, actual type: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dim&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">dim&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 21&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 22&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 23&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 24&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 25&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 26&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln"> 27&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 28&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box shape is inferred from low and high, expected their types to be np.ndarray, an integer or a float, actual type low: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, high: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 29&lt;/span>
&lt;span class="ln"> 30&lt;/span> &lt;span class="c1"># Capture the boundedness information before replacing np.inf with get_inf&lt;/span>
&lt;span class="ln"> 31&lt;/span> &lt;span class="c1"># 对于单个low数字，使用shape大小进行填充，对于其他如ndarray则保留原有形式&lt;/span>
&lt;span class="ln"> 32&lt;/span> &lt;span class="n">_low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">low&lt;/span>
&lt;span class="ln"> 33&lt;/span>
&lt;span class="ln"> 34&lt;/span> &lt;span class="c1"># 记录是否有界，如果_low中元素都大于-np.inf就认为是有下界的&lt;/span>
&lt;span class="ln"> 35&lt;/span> &lt;span class="c1"># 注意low的类型必须是int，float或np.array否则无法重载比较运算符&lt;/span>
&lt;span class="ln"> 36&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bool_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">_low&lt;/span>
&lt;span class="ln"> 37&lt;/span> &lt;span class="c1"># 记录是否有界，如果_high中元素都小于np.inf就认为是有下界的&lt;/span>
&lt;span class="ln"> 38&lt;/span> &lt;span class="c1"># 注意high的类型必须是int，float或np.array否则无法重载比较运算符&lt;/span>
&lt;span class="ln"> 39&lt;/span> &lt;span class="n">_high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">high&lt;/span>
&lt;span class="ln"> 40&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bool_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_high&lt;/span>
&lt;span class="ln"> 41&lt;/span> &lt;span class="c1"># 注：是否有界会影响抽样函数sample函数使用的分布函数。&lt;/span>
&lt;span class="ln"> 42&lt;/span>
&lt;span class="ln"> 43&lt;/span> &lt;span class="c1"># 如果low,high是单个数字，将他们扩展成一个ndarray&lt;/span>
&lt;span class="ln"> 44&lt;/span> &lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 45&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 46&lt;/span>
&lt;span class="ln"> 47&lt;/span> &lt;span class="c1"># 确保low经过前面操作，已经是np.ndarray类型&lt;/span>
&lt;span class="ln"> 48&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 49&lt;/span> &lt;span class="c1"># 确保low的shape与参数提供的shape一致&lt;/span>
&lt;span class="ln"> 50&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;low.shape doesn&amp;#39;t match provided shape, low.shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 51&lt;/span>
&lt;span class="ln"> 52&lt;/span> &lt;span class="c1"># 确保high经过前面操作，已经是np.ndarray类型&lt;/span>
&lt;span class="ln"> 53&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 54&lt;/span> &lt;span class="c1"># 确保high的shape与参数提供的shape一致&lt;/span>
&lt;span class="ln"> 55&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;high.shape doesn&amp;#39;t match provided shape, high.shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 56&lt;/span>
&lt;span class="ln"> 57&lt;/span> &lt;span class="c1"># 检验low与high的大小关系是否正确&lt;/span>
&lt;span class="ln"> 58&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">):&lt;/span>&lt;span class="c1"># low中有任一元素大于high&lt;/span>
&lt;span class="ln"> 59&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Some low values are greater than high, low=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, high=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 60&lt;/span> &lt;span class="c1"># 如果low的值是正无穷或者high的值是负无穷，肯定是错的&lt;/span>
&lt;span class="ln"> 61&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln"> 62&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;No low value can be equal to `np.inf`, low=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 63&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln"> 64&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;No high value can be equal to `-np.inf`, high=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 65&lt;/span>
&lt;span class="ln"> 66&lt;/span> &lt;span class="c1"># 确定shape变量没问题，赋值&lt;/span>
&lt;span class="ln"> 67&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shape&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 68&lt;/span>
&lt;span class="ln"> 69&lt;/span> &lt;span class="c1"># 确定low,high没问题，按照dtype转换成相应类型赋值&lt;/span>
&lt;span class="ln"> 70&lt;/span> &lt;span class="c1"># 我的疑问：在_broadcast()函数中已经做过了一样的操作,完成了转换，这里有必要再用一次astype()吗？&lt;/span>
&lt;span class="ln"> 71&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 72&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 73&lt;/span>
&lt;span class="ln"> 74&lt;/span> &lt;span class="c1"># 生成简洁的文本化描述&lt;/span>
&lt;span class="ln"> 75&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 76&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 77&lt;/span>
&lt;span class="ln"> 78&lt;/span> &lt;span class="c1"># 获取数据精度，暂时不知道用处&lt;/span>
&lt;span class="ln"> 79&lt;/span> &lt;span class="n">low_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 80&lt;/span> &lt;span class="n">high_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 81&lt;/span> &lt;span class="n">dtype_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 82&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low_precision&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high_precision&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dtype_precision&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 83&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box bound precision lowered by casting to &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 84&lt;/span>
&lt;span class="ln"> 85&lt;/span> &lt;span class="c1"># 最后调用父函数&lt;/span>
&lt;span class="ln"> 86&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 87&lt;/span>
&lt;span class="ln"> 88&lt;/span>
&lt;span class="ln"> 89&lt;/span> &lt;span class="c1"># 设置一些只读属性&lt;/span>
&lt;span class="ln"> 90&lt;/span> &lt;span class="nd">@property&lt;/span>
&lt;span class="ln"> 91&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln"> 92&lt;/span> &lt;span class="c1"># 比父类gym.Space更加严格，永远不要是None&lt;/span>
&lt;span class="ln"> 93&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shape&lt;/span>
&lt;span class="ln"> 94&lt;/span>
&lt;span class="ln"> 95&lt;/span> &lt;span class="nd">@property&lt;/span>
&lt;span class="ln"> 96&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">is_np_flattenable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 97&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Checks whether this space can be flattened to a :class:`spaces.Box`.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 98&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 99&lt;/span>
&lt;span class="ln">100&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">is_bounded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">manner&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">101&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="s2"> 检验box是否有界（某种程度上）
&lt;/span>&lt;span class="ln">103&lt;/span>&lt;span class="s2"> 参数： Args : manner(str): ``&amp;#34;both&amp;#34;``, ``&amp;#34;below&amp;#34;``, ``&amp;#34;above&amp;#34;``
&lt;/span>&lt;span class="ln">104&lt;/span>&lt;span class="s2"> 结果： 实际边界与给定的manner是否一致
&lt;/span>&lt;span class="ln">105&lt;/span>&lt;span class="s2"> Raises: ValueError: 如果 `manner` 不是 ``&amp;#34;both&amp;#34;`` 或 ``&amp;#34;below&amp;#34;`` 或 ``&amp;#34;above&amp;#34;``
&lt;/span>&lt;span class="ln">106&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">107&lt;/span> &lt;span class="c1"># 之前在__init__()环境中，检验的是否有上下界&lt;/span>
&lt;span class="ln">108&lt;/span> &lt;span class="n">below&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">109&lt;/span> &lt;span class="n">above&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">110&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">111&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">below&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">above&lt;/span>
&lt;span class="ln">112&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;below&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">113&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">below&lt;/span>
&lt;span class="ln">114&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;above&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">115&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">above&lt;/span>
&lt;span class="ln">116&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 对于既不是both, below, above的场景，就报错&lt;/span>
&lt;span class="ln">117&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;manner is not in &lt;/span>&lt;span class="se">{{&lt;/span>&lt;span class="s2">&amp;#39;below&amp;#39;, &amp;#39;above&amp;#39;, &amp;#39;both&amp;#39;&lt;/span>&lt;span class="se">}}&lt;/span>&lt;span class="s2">, actual value: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">manner&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">118&lt;/span>
&lt;span class="ln">119&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">sample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">120&lt;/span> &lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;从Box的空间随机生成一个样本
&lt;/span>&lt;span class="ln">121&lt;/span>&lt;span class="s2"> 从box空间的每一个维度独立地抽样，抽样原则服从如下方式：
&lt;/span>&lt;span class="ln">122&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">123&lt;/span>&lt;span class="s2"> * :math:`[a, b]` : 均匀分布
&lt;/span>&lt;span class="ln">124&lt;/span>&lt;span class="s2"> * :math:`[a, \infty)` : 偏移的指数分布
&lt;/span>&lt;span class="ln">125&lt;/span>&lt;span class="s2"> * :math:`(-\infty, b]` : 偏倚的负指数分布
&lt;/span>&lt;span class="ln">126&lt;/span>&lt;span class="s2"> * :math:`(-\infty, \infty)`： 正态分布
&lt;/span>&lt;span class="ln">127&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">128&lt;/span>&lt;span class="s2"> Args: mask：暂时不支持……
&lt;/span>&lt;span class="ln">129&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">130&lt;/span>&lt;span class="s2"> Returns: 一个从Box空间随机抽样的值
&lt;/span>&lt;span class="ln">131&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">132&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 暂时不支持mask，提供的话报错&lt;/span>
&lt;span class="ln">133&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">134&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box.sample cannot be provided a mask, actual value: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">135&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">136&lt;/span> &lt;span class="c1"># 抽样空间上限处理。对于整数处理时，初始化函数是-2，这里是+1，不知道为什么&lt;/span>
&lt;span class="ln">137&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;f&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;int64&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">138&lt;/span>
&lt;span class="ln">139&lt;/span> &lt;span class="c1"># 抽样结果初始化&lt;/span>
&lt;span class="ln">140&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">141&lt;/span>
&lt;span class="ln">142&lt;/span> &lt;span class="c1"># 查看每一个维度是否有界，注意self.bounded_below与self.bounded_above都是bool序列，~表示按位取反，&amp;amp;表示按位与操作&lt;/span>
&lt;span class="ln">143&lt;/span> &lt;span class="c1"># 下面四个变量都是True，False的np.array数组，用于索引取舍&lt;/span>
&lt;span class="ln">144&lt;/span> &lt;span class="c1"># 无界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">145&lt;/span> &lt;span class="n">unbounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">146&lt;/span> &lt;span class="c1"># 仅有上界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">147&lt;/span> &lt;span class="n">upp_bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">148&lt;/span> &lt;span class="c1"># 仅有下界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">149&lt;/span> &lt;span class="n">low_bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">150&lt;/span> &lt;span class="c1"># 有界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">151&lt;/span> &lt;span class="n">bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">152&lt;/span>
&lt;span class="ln">153&lt;/span> &lt;span class="c1"># 针对四种边界情形，分别根据分布类型抽样。属性self.np_random继承自父类class Space(Generic[T_cov])&lt;/span>
&lt;span class="ln">154&lt;/span> &lt;span class="c1"># 无界的维度，正态分布抽样。通过unbounded的bool数组筛选项，再赋值&lt;/span>
&lt;span class="ln">155&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">normal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># unbounded[unbounded]得到其中为True的项&lt;/span>
&lt;span class="ln">156&lt;/span>
&lt;span class="ln">157&lt;/span> &lt;span class="c1"># 有下界，使用指数分布定义域[0,+infty)，加上下界作为偏移量，范围为[self.low[low_bounded], +infty)&lt;/span>
&lt;span class="ln">158&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exponential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">159&lt;/span>
&lt;span class="ln">160&lt;/span> &lt;span class="c1"># 有上界，使用负指数分布，定义域(-infty,0]，加上上界作为偏移量，范围为(-infty, high[upp_bounded]]&lt;/span>
&lt;span class="ln">161&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exponential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1"># 注意小区别，这里用的是high而不是self.high，因为上限的一点处理，具体不知道为什么&lt;/span>
&lt;span class="ln">162&lt;/span>
&lt;span class="ln">163&lt;/span> &lt;span class="c1"># 上下界皆存在，均匀分布抽样&lt;/span>
&lt;span class="ln">164&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">165&lt;/span>
&lt;span class="ln">166&lt;/span> &lt;span class="c1"># 对于整形，无符号整形等，向下取整&lt;/span>
&lt;span class="ln">167&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;u&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">168&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">169&lt;/span>
&lt;span class="ln">170&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 按要求类型返回&lt;/span>
&lt;span class="ln">171&lt;/span>
&lt;span class="ln">172&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">173&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Return boolean specifying if x is a valid member of this space.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">174&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 如果x不是np.ndarray类型，先尝试转换成np.ndarray&lt;/span>
&lt;span class="ln">175&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Casting input x to numpy array.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">176&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">177&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">asarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">178&lt;/span> &lt;span class="k">except&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">ValueError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">TypeError&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">179&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">180&lt;/span>
&lt;span class="ln">181&lt;/span> &lt;span class="c1"># 转换成功或者x是np.ndarray时&lt;/span>
&lt;span class="ln">182&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">can_cast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1"># 类型可以转换&lt;/span>
&lt;span class="ln">183&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="c1"># shape大小一致&lt;/span>
&lt;span class="ln">184&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 处于上界与下界之间&lt;/span>
&lt;span class="ln">185&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">186&lt;/span>
&lt;span class="ln">187&lt;/span> &lt;span class="c1"># json序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">188&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">to_jsonable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">189&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Convert a batch of samples from this space to a JSONable data type.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">190&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tolist&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">191&lt;/span>
&lt;span class="ln">192&lt;/span> &lt;span class="c1"># json反序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">193&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">from_jsonable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;span class="ln">194&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Convert a JSONable data type to a batch of samples from this space.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">195&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">asarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">196&lt;/span>
&lt;span class="ln">197&lt;/span> &lt;span class="c1"># 打印时如何生成string字符串&lt;/span>
&lt;span class="ln">198&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__repr__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">199&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;A string representation of this space.
&lt;/span>&lt;span class="ln">200&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">201&lt;/span>&lt;span class="s2"> The representation will include bounds, shape and dtype.
&lt;/span>&lt;span class="ln">202&lt;/span>&lt;span class="s2"> If a bound is uniform, only the corresponding scalar will be given to avoid redundant and ugly strings.
&lt;/span>&lt;span class="ln">203&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">204&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="ln">205&lt;/span>&lt;span class="s2"> A representation of the space
&lt;/span>&lt;span class="ln">206&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">207&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box(&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>
&lt;span class="ln">208&lt;/span>
&lt;span class="ln">209&lt;/span> &lt;span class="c1"># 对于等号运算符的重载&lt;/span>
&lt;span class="ln">210&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__eq__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">211&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Check whether `other` is equivalent to this instance. Doesn&amp;#39;t check dtype equivalence.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">212&lt;/span> &lt;span class="c1"># 两个Box空间是否相等，看下面四条&lt;/span>
&lt;span class="ln">213&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="ln">214&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MyBox&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 类的类型是否相容&lt;/span>
&lt;span class="ln">215&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># shape大小是否一致&lt;/span>
&lt;span class="ln">216&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 用于比较浮点数，两者相差是否在一定范围内&lt;/span>
&lt;span class="ln">217&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 上下界是否一样&lt;/span>
&lt;span class="ln">218&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">219&lt;/span> &lt;span class="c1"># 用于python的反序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">220&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">__setstate__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Iterable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">Mapping&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]]):&lt;/span>
&lt;span class="ln">221&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Sets the state of the box for unpickling a box with legacy support.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">222&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__setstate__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">223&lt;/span>
&lt;span class="ln">224&lt;/span> &lt;span class="c1"># legacy support through re-adding &amp;#34;low_repr&amp;#34; and &amp;#34;high_repr&amp;#34; if missing from pickled state&lt;/span>
&lt;span class="ln">225&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">hasattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;low_repr&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">226&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">227&lt;/span>
&lt;span class="ln">228&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">hasattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;high_repr&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">229&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="n">testbox&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MyBox&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">),&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">),&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bounded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_np_flattenable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># (3, 4) False True&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contains&lt;/span>&lt;span class="p">(([[&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">]])))&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="s1">[[ True True True True]
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="s1"> [False False True True]
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="s1"> [ True True False False]]
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="s1">[[ True True True True]
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="s1"> [False False False False]
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="s1"> [False False True True]]
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="s1">[[ 0.02490971 0.73054417 0.12991174 0.0641791 ]
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="s1"> [-0.96922534 1.03660516 0.84641361 0.84423148]
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="s1"> [-2.12524701 0.19277976 1.75165337 0.16050653]]
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="s1">True
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="s1">/tmp/ipykernel_18223/1967140855.py:169: UserWarning: WARN: Casting input x to numpy array.
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="s1"> gym.logger.warn(&amp;#34;Casting input x to numpy array.&amp;#34;)
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python-Pytorch中随机种子问题</title><link>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</guid><description>
&lt;h2 id="可复现的pytorch---omit-in-toc---">可复现的pytorch&lt;!-- omit in toc -->&lt;/h2>
&lt;p>为了保证实验的「可复现性」，许多机器学习的代码都会有一个方法叫 seed_everything，这个方法尝试固定随机种子以让一些随机的过程在每一次的运行中产生相同的结果。但如果用谷歌搜索「how to seed everything in pytorch」，会得到各种不同的版本，本文就来讨论如何正确设置&lt;strong>随机种子&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90">什么是随机种子&lt;/a>&lt;/li>
&lt;li>&lt;a href="#linux-%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">Linux 系统中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">程序中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cuda%E9%9A%8F%E6%9C%BA%E6%95%B0">CUDA随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">不同设备之间的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%80%A7">多进程的随机性&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="什么是随机种子">什么是随机种子&lt;/h2>
&lt;p>随机数，分为&lt;strong>真随机数&lt;/strong>和&lt;strong>伪随机数&lt;/strong>，真随机数需要自然界中真实的随机物理现象才能产生，而对于计算机来说生成这种随机数是很难办到的。而伪随机数是通过一个初始化的值，来计算来产生一个随机序列，如果初始值是不变的，那么多次从该种子产生的随机序列也是相同的。这个初始值一般就称为&lt;strong>种子&lt;/strong>。&lt;/p>
&lt;h2 id="linux-系统中的随机数">Linux 系统中的随机数&lt;/h2>
&lt;p>在 Ubuntu 系统中，有一个专门管理随机种子的服务&lt;a href="https://manpages.ubuntu.com/manpages/focal/en/man8/systemd-random-seed.service.8.html">systemd-random-seed.service&lt;/a>，该服务负责在计算机启动的时候，从硬盘上加载一个随机种子文件到内核中，以作为随机初始化值在整个系统运行的过程中提供服务。Linux 会通过许多硬件信息来获得这个初始化值。可以通过&lt;code>/dev/urandom&lt;/code>文件来产生随机字节，然后使用&lt;code>od&lt;/code>命令（该命令可将字节转换成希望的格式并打印）来获得随机数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 随机生成 0 ~ 255 的数。&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># -N1 从 /dev/urandom 中读取一个字节&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># -t u1 将字节流格式化为为 1 字节的无符号整型&lt;/span>
&lt;span class="ln">4&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 输出 194&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 再次调用&lt;/span>
&lt;span class="ln">8&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">9&lt;/span>&lt;span class="c1"># 输出 50&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果仅希望获得随机数，直接读取&lt;code>/dev/urandom&lt;/code>或调用 Linux 系统调用&lt;code> getrandom()&lt;/code>(内部也使用&lt;code>/dev/urandom&lt;/code>)是不错的选择。但这种随机数是无法复现的，因为种子是由系统设置的，并且每次开机设置的种子都不一样。在「可复现」的场景中，我们需要的是一种能手动控制随机种子和读取随机序列的方式，以便可以重复获得相同随机序列的功能。&lt;/p>
&lt;p>如果一个过程依赖系统产生的随机数，则称这个过程是 Non Deterministic（不确定的）；相反的如果一个过程对相同的输入种子都有相同的输出，则这个随机过程是Deterministic 的。在「可复现」场景中，我们需要保证所有的随机过程都是 Deterministic 的。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>/dev/random&lt;/code>可生成「随机性」更强的随机数，但由于其依赖的系统资源更多，导致性能缓慢，因此绝大多数场景都只使用&lt;code>/dev/urandom&lt;/code>。&lt;code>/dev/random&lt;/code>依赖于系统的熵池，在没有足够多随机性时并不会产生随机数从而导致阻塞。&lt;/p>
&lt;/blockquote>
&lt;h2 id="程序中的随机数">程序中的随机数&lt;/h2>
&lt;p>在 PyTorch 中，设置随机种子的方法是&lt;code>torch.manual_seed(777)&lt;/code>，这里 777 就是我们所设置的随机种子，设置完毕后，如果多次调用同样的具有随机过程 PyTorch 方法，就会获得相同的结果，例如下面的代码在多次调用后的打印是一样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.0819])&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.4911])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不论在任何机器或系统，只要使用 &lt;code>torch==1.10.0&lt;/code> 版本（其他版本大概率也是 OK 的），输出应该都是长这样的。诶？既然随机种子产生跟系统硬件信息相关，那不同的机器至少应该不一样才对呀？上文说了，在要求「可复现」的场景下，是不能使用&lt;code>/dev/urandom&lt;/code>来产生随机数的，那剩下的是需要搞清楚 PyTorch 是如何生成随机数的。&lt;/p>
&lt;p>通过&lt;code>torch.manual_seed&lt;/code>方法往下找，可以知道 PyTorch 生成随机数是使用了&lt;a href="https://en.wikipedia.org/wiki/Mersenne_Twister">MT19937（梅森旋轉）算法&lt;/a>，这个算法的输入只有一个初始化值也不需要其他的环境信息。因此无论在任何机器，只要 PyTorch 的版本一致（算法部分没有改变）并且设置了随机种子，那么调用随机过程所产生的随机数就是一致的。&lt;/p>
&lt;p>C++ 11 在标准库中直接引入了这个方法：&lt;code>std::mt19937&lt;/code>，而 PyTorch 是自己实现的，官方称性能比 C++ 的版本要更好一些，感兴趣的话可以直接看 PyTorch &lt;a href="https://github.com/pytorch/pytorch/blob/main/aten/src/ATen/core/MT19937RNGEngine.h">源码&lt;/a>。&lt;/p>
&lt;p>NumPy 的&lt;code>np.random.seed&lt;/code>也同样使用 &lt;code>MT19937&lt;/code>来生成随机数，因此也与硬件无关。要注意的是：&lt;code>np.random.seed&lt;/code> 只影响 NumPy 的随机过程，&lt;code>torch.manual_seed&lt;/code> 也只影响 PyTorch 的随机过程。通过下面的代码很容易验证这个结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用产生不同输出&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 [0.15266373]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可以得到这样的结论：程序中所有依赖 MT19937 算法产生随机数的包，都需要手动设置随机种子，才能使整个程序的随机性是可复现的。&lt;/p>
&lt;blockquote>
&lt;p>PS: 根据&lt;a href="https://pytorch.org/docs/stable/notes/randomness.html#pytorch-random-number-generator">文档中可复现性描述&lt;/a>，设置 &lt;code>torch.manual_seed&lt;/code> 是对所有的设备设置随机种子。目前似乎没有单独为 CPU 设备设置随机种子的方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cuda随机数">CUDA随机数&lt;/h2>
&lt;p>PyTorch 中，还有另一个设置随机种子的方法：&lt;code>torch.cuda.manual_seed_all&lt;/code>，从名字可知这是设置&lt;strong>显卡&lt;/strong>的随机种子。&lt;/p>
&lt;p>在 PyTorch 的内部，使用 &lt;code>CUDA Runtime API&lt;/code> 提供的 &lt;code>curand&lt;/code> 来设置随机种子，根据 &lt;code>curand&lt;/code> 的文档，他们提供的所有随机数生成算法都是 Deterministic 的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码看起来不够「随机」，因为在不同的 GPU 设备上产生了相同的结果，如果希望不同设备可以产生不同的随机数，可以这么做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">777&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">device_count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_device&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.4315], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.6701], device=&amp;#39;cuda:1&amp;#39;)&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码既保证了随机性（不同设备产生不同的随机数），也保证了确定性（多次调用只产生相同结果）。在真实场景中，一般只会用相同的设备来产生随机数，因此&lt;code>torch.manual_seed(777)&lt;/code>应该就能满足大多数需求。&lt;/p>
&lt;h2 id="不同设备之间的随机数">不同设备之间的随机数&lt;/h2>
&lt;p>先问一个问题：「用 GPU 训练的实验结果，可以在 CPU 上复现吗？」。&lt;/p>
&lt;p>答案是「也许可以」。&lt;/p>
&lt;p>根据前文可知，CPU 设置随机种子是用 PyTorch 官方实现的 MT19937，而 GPU 是用到了 CUDA Runtime API 的&lt;code>curand&lt;/code>。因此两套实现是完全不同的，那么对于相同的随机种子，理应产生不同的随机序列，用下面的代码可以验证：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 将下面的 cuda:0 改为 cuda:1 会产生相同的结果，因为都是 curand 算法&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的例子中知道，对于同一个随机种子，在 CPU 和 GPU 上产出的结果是不同的，因此这种情况在 GPU 上的结果是无法在 CPU 上复现的。那为什么的答案是「也许可以」呢？&lt;/p>
&lt;p>因为很多代码，都会在 CPU 上创建 Tensor，再切换到 GPU 上。&lt;em>只要不直接在 GPU 上创建随机变量，就可以避免这个问题&lt;/em>。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码输出值跟 CPU 一致，但是 device 是在 CUDA 上。这样写可能性能不如直接在 GPU 上直接创建随机变量效率高，但为了保证程序的确定性，牺牲一点性能我认为是值得的。&lt;/p>
&lt;h2 id="多进程的随机性">多进程的随机性&lt;/h2>
&lt;p>PyTorch 的 &lt;code>torch.utils.data.DataLoader&lt;/code> 在 &lt;code>num_worker &amp;gt; 0&lt;/code> 的情况下会 fork 出子进程，而通常又会在加载数据的时候做很多「随机变换」，那么就有必要讨论一下多进程下的随机性是怎样的，&lt;/p>
&lt;p>子进程一般会保留父进程的一些状态，这也包括随机种子。因此若不做特殊处理，所有子进程都会产生和父进程相同的随机序列。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">torch.utils.data&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dataset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DataLoader&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dataset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__getitem__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_numpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__len__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataLoader&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">num_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">loader_result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1"># 输出&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># tensor([[0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685],&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c1"># [0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685]], dtype=torch.float64)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注：上面的结果在 torch&amp;gt;=1.9.0 是不能复现的，因为 PyTorch 1.9 之后给 DataLoader 默认给每个 worker 重新设置随机种子。&lt;/p>
&lt;/blockquote>
&lt;p>可以发现两次 batch 输出的结果是一样的，这是因为主进程中 numpy 的随机性，被两个 worker 保留了，因此两个 worker 的随机性是相同的。&lt;/p></description></item><item><title>python-深入理解Matplotlib3D绘图函数plot_surface的rstride和cstride参数</title><link>https://surprisedcat.github.io/projectnotes/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3matplotlib3d%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0plot_surface%E7%9A%84rstride%E5%92%8Ccstride%E5%8F%82%E6%95%B0/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3matplotlib3d%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0plot_surface%E7%9A%84rstride%E5%92%8Ccstride%E5%8F%82%E6%95%B0/</guid><description>
&lt;h2 id="深入理解-matplotlib-3d-绘图函数-plot_surface-的-rstride-和-cstride-参数---omit-in-toc---">深入理解 Matplotlib 3D 绘图函数 plot_surface 的 rstride 和 cstride 参数&lt;!-- omit in toc -->&lt;/h2>
&lt;p>今晚开始接触 Matplotlib 的 3D 绘图函数 plot_surface，真的非常强大，图片质量可以达到出版级别，而且 3D 图像可以旋转 ，可以从不同角度来看某个 3D 立体图，但是我发现各大中文开源社区有关 3D 绘图的代码都是千篇一律的，现除了看源码说明，我几乎得不到半点有关 plot_surface 的重要参数说明，而且我感觉纯英文的源码说明晦涩难懂，而且没有任何配图，初学者看得是云里雾里，经过一晚上的调试，我才完全弄明白所有参数的含义，以及如何改变这些参数控制图形的显示，现分享给大家Talk is cheap, show the code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># author: inspurer(月小水长)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># pc_type lenovo&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># create_date: 2019/1/23&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># file_name: 3DTest&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># github https://github.com/inspurer&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># qq_mail 2391527690@qq.com&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2">绘制3d图形
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">mpl_toolkits.mplot3d&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Axes3D&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 定义figure&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">fig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">figure&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># 创建3d图形的两种方式&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c1"># 将figure变为3d&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="n">ax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Axes3D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#ax = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># 定义x, y&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c1"># 生成网格数据&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">meshgrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="c1"># 计算每个点对的长度&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">R&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># 计算Z轴的高度&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">31&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1"># 绘制3D曲面&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="c1"># rstride:行之间的跨度 cstride:列之间的跨度&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="c1"># rcount:设置间隔个数，默认50个，ccount:列的间隔个数 不能与上面两个参数同时出现&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="c1"># cmap是颜色映射表&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="c1"># from matplotlib import cm&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="c1"># ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = cm.coolwarm)&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="c1"># cmap = &amp;#34;rainbow&amp;#34; 亦可&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1"># 我的理解的 改变cmap参数可以控制三维曲面的颜色组合, 一般我们见到的三维曲面就是 rainbow 的&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="c1"># 你也可以修改 rainbow 为 coolwarm, 验证我的结论&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot_surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rstride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cstride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_cmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rainbow&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">43&lt;/span>
&lt;span class="ln">44&lt;/span>&lt;span class="c1"># 绘制从3D曲面到底部的投影,zdir 可选 &amp;#39;z&amp;#39;|&amp;#39;x&amp;#39;|&amp;#39;y&amp;#39;| 分别表示投影到z,x,y平面&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="c1"># zdir = &amp;#39;z&amp;#39;, offset = -2 表示投影到z = -2上&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contour&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_cmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rainbow&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">47&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="c1"># 设置z轴的维度，x,y类似&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_zlim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;p>&lt;img src="../../images/matplotlib_3d.png" alt="matplot3d">
其中大部分的参数说明我已经在注释了，应该很容易理解，其中的 rstride （row stride)和 cstride (column stride) (stride是步长的意思，row : 行，column : 列）参数也有了初步的介绍，下面重点讨论如何理解他们。&lt;/p>
&lt;h2 id="初探">初探&lt;/h2>
&lt;p>旋转3D图形：&lt;/p>
&lt;p>&lt;img src="../../images/rototate_python.gif" alt="旋转3D图形">&lt;/p>
&lt;p>我发现无论是x向，还是y向，条纹数都是 32&lt;/p>
&lt;p>而这刚好是我们&lt;code>x = np.arange(-4, 4, 0.25)&lt;/code>中[4-（-4）]/0.25 = 32&lt;/p>
&lt;p>而&lt;code>ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = plt.get_cmap('rainbow'))&lt;/code>中rstride = 1, cstride = 1,r（row)对应x向，c(column)对应y向，rstride = 1说明在x向的条纹间隔为1个x向的间隔0.25，cstride = 1说明在y向的条纹间隔为1个y向的间隔0.25.而把&lt;code>rstride = 1, cstride = 1&lt;/code>去掉之后，我发现图形不变，说明1个距离是默认值。而且这两个参数只能是正整数，最小正整数就是1（默认值），所以为了图形的平滑，基本上我们不需要修改这个参数。&lt;/p>
&lt;h2 id="验证">验证&lt;/h2>
&lt;h3 id="修改参数使-rstride--4">修改参数，使 rstride = 4&lt;/h3>
&lt;p>其结果如下：&lt;/p>
&lt;p>&lt;img src="../../images/matplotlib_rstride4.gif" alt="rstride=4">
32 / 4 = 8,x向的条纹数变成了 8 ，这符合我们的预期，看来我们得推测是正确的。&lt;/p>
&lt;h3 id="再修改参数使-cstride-也--4">再修改参数，使 cstride 也 = 4&lt;/h3>
&lt;p>其结果如下：&lt;/p>
&lt;p>&lt;img src="../../images/matplotlib_cstride4.gif" alt="cstride=4">&lt;/p>
&lt;p>可以看到无论是x向，还是y向，条纹数都变成了 8 ，同时由于间距变大，图形也比原来更粗糙了。&lt;/p></description></item><item><title>python-语法装饰器</title><link>https://surprisedcat.github.io/projectnotes/python-%E8%AF%AD%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E8%AF%AD%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>
&lt;h2 id="python转载一周一个python语法糖一装饰器---omit-in-toc---">python(转载)一周一个Python语法糖：（一）装饰器&lt;!-- omit in toc -->&lt;/h2>
&lt;p>作者：寒夏凉秋 
原文链接:&lt;a href="https://www.jianshu.com/p/fd746acbdf1e">https://www.jianshu.com/p/fd746acbdf1e&lt;/a>&lt;/p>
&lt;h2 id="decorator">Decorator&lt;/h2>
&lt;p>首先，我们来认识一下装饰器是什么：
装饰器是给现有的模块增添新的小功能
（在不改变原有模块功能的基础上）&lt;/p>
&lt;blockquote>
&lt;p>假如我有个简单笔，它只能用一种颜色进行写字
我现在给它加上一只笔芯，它能换种颜色写字（又能换回来~）
这就是装饰器的朴素比喻&lt;/p>
&lt;/blockquote>
&lt;h2 id="一初探装饰器">一、初探装饰器&lt;/h2>
&lt;p>手动写个装饰器吧&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 自定义装饰函数&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">#这里装饰器的作用是在函数调用前增加一句话表示装饰成功&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;this is decorator for &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapper&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello,&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">#用赋值的形式进行装饰器&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cool&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>this is decorator for hello
&lt;span class="ln">2&lt;/span>hello, cool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，我们要知道，在python中，函数也是一种&lt;strong>对象&lt;/strong>（万物皆对象！）&lt;/p>
&lt;ol>
&lt;li>函数可以赋值给一个变量（学过C语言的可以联想下函数指针）&lt;/li>
&lt;li>函数可以定义在另一个函数内部&lt;/li>
&lt;/ol>
&lt;p>这也意味着一个函数可以返回另一个函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这一句代码中，将&lt;code>hello函数&lt;/code>作为&lt;code>变量&lt;/code>传入&lt;code>decorator装饰器&lt;/code>中，然后&lt;code>hello方法&lt;/code>在&lt;code>decorator&lt;/code>中的函数&lt;code>wrapper函数&lt;/code>实现，同时包装新的功能，将&lt;code>新的函数wrapper&lt;/code>作为变量返回 ，所以&lt;code>hello&lt;/code>的新值是经过&lt;code>decorator&lt;/code>装饰的&lt;code>wrapper&lt;/code>新方法。&lt;/p>
&lt;p>&lt;strong>所以，装饰器装饰函数的时候，将函数作为变量传入装饰器内部，实际调用的是装饰器内部的函数（添加新功能之后的函数）&lt;/strong>。&lt;/p>
&lt;h2 id="二-语法糖">二、 @语法糖&lt;/h2>
&lt;p>Python 中装饰器语法并不用每次都用赋值语句。&lt;/p>
&lt;p>在函数定义的时候就加上&lt;code>@+装饰器名字&lt;/code>即可。&lt;/p>
&lt;p>再来我们刚才的例子吧：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;this is decorator for &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapper&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nd">@decorator&lt;/span> &lt;span class="c1"># @decorator &amp;lt;== hello=decorator(hello)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello,&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cool&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行的效果和上面一样。&lt;/p>
&lt;h3 id="装饰器的顺序">装饰器的顺序&lt;/h3>
&lt;p>比如我们有两个装饰器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@decorator_one&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nd">@decorator_two&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这句代码实际上类似于：&lt;code>hello=decorator_one(decorator_two(hello))&lt;/code>；&lt;strong>两个装饰器一层层地往外装饰&lt;/strong>。&lt;/p>
&lt;h3 id="带参数的装饰器">带参数的装饰器&lt;/h3>
&lt;p>我们说过，装饰器其实也是一种函数，所以它自身也是能带参数的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似于&lt;code>func = decorator(arg1,arg2)(func)&lt;/code>。实际执行了两次函数（两个括号）。&lt;/p>
&lt;p>来个实际点的例子吧：
我们手写html的时候需要各种补全（那个用编辑器的当然爽得飞起！）但是，如果是在python中用字符串去表示html标签的时候，就~坑爹了。总不能每个标签我都写一个方法吧&lt;/p>
&lt;p>最方便的方法，写一个带参数的装饰器！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">real_decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">css_class&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; class=&amp;#39;&lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> \
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">kwargs&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">css_class&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">real_decorator&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nd">@makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bold_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nd">@makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;italic_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>b
&lt;span class="ln">2&lt;/span>i
&lt;span class="ln">3&lt;/span>italic_css hello
&lt;span class="ln">4&lt;/span>bold_css wrapped
&lt;span class="ln">5&lt;/span>&amp;lt;b class=&amp;#39;bold_css&amp;#39;&amp;gt;&amp;lt;i class=&amp;#39;italic_css&amp;#39;&amp;gt;hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于几点说明：&lt;/p>
&lt;p>（1）在装饰器makeHtmlTag中，*args代表了参数元组，假如你传入的的参数分别是1，2，3，4，则args=（1，2，3，4）；**kwds则参数字典，返回一个key为参数变量名，value为变量值的字典。这样我们就可以很方便地不用改动函数本身去获取函数传递的参数并进行装饰了&lt;/p>
&lt;p>（2）使用装饰器的时候有个缺陷就是不能在过程中更改某个装饰器的参数值（比如该例子中 hello 的便签就永远是b,i了）&lt;/p>
&lt;p>如果你觉得这样写太！麻！烦！了！什！么！鬼！&lt;/p>
&lt;p>为什么我要在函数体中再定义一个函数体！！！！&lt;/p>
&lt;p>难道还要我一层层剥开你的心吗？&lt;/p>
&lt;h3 id="用类的方式去写一个装饰器">用类的方式去写一个装饰器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tag&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_css_class&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; class=&amp;#39;&lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">css_class&lt;/span>&lt;span class="p">)&lt;/span> \
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">css_class&lt;/span> &lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__call__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_css_class&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span> \
&lt;span class="ln">11&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nd">@makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bold_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nd">@makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;italic_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hao Chen&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于说明：&lt;/p>
&lt;ol>
&lt;li>我们将整个类作为一个装饰器，工作流程：
&lt;ol>
&lt;li>通过__init__（）方法初始化类&lt;/li>
&lt;li>通过__call__（）方法调用真正的装饰方法&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>当装饰器有参数的时候，init() 成员就不能传入fn了，而fn是在call的时候传入的。（fn代表要装饰的函数）&lt;/li>
&lt;/ol></description></item><item><title>python-子类如何调用父类的__init__方法</title><link>https://surprisedcat.github.io/projectnotes/python-%E5%AD%90%E7%B1%BB%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84__init__%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E5%AD%90%E7%B1%BB%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84__init__%E6%96%B9%E6%B3%95/</guid><description>
&lt;h2 id="转载python子类如何调用父类的__init__方法---omit-in-toc---">转载：python子类如何调用父类的__init__方法&lt;!-- omit in toc -->&lt;/h2>
&lt;p>版权声明：本文为CSDN博主「liuchunming033」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/liuchunming033/article/details/48498061">https://blog.csdn.net/liuchunming033/article/details/48498061&lt;/a>&lt;/p>
&lt;p>Python&lt;strong>不会自动调用父类的constructor&lt;/strong>，你得亲自专门调用它。&lt;/p>
&lt;p>有两种常用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">父类名&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">参数&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#注意名字是父类 &lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">子类名&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">参数&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#注意名字是子类，而且init后是self之外的参数&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一种方法，这种初始化的方式书写上比较简单，也比较容易阅读，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># coding=utf-8&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;jim&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Programmer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;Dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Programmer&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="n">coder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Programmer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该例子中，Programmer实例初始化的时候调用父类的__init__方法对flag属性进行初始化，初始化之后的属性值是False。注意，调用父类__init__方法的时候，传递的参数数量要与父类中的__init__保持一致。&lt;/p>
&lt;p>程序运行结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">Person&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Programmer&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">False&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">True&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">dotjar&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：运行的时候如果你的环境里有多个python解释器，一定要选对解释器了，否则有的时候可能会出错。运行程序的时候，最后打个断点debug一下，看看程序运行的步骤。&lt;/p>
&lt;p>第二种方法，举个栗子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># coding=utf-8&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;jim&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Programmer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Dotjar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">19&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Programmer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Programmer&amp;#39;s age:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">coder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Programmer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子对第一个例子进行了修改，首先父类中的__init__方法带有2个初始化属性，flag和name。子类的__init__方法比父类的__init__方法多了一个age属性，这个age属性只能在子类的__init__方法中初始化（因为父类中没有嘛，调用父类的__init__只能初始化父类和子类共有的属性）。
程序的输出是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">Person&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Programmer&lt;/span>&lt;span class="s1">&amp;#39;s age: 19&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">True&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">False&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">dotjar&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python-pylint无法载入动态库成员方法的处理</title><link>https://surprisedcat.github.io/projectnotes/python-pylint%E6%97%A0%E6%B3%95%E8%BD%BD%E5%85%A5%E5%8A%A8%E6%80%81%E5%BA%93%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%84%E7%90%86/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-pylint%E6%97%A0%E6%B3%95%E8%BD%BD%E5%85%A5%E5%8A%A8%E6%80%81%E5%BA%93%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%84%E7%90%86/</guid><description>
&lt;h2 id="pylint无法载入第三方库成员方法处理以cv2为例---omit-in-toc---">Pylint无法载入第三方库成员方法处理，以cv2为例&lt;!-- omit in toc -->&lt;/h2>
&lt;p>You can generate a pylint config file in the root of your project with this command: (I find this to be helpful if you work in a team or on different computers from the same repo)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>pylint --generate-rcfile &amp;gt; .pylintrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the beginning of the generated .pylintrc file you will see&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># A comma-separated list of package or module names from where C extensions may&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># be loaded. Extensions are loading into the active Python interpreter and may&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># run arbitrary code.&lt;/span>
&lt;span class="ln">4&lt;/span>extension-pkg-whitelist&lt;span class="o">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add cv2 so you end up with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># A comma-separated list of package or module names from where C extensions may&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># be loaded. Extensions are loading into the active Python interpreter and may&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># run arbitrary code.&lt;/span>
&lt;span class="ln">4&lt;/span>extension-pkg-whitelist&lt;span class="o">=&lt;/span>cv2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save the file. The lint errors should disappear.&lt;/p></description></item><item><title>python-numpy随机种子</title><link>https://surprisedcat.github.io/projectnotes/python-numpy%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-numpy%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90/</guid><description>
&lt;h2 id="numpy-随机种子---omit-in-toc---">numpy 随机种子&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="numpyrandomseed的使用">&lt;code>numpy.random.seed()&lt;/code>的使用&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>seed( )&lt;/code> 用于指定随机数生成时所用算法开始的整数值，如果使用相同的&lt;code>seed( )值&lt;/code>，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同。&lt;/p>
&lt;/blockquote>
&lt;p>需要指出的是，&lt;code>numpy.random.seed()&lt;/code>是&lt;strong>一次有效&lt;/strong>的。也就是说，&lt;code>numpy.random.seed()&lt;/code>设置了之后只对后面最近的random随机数有效，举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 第一个for循环&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第一个for循环&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----------------&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># 第二个for循环&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第二个for循环&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>第一个for循环
&lt;span class="ln"> 2&lt;/span>0.417022004702574
&lt;span class="ln"> 3&lt;/span>0.7203244934421581
&lt;span class="ln"> 4&lt;/span>0.00011437481734488664
&lt;span class="ln"> 5&lt;/span>0.30233257263183977
&lt;span class="ln"> 6&lt;/span>0.14675589081711304
&lt;span class="ln"> 7&lt;/span>-----------------
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>第二个for循环
&lt;span class="ln">10&lt;/span>0.417022004702574
&lt;span class="ln">11&lt;/span>0.417022004702574
&lt;span class="ln">12&lt;/span>0.417022004702574
&lt;span class="ln">13&lt;/span>0.417022004702574
&lt;span class="ln">14&lt;/span>0.417022004702574
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个&lt;code>for&lt;/code>循环中，只设置了一次&lt;code>seed&lt;/code>，所以之后的随机值都是不一样的。而第二个&lt;code>for&lt;/code>循环中，每次都设置了&lt;code>seed&lt;/code>才得到一样的值。仔细看，可以发现第一个&lt;code>for&lt;/code>循环里第一个随机值和第二个&lt;code>for&lt;/code>循环里的值也是一样的，都是以&lt;code>seed(5)&lt;/code>为种子生成的随机值。&lt;/p>
&lt;h2 id="numpyrandomrandomstate使用">&lt;code>numpy.random.RandomState()&lt;/code>使用&lt;/h2>
&lt;p>&lt;code>numpy.random.RandomState()&lt;/code>是一个伪随机数生成器。和&lt;code>seed()&lt;/code>一样&lt;strong>也是一次有效的&lt;/strong>，但是它指定了一个state变量，只有在这个state变量下，才会使用&lt;code>RandomState()&lt;/code>的种子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 设置随机种子&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">rng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RandomState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 没有使用rng变量&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 使用rng变量&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">rng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RandomState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>0.00011437481734488664
&lt;span class="ln">2&lt;/span>0.22199317108973948
&lt;span class="ln">3&lt;/span>0.22199317108973948
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子看出，虽然距离&lt;code>RandomState(5)&lt;/code>最近的是&lt;code>np.random.rand()&lt;/code>，但是没有使用&lt;code>RandomState(5)&lt;/code>的种子。&lt;/p></description></item><item><title>python-None的判断</title><link>https://surprisedcat.github.io/projectnotes/python-none%E7%9A%84%E5%88%A4%E6%96%AD/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-none%E7%9A%84%E5%88%A4%E6%96%AD/</guid><description>
&lt;h2 id="python中进行none判断时为什么用is而不是---omit-in-toc---">Python中进行&lt;code>None&lt;/code>判断时，为什么用&lt;code>is&lt;/code>而不是==&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="is和none区别在哪里">&lt;code>is&lt;/code>和&lt;code>None&lt;/code>区别在哪里&lt;/h2>
&lt;ul>
&lt;li>&lt;code>is&lt;/code> 比较的是对象标识符，用来检查对象的标识符是否一致，即两个对象在内存中的地址是否一致。在使用&lt;code>a is b&lt;/code>的时候，相当于是做&lt;code>id(a)==id(b)&lt;/code>判断。&lt;/li>
&lt;li>&lt;code>==&lt;/code> 比较两个对象的值是否相等，相当于调用&lt;code>__eq__()&lt;/code>方法，即&lt;code>a==b&lt;/code>等同于&lt;code>a.__eq__(b)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="进行none判断时为什么用is">进行&lt;code>None&lt;/code>判断时，为什么用&lt;code>is&lt;/code>&lt;/h2>
&lt;p>这在&lt;code>PEP8&lt;/code>中有所规定:&lt;/p>
&lt;blockquote>
&lt;p>&amp;quot;Comparisons to singletons like None should always be done with 'is' or 'is not', never the equality operators.&amp;quot; --- From PEP8&lt;/p>
&lt;/blockquote>
&lt;p>如上所述&lt;code>None&lt;/code>在Python里是个&lt;strong>单例对象&lt;/strong>，一个变量如果是&lt;code>None&lt;/code>，它一定和&lt;code>None&lt;/code>指向同一个内存地址。&lt;code>None&lt;/code>是python中的一个特殊的常量，表示一个空的对象。空值是Python中的一个特殊值，&lt;strong>数据为空并不代表是空对象&lt;/strong>，例如&lt;code>[]，''，()，{}&lt;/code>等都不是&lt;code>None&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">([]&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>None&lt;/code>和任何对象比较返回值都是&lt;code>False&lt;/code>，除了自己。&lt;code>==None&lt;/code>背后调用&lt;code>的__eq__()&lt;/code>，而&lt;code>__eq__()&lt;/code>可以被重载，e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">test&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__eq__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然很多时候用&lt;code>==None&lt;/code>会得到我们内心想要的结果，但是如果一个对象的&lt;code>__eq__()&lt;/code>方法被重载，&lt;code>==&lt;/code>操作可能会影响结果的判断。对了，像PyCharm这样的IDE一般会提示&lt;code>==None&lt;/code>不符合&lt;code>PEP8&lt;/code>规范，不知大家注意过没有。&lt;/p>
&lt;p>另外从代码执行效率上来看，&lt;strong>&lt;code>is&lt;/code> is a LOT faster than &lt;code>==&lt;/code>&lt;/strong>。&lt;/p></description></item><item><title>python-is与==区别</title><link>https://surprisedcat.github.io/projectnotes/python-is%E4%B8%8E%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-is%E4%B8%8E%E5%8C%BA%E5%88%AB/</guid><description>
&lt;h2 id="python中is与的区别---omit-in-toc---">Python中is与==的区别&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：id(身份标识)、python type()(数据类型)和value(值)。is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。下面来看看具体区别在哪。&lt;/p>
&lt;p>==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等，例如下面两个字符串间的比较：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;iplaypython.com&amp;#39;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;iplaypython.com&amp;#39;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。通过对下面几个列表间的比较，你就会明白is同一性运算符的工作原理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">z&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">z&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">3075326572&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="mi">3075326572&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="mi">3075328140&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前三个例子都是True，这什么最后一个是False呢？x、y和z的值是相同的，所以前两个是True没有问题。至于最后一个为什么是False，看看三个对象的id分别是什么就会明白了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>==比较操作符：用来比较两个对象是否相等，&lt;strong>value&lt;/strong>做为判断因素；
is同一性运算符：比较判断两个对象是否相同，&lt;strong>id&lt;/strong>做为判断因素。&lt;/p></description></item><item><title>python-for迭代与生成</title><link>https://surprisedcat.github.io/projectnotes/python-for%E8%BF%AD%E4%BB%A3%E4%B8%8E%E7%94%9F%E6%88%90/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-for%E8%BF%AD%E4%BB%A3%E4%B8%8E%E7%94%9F%E6%88%90/</guid><description>
&lt;h2 id="转载为什么for循环可以遍历listpython中迭代器与生成器---omit-in-toc---">转载：为什么for循环可以遍历list：Python中迭代器与生成器&lt;!-- omit in toc -->&lt;/h2>
&lt;blockquote>
&lt;p>作者：奥辰 原文链接：&lt;a href="https://www.cnblogs.com/chenhuabin/p/11288797.html">https://www.cnblogs.com/chenhuabin/p/11288797.html&lt;/a>&lt;/p>
&lt;p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="#1-%E5%BC%95%E8%A8%80">1 引言&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1">2 迭代器与可迭代对象&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#21-%E8%BF%AD%E4%BB%A3%E5%99%A8">2.1 迭代器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#22-%E8%BF%AD%E4%BB%A3%E5%99%A8">2.2 迭代器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#23-for%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%9C%AC%E8%B4%A8">2.3 for循环的本质&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#3-%E7%94%9F%E6%88%90%E5%99%A8">3 生成器&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#31-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8">3.1 迭代器与生成器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#32-%E7%94%9F%E6%88%90%E5%99%A8%E8%A7%A3%E6%9E%90%E5%BC%8F">3.2 生成器解析式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#4-%E6%80%BB%E7%BB%93">4 总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="1-引言">1 引言&lt;/h2>
&lt;p>只要你学了Python语言，就不会不知道for循环，也肯定用for循环来遍历一个列表（list)，那为什么for循环可以遍历list，而不能遍历int类型对象呢？怎么让一个自定义的对象可遍历？&lt;/p>
&lt;p>这篇博客中，我们来一起探索一下这个问题，在这个过程中，我们会介绍到迭代器、可迭代对象、生成器，更进一步的，我们会详细介绍他们的原理、异同。&lt;/p>
&lt;h2 id="2-迭代器与可迭代对象">2 迭代器与可迭代对象&lt;/h2>
&lt;p>在开始下面内容之前，我们先说说标题中的“迭代”一词。什么是迭代？我认为，迭代一个完整过程中的一个重复，或者说每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值，举一个类比来说：一个人类家族的发展是一个完整过程，需要经过数代人的努力，每一代都会以接着上一代的成果继续发展，所以每一代都是迭代。&lt;/p>
&lt;h3 id="21-迭代器">2.1 迭代器&lt;/h3>
&lt;p>（1）怎么判断是否可迭代&lt;/p>
&lt;p>作为一门设计语言，Python提供了许多必要的数据类型，例如基本数据类型&lt;code>int、bool、str&lt;/code>，还有容器类型&lt;code>list、tuple、dict、set&lt;/code>。这些类型当中，有些是可迭代的，有些不可迭代，怎么判断呢？&lt;/p>
&lt;p>在Python中，我们把所有可以迭代的对象统称为可迭代对象，有一个类专门与之对应：&lt;code>Iterable&lt;/code>。所以，要判断一个类是否可迭代，只要判断是否是&lt;code>Iterable&lt;/code>类的实例即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">((),&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，整型、布尔不可迭代，字符串、列表、字典、元组可迭代。&lt;/p>
&lt;p>怎么让一个对象可迭代呢？毕竟，很多时候，我们需要用到的对象不止Python内置的这些数据类型，还有自定义的数据类型。答案就是实现&lt;code>__iter__()&lt;/code>方法，只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A()是可迭代对象吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">Iterable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果输出为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是可迭代对象吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>瞧，我们在&lt;code>__iter__()&lt;/code>方法里面甚至没写任何东西，&lt;strong>反正我们在类A中定义则&lt;code>__iter__()&lt;/code>方法，那么，它就是一个可迭代对象&lt;/strong>。&lt;/p>
&lt;p>重要的事情说3遍：&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;h3 id="22-迭代器">2.2 迭代器&lt;/h3>
&lt;p>迭代器是对可迭代对象的改造升级，上面说过，一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象，进一步地，&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>来，跟我读三遍：&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>在Python中，也有一个类与迭代器对应：&lt;code>Iterator&lt;/code>。所以，要判断一个类是否是迭代器，只要判断是否是&lt;code>Iterator&lt;/code>类的实例即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B()是可迭代对象吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B()是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是可迭代对象吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可见，&lt;strong>迭代器一定是可迭代对象，但可迭代对象不一定是迭代器&lt;/strong>。&lt;/p>
&lt;p>所以整型、布尔一定不是迭代器，因为他们连可迭代对象都算不上。那么，字符串、列表、字典、元组是迭代器吗？猜猜！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">((),&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>惊不惊喜，意不意外，字符串、列表、字典、元组都不是迭代器。那为什么它们可以在&lt;code>for&lt;/code>循环中遍历呢？而且，我想，看到这里，就算你已经可以在形式上区分可迭代对象和迭代器，但是你可能会问，这有什么卵用吗？确实，没多少卵用，因为我们还不知道&lt;code>__iter__()、__next__()&lt;/code>到底是个什么鬼东西。&lt;/p>
&lt;p>接下来，我们通过继续探究&lt;code>for&lt;/code>循环的本质来解答这些问题。&lt;/p>
&lt;h3 id="23-for循环的本质">2.3 for循环的本质&lt;/h3>
&lt;p>说到&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，就很有必要介绍一下&lt;code>iter()&lt;/code>和&lt;code>next()&lt;/code>方法了。&lt;/p>
&lt;p>（1）&lt;code>iter()&lt;/code>与&lt;code>__iter__()&lt;/code>&lt;/p>
&lt;p>&lt;code>__iter__()&lt;/code>的作用是返回一个迭代器，虽然上面说过，只要实现了&lt;code>__iter__()&lt;/code>方法就是可迭代对象，但是，没有实现功能（返回迭代器）总归是有问题的，就像一个村长，当选之后，那就是村长了，但是如果尸位素餐不做事，那总是有问题的。&lt;/p>
&lt;p>&lt;code>__iter__()&lt;/code>方法毕竟是一个特殊方法，不适合直接调用，所以Python提供了&lt;code>iter()&lt;/code>方法。&lt;code>iter()&lt;/code>是Python提供的一个内置方法，可以不用导入，直接调用即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A类的__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B类的__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对A类对象调用iter()方法前，a是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对A类对象调用iter()方法后，a1是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对B类对象调用iter()方法前，b是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对B类对象调用iter()方法后，b1是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">对A类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法前&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">a是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">A类的__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">对A类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法后&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">a1是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">对B类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法前&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">b是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">B类的__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">对B类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法后&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">b1是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于B类，因为B类本身就是迭代器，所以可以直接返回B类的实例，也就是说&lt;code>self&lt;/code>，当然，你要是返回其他迭代器也没毛病。对于类A，它只是一个可迭代对象，&lt;code>__iter__()&lt;/code>方法&lt;strong>需要返回一个迭代器&lt;/strong>，所以返回了B类的实例，如果返回的不是一个迭代器，调用&lt;code>iter()&lt;/code>方法时就会报以下错误：&lt;em>TypeError: iter() returned non-iterator of type 'A'&lt;/em>
。&lt;/p>
&lt;p>（2）&lt;code>next()&lt;/code>与&lt;code>__next__()&lt;/code>&lt;/p>
&lt;p>&lt;code>__next__()&lt;/code>的作用是返回遍历过程中的下一个元素，如果没有下一个元素则主动抛出&lt;code>StopIteration&lt;/code>异常。而&lt;code>next()&lt;/code>就是Python提供的一个用于调用&lt;code>__next__()&lt;/code>方法的内置方法。&lt;/p>
&lt;p>下面，我们通过&lt;code>next()&lt;/code>方法来遍历一个list：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">list_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#19&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="ne">TypeError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;list&amp;#39;&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="n">iterator&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">list_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#24&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为列表只是可迭代对象，不是迭代器，所以对list_1直接调用&lt;code>next()&lt;/code>方法会产生异常。对list_1调用&lt;code>iter()&lt;/code>后就可以获得是迭代器的list_2，对list_2每一次调用&lt;code>next()&lt;/code>方法都会取出一个元素，当没有下一个元素时继续调用&lt;code>next()&lt;/code>就抛出了&lt;code>StopIteration&lt;/code>异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 2&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lst&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A.__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　&lt;span class="k">return&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 8&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lst&lt;/span>
&lt;span class="ln">10&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">11&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B.__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> 　　&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="ln">14&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">15&lt;/span> 　　&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">16&lt;/span> 　　 &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B.__next__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> 　　 &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">18&lt;/span> 　　 &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">19&lt;/span> 　　 &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="ln">20&lt;/span> 　　 &lt;span class="k">except&lt;/span> &lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">21&lt;/span> 　　 &lt;span class="k">raise&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#78&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__next__&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">list&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="nb">range&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="n">During&lt;/span> &lt;span class="n">handling&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">above&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">another&lt;/span> &lt;span class="n">exception&lt;/span> &lt;span class="n">occurred&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#84&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#78&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__next__&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A类实例化出来的实例a只是可迭代对象，不是迭代器，调用&lt;code>iter()&lt;/code>方法后，返回了一个B类的实例a1，每次对a1调用&lt;code>next()&lt;/code>方法，都用调用B类的&lt;code>__next__()&lt;/code>方法。&lt;/p>
&lt;p>接下来，我们用for循环遍历一下A类实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln"> 2&lt;/span>　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>通过&lt;code>for&lt;/code>循环对一个可迭代对象进行迭代时，&lt;code>for&lt;/code>循环内部机制会自动通过调用&lt;code>iter()&lt;/code>方法执行可迭代对象内部定义的&lt;code>__iter__()&lt;/code>方法来获取一个迭代器，然后一次又一次得迭代过程中通过调用&lt;code>next()&lt;/code>方法执行迭代器内部定义的&lt;code>__next__()&lt;/code>方法获取下一个元素，当没有下一个元素时，&lt;code>for&lt;/code>循环自动捕获并处理&lt;code>StopIteration&lt;/code>异常。如果你还没明白，请看下面用&lt;code>while&lt;/code>循环实现&lt;code>for&lt;/code>循环功能，整个过程、原理都是一样的&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 5&lt;/span>　　　　&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 6&lt;/span>　　　　　　&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>　　　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>　　　　&lt;span class="k">except&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span>　　　　　　&lt;span class="k">break&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1"># 作为一个迭代器，B类对象也可以通过for循环来迭代：&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">21&lt;/span>　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看出来了吗？这就是for循环的本质。&lt;/p>
&lt;h2 id="3-生成器">3 生成器&lt;/h2>
&lt;h3 id="31-迭代器与生成器">3.1 迭代器与生成器&lt;/h3>
&lt;p>如果一个函数体内部使用&lt;code>yield&lt;/code>关键字，这个函数就称为生成器函数，生成器函数调用时产生的对象就是生成器。生成器是一个特殊的迭代器，在调用该生成器函数时，Python会自动在其内部添加&lt;code>__iter__()&lt;/code>方法和&lt;code>__next__()&lt;/code>方法。把生成器传给 &lt;code>next()&lt;/code> 函数时， 生成器函数会向前继续执行， 执行到函数定义体中的下一个&lt;code>yield&lt;/code>语句时， 返回产出的值， 并在函数定义体的当前位置暂停， 下一次通过&lt;code>next()&lt;/code>方法执行生成器时，又从上一次暂停位置继续向下……，最终， 函数内的所有&lt;code>yield&lt;/code>都执行完，如果继续通过&lt;code>yield&lt;/code>调用生成器， 则会抛出&lt;code>StopIteration&lt;/code> 异常——这一点与迭代器协议一致。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">gen&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第1次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第2次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln"> 8&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第3次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="n">gen&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x0000021CE9A39A98&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="n">第1次执行&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">第2次执行&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">第3次执行&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#120&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，生成器的执行机制与迭代器是极其相似的，生成器本就是迭代器，只不过，有些特殊。那么，生成器特殊在哪呢？或者说，有了迭代器，为什么还要用生成器？&lt;/p>
&lt;p>从上面的介绍和代码中可以看出，生成器采用的是一种惰性计算机制，一次调用也只会产生一个值，它不会将所有的值一次性返回给你，你需要一个那就调用一次&lt;code>next()&lt;/code>方法取一个值，&lt;em>这样做的好处是如果元素有很多（数以亿计甚至更多），如果用列表一次性返回所有元素，那么会消耗很大内存，如果我们只是想要对所有元素依次一个一个取出来处理，那么，使用生成器就正好，一次返回一个，并不会占用太大内存&lt;/em>。&lt;/p>
&lt;p>举个例子，假设我们现在要取1亿以内的所有偶数，如果用列表来实现，代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">fun_list&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">temp_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000000&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">temp_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">temp_list&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面程序会先获取所有符合要求的偶数，然后一次性返回。如果你运行了代码，你就会发现两个问题——运行时间很长、消耗很多内存。&lt;/p>
&lt;p>有时候，我们并不一定需要一次性获得所有的对象，需要一个使用一个就可以，这样的话，可以用生成器来实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">fun_gen&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 2&lt;/span> 　　&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 3&lt;/span> 　　&lt;span class="k">while&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000000&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　 &lt;span class="k">if&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　 &lt;span class="k">yield&lt;/span> &lt;span class="n">index&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　 &lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">fun_gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="n">fun_gen&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x00000222DC2F4360&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fun_gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="mi">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看到了吗？对生成器没执行一次&lt;code>next()&lt;/code>方法，就会返回一个元素，这样的话无论在速度上还是机器性能消耗上都会好很多。如果你还没感受到生成器的优势，我再说一个应用场景，假如需要取出远程数据库中的100万条记录进行处理，如果一次性获取所有记录，网络带宽、内存都会有很大消耗，但是如果使用生成器，就可以取一条，就在本地处理一条。&lt;/p>
&lt;p>不过，生成器也有不足，正因为采用了&lt;strong>惰性计算&lt;/strong>，你不会知道下一个元素是什么，更不会知道后面还有多少元素，所以，对于列表、元组等结构，我们能调用&lt;code>len()&lt;/code>方法获知长度，但是对于生成器却不能。&lt;/p>
&lt;p>总结一下迭代器与生成器的异同：&lt;/p>
&lt;ol>
&lt;li>生成器是一种特殊的迭代器，拥有迭代器的所有特性；&lt;/li>
&lt;li>迭代器使用return返回值而生成器使用yield返回值每一次对生成器执行next()都会在yield处暂停；&lt;/li>
&lt;li>迭代器和生成器虽然都执行next()方法时返回下一个元素，迭代器在实例化前就已知所有元素，但是采用惰性计算机制，共有多少元素，下一个元素是什么都是未知的，每一次对生成器对象执行next()方法才会产生下一个元素。&lt;/li>
&lt;/ol>
&lt;h3 id="32-生成器解析式">3.2 生成器解析式&lt;/h3>
&lt;p>使用过列表解析式吗？语法格式为：&lt;code>[返回值 for 元素 in 可迭代对象 if 条件]&lt;/code>&lt;/p>
&lt;p>看下面代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">3&lt;/span> 　　&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">4&lt;/span> 　　&lt;span class="n">li&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以用列表解析式实现同样功能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">list&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>很简单对不对？简洁了很多，返回的li就是一个列表。咳咳……偏题了，我们要说的是生成器解析式，而且我相信打开我这篇博文的同学大多都熟悉列表解析式，回归正题。&lt;/p>
&lt;p>生成器解析式语法格式为：&lt;code>(返回值 for 元素 in 可迭代对象 if 条件)&lt;/code>&lt;/p>
&lt;p>你没看错，跟列表解析式相比，生成器解析式只是把方括号换成了原括号。来感受一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">genexpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x00000222DC2F4468&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#38&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，生成器解析式返回的就是一个生成器对象，换句话说生成器解析式是生成器的一种定义方式，这种方式简单快捷，当然实现的功能不能太复杂。&lt;/p>
&lt;p>我的补充:&lt;code>{返回值 for 元素 in 可迭代对象 if 条件}&lt;/code> 是集合解析式。用法和列表解析式是一样的，就是把中括号 &lt;code>[ ]&lt;/code>换成大括号 &lt;code>{ }&lt;/code>&lt;/p>
&lt;p>需要注意得是，集合解析式，最终生成的也是集合，&lt;strong>集合里面的元素必须是hashable&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>Hashable:一个对象能被称为 hashable ， 它必须有个 hash 值，这个值在整个生命周期都不会变化，而且必须可以进行相等比较，所以一个对象可哈希，它必须实现&lt;code>__hash__()&lt;/code> 与 &lt;code>__eq__()&lt;/code> 方法。&lt;/p>
&lt;p>对于 Python 的内建类型来说，只要是创建之后无法修改的(immutable)类型都是 hashable 如字符串，可变动的都是 unhashable的比如：列表、字典、集合，他们在改变值的同时却没有改变&lt;code>id&lt;/code>,无法由地址定位值的唯一性,因而无法哈希。我们自定义的类的实例对象默认也是可哈希的（hashable），而hash值也就是它们的&lt;code>id()&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-总结">4 总结&lt;/h2>
&lt;p>本文全面总结了Python中可迭代对象、迭代器、生成器知识，我相信，只要你认真消化我这篇博文，就能深刻领悟迭代器生成器。&lt;/p></description></item><item><title>python-axis的方向</title><link>https://surprisedcat.github.io/projectnotes/python-axis%E7%9A%84%E6%96%B9%E5%90%91/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-axis%E7%9A%84%E6%96%B9%E5%90%91/</guid><description>
&lt;h2 id="python中axis的方向numpy-pandas-tensorflow---omit-in-toc---">Python中axis的方向（numpy， pandas， tensorflow）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>版权声明：本文为CSDN博主「fangjian1204」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/fangjian1204/article/details/53055219">https://blog.csdn.net/fangjian1204/article/details/53055219&lt;/a>&lt;/p>
&lt;h2 id="axis的作用即如何理解">axis的作用即如何理解&lt;/h2>
&lt;p>numpy是python进行科学计算必不可少的模块，随着深度学习越来越火，numpy也越来越流行。了解numpy的人知道，在numpy中，有很多的函数都涉及到axis，很多函数根据axis的取值不同，得到的结果也完全不同。可以说，axis让numpy的多维数组变的更加灵活，但也让numpy变得越发难以理解。这里通过详细的例子来学习下，axis到底是什么，它在numpy中的作用到底如何。&lt;/p>
&lt;p>为什么会有axis这个东西，原因很简单：numpy是针对矩阵或者多为数组进行运算的，而在多维数组中，对数据的操作有太多的可能，我们先来看一个例子。比如我们有一个二维数组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个数组代表了样本数据的特征，其中每一行代表一个样本的三个特征，每一列是不同样本的特征。如果在分析样本的过程中需要对每个样本的三个特征求和，该如何处理？简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那如果想求每种特征的最小值，该如何处理？也简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>又如果想得知所有样本所有特征的平均值呢？还是很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="mf">1.6666666666666667&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可以看出，通过不同的axis，numpy会沿着不同的方向进行操作：如果不设置，那么对所有的元素操作；如果axis=0，则沿着纵轴进行操作；axis=1，则沿着横轴进行操作。&lt;/p>
&lt;p>但这只是简单的二位数组，如果是多维的呢？可以总结为一句话：&lt;strong>设axis=i，则numpy沿着第i个下标变化的放下进行操作&lt;/strong>。例如刚刚的例子，可以将表示为：&lt;code>data =[[a00, a01],[a10,a11]]&lt;/code>，所以&lt;code>axis=0&lt;/code>时，沿着第0个下标变化的方向进行操作，也就是&lt;code>a00-&amp;gt;a10, a01-&amp;gt;a11&lt;/code>，也就是纵坐标的方向，&lt;code>axis=1&lt;/code>时也类似。下面我们举一个四维的求sum的例子来验证一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当axis=0时，numpy验证第0维的方向来求和，也就是第一个元素值=a0000+a1000+a2000+a3000=11,第二个元素=a0001+a1001+a2001+a3001=5，同理可得最后的结果如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">7&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">9&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当axis=3时，numpy验证第3维的方向来求和，也就是第一个元素值=a0000+a0001+a0002=5,第二个元素=a0010+a0011+a0012=7，同理可得最后的结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python-Eclipse-pydev-encode</title><link>https://surprisedcat.github.io/projectnotes/python-eclipse-pydev-encode/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-eclipse-pydev-encode/</guid><description>
&lt;h2 id="转载eclipsepydev解决中文显示和注释问题的方法大全---omit-in-toc---">转载：Eclipse+pydev解决中文显示和注释问题的方法大全&lt;!-- omit in toc -->&lt;/h2>
&lt;p>原文地址：&lt;a href="http://blog.sina.com.cn/s/blog_779eecd801011j7x.html">http://blog.sina.com.cn/s/blog_779eecd801011j7x.html&lt;/a> 作者：海木棉枫&lt;/p>
&lt;h2 id="eclipse的设置">Eclipse的设置&lt;/h2>
&lt;p>window-&amp;gt;preferences-&amp;gt;general-&amp;gt;editors-&amp;gt;text editors-&amp;gt;spelling-&amp;gt;encoding-&amp;gt;UTF-8，编辑器的编码格式&lt;/p>
&lt;p>window-&amp;gt;preferences-&amp;gt;workspace-&amp;gt;text file encoding-&amp;gt;UTF-8&lt;/p>
&lt;p>打开eclipse安装目录-&amp;gt;eclipse.ini，末行加上”-Dfile.encoding=UTF-8”&lt;/p>
&lt;h2 id="文件编码">文件编码&lt;/h2>
&lt;p>py文件记得保存成UTF-8，文件首行加上”#coding=utf-8” ，这一句话可控制代码中可输入中文字符&lt;/p>
&lt;h2 id="run时设置">run时设置&lt;/h2>
&lt;p>run--&amp;gt;run configurations-&amp;gt;python run-&amp;gt;Common-&amp;gt; Encoding -&amp;gt;UTF-8.这个应该是运行时的可解决中文乱码问题。&lt;/p>
&lt;p>更改空白模块默认显示# -&lt;em>- coding: utf-8 -&lt;/em>-&lt;/p>
&lt;p>如果想每次新建一个空模块时自动添加”# -&lt;em>- coding: utf-8 -&lt;/em>-” 这样的一句话，可以通过window--Preferences--Pydev--Editor--Template--Empty，然后点击“Edit”按钮，把我们要添加的语句加进去就可以了，将事先默认的语句去掉，改写为：# -&lt;em>- coding: utf-8 -&lt;/em>- 这样的一句话,然后你再新建一个空白模块，再也不需要每次都要复制那个编码语句了。&lt;/p>
&lt;p>当在建立的python项目时，输入的中文太细，可以通过
Window &amp;gt; Preferences&amp;gt;General&amp;gt;Appearance&amp;gt;Color and Fonts中的第一个来设置，Basic里面的TextFonts设置大小即可。&lt;/p></description></item></channel></rss>
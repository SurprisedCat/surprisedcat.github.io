<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on SurprisedCat</title><link>https://surprisedcat.github.io/tags/javascript/</link><description>Recent content in javascript on SurprisedCat</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020–2021, SurprisedCat; all rights reserved.</copyright><lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://surprisedcat.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>javascript-Chrome扩展实例（三）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%89/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%89/</guid><description>
&lt;h2 id="chrome扩展实例三---omit-in-toc---">Chrome扩展实例（三）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>前面的教程中，我们已经阐述了Chrome扩展开发的整体框架和主干内容，经历了扩展开发的大致流程。Chrome以&lt;code>manifest.json&lt;/code>为组织框架，Chrome API为轴心，service worker为协调者，通过Content scripts的三种注入模式来更改网页内容，再辅以&lt;code>popup&lt;/code>，&lt;code>options&lt;/code>来增强操作，能够实现丰富的用户定制化功能。此外，我们之前还介绍了权限、上下文、快捷键等概念，通过这些知识，如果已经有了一定javascript/CSS基础，那么开发常用的插件大多不成问题。&lt;/p>
&lt;p>这篇文章将会介绍三个更深入一些的概念，不一定在开发过程中会用到，但是能提升Chrome扩展的可用性和丰富其功能性。它们分别是：&lt;/p>
&lt;ul>
&lt;li>Web可访问资源(Web Accessible Resources)&lt;/li>
&lt;li>消息传递(Message passing)&lt;/li>
&lt;li>丰富的通知API(Rich notifications API)&lt;/li>
&lt;/ul>
&lt;p>为了完整性，本文还将补充匹配模式(match pattern)的内容。如果在阅读过程中遇到匹配模式不懂的内容，也可以优先阅读匹配模式(match pattern)的章节。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#web%E5%8F%AF%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90web-accessible-resourceswar">Web可访问资源(Web Accessible Resources，WAR)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E8%B5%84%E6%BA%90%E5%8F%AF%E7%94%A8%E6%80%A7%E5%B1%95%E7%A4%BA">实例：资源可用性展示&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%8D%E8%B0%88content-script%E4%B8%8E%E7%BD%91%E9%A1%B5%E4%B8%8A%E4%B8%8B%E6%96%87">再谈content script与网页上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92message-passing">消息传递(Message passing)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93">消息传递方式总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%B8%B0%E5%AF%8C%E7%9A%84%E9%80%9A%E7%9F%A5apirich-notifications-api">丰富的通知API(Rich notifications API)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E6%8C%89%E6%97%B6%E5%96%9D%E6%B0%B4">实例：按时喝水&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8Fmatch-pattern">匹配模式(match pattern)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8C%E6%88%90%E5%AE%9E%E4%BE%8B%E5%A4%8D%E7%8E%B0">完成实例复现&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="web可访问资源web-accessible-resourceswar">Web可访问资源(Web Accessible Resources，WAR)&lt;/h2>
&lt;p>在阐述tab页面和扩展时，我们已经知道它们分属于不同的上下文，即有独立的运行环境。扩展的代码正常情况下只可以使用扩展自身的资源（如函数、CSS文件、图片、javascript文件）等等，无法访问网页的DOM及JS，同时网页在开发时也是意识不到Chrome扩展存在的，因此无法访问Chrome扩展的资源。&lt;/p>
&lt;p>为了打破这种界限，扩展使用了Inject scripts技术，使用三种模式进行内容注入，从而使得扩展的content script能够操作网页的DOM元素。需要指出的是扩展的content script无论使用静态声明注入、动态声明注入还是以编程方式注入，都只是获得了网页DOM元素的操作权，本质上Chrome的content script脚本和网页的JavaScript脚本还是处在两个独立的空间，没有互操作性，同时网页的DOM元素依然无法使用扩展内的资源。&lt;/p>
&lt;p>如果我们希望网页的DOM元素直接使用扩展的资源（比如图片、视频、CSS样式表甚至javascript文件），有什么方法呢？这就需要设置&lt;strong>Web可访问资源(Web Accessible Resources, WAR)&lt;/strong>。&lt;/p>
&lt;p>Web可访问的资源是Chrome扩展中的文件，可由Web页面或其他Chrome扩展访问。扩展程序通常使用此功能来显示需要在网页中加载的图像或其他资源，扩展包中任何文件都可以设置成Web访问的。&lt;/p>
&lt;p>默认情况下，扩展中的任何资源都不是Web可访问的，只有扩展本身的页面或Script脚本能够访问这些内容。如果希望扩展以外的Web页面或脚本能够使用扩展中的资源，需要使用&lt;code>manifest.json&lt;/code>中的&lt;code>web_accessible_resources&lt;/code>字段来配置，格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="s2">&amp;#34;web_accessible_resources&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;images/file1.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;css/file2.css&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>&lt;span class="c1">//&amp;lt;all_urls&amp;gt;
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//&amp;#34;extension_ids&amp;#34;: [&amp;#34;chrome-extension://EXTENSION_ID/&amp;#34;],
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//&amp;#34;use_dynamic_url&amp;#34;: true
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>resources&lt;/code>表示需要暴露给外界的资源文件名称；&lt;code>matches&lt;/code>表示匹配的URL，使用match pattern，只有匹配成功的url才能使用暴露出来的资源，也可以使用&lt;code>extension_ids&lt;/code>来匹配其他Chrome扩展。&lt;code>matches&lt;/code>和&lt;code>extension_ids&lt;/code>二者必有一个。&lt;code>use_dynamic_url&lt;/code>，可选项，它为真时，只允许使用动态ID来访问Web可用资源，每个session都会的自己生成动态ID。&lt;/p>
&lt;p>之后，外部Web页面可以通过三种方式访问。一是外部Web页面通过&lt;code>chrome-extension://extension-id/FILE_PATH&lt;/code>直接访问；二是当使用content script时，content script中可以使用Chrome API &lt;code>chrome.runtime.getURL(FILE_PATH)&lt;/code>来访问。&lt;code>chrome.runtime.getURL&lt;/code>将根据自身来自哪个扩展生成extension ID。三是可以使用&lt;code>@@extension_id&lt;/code>来替代javascript中&lt;code>chrome.runtime.getURL&lt;/code>生成extension ID的效果（用法&lt;code>chrome.i18n.getMessage(&amp;quot;@@extension_id&amp;quot;)&lt;/code>），也可以在CSS文件中使用（用法&lt;code>__MSG_@@extension_id__&lt;/code>），注意&lt;code>__MSG_@@extension_id__&lt;/code>用在html的内联css中貌似不生效，只在Web可访问文件的独立CSS/JS文件中生效，可能是因为Chrome扩展觉得Html网页的内容不归它管吧，只有从它这里取出去的文件才会做&lt;code>__MSG_@@extension_id__&lt;/code>的转换。&lt;/p>
&lt;h3 id="实例资源可用性展示">实例：资源可用性展示&lt;/h3>
&lt;p>下面我们通过下面例子中4个图片的可访问性来展示Web可访问资源的用法与性质。为了方便，我们先将该扩展的文件结构展示如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>web_accessible_resources
&lt;span class="ln"> 2&lt;/span> ├─ manifest.json
&lt;span class="ln"> 3&lt;/span> ├─ options.html
&lt;span class="ln"> 4&lt;/span> ├─ assets
&lt;span class="ln"> 5&lt;/span> │ └─ test.css
&lt;span class="ln"> 6&lt;/span> ├─ images
&lt;span class="ln"> 7&lt;/span> │ ├─ icon-128.png
&lt;span class="ln"> 8&lt;/span> │ ├─ test1.png
&lt;span class="ln"> 9&lt;/span> │ ├─ test2.png
&lt;span class="ln">10&lt;/span> │ ├─ test3.png
&lt;span class="ln">11&lt;/span> │ └─ test4.png
&lt;span class="ln">12&lt;/span> └─ js
&lt;span class="ln">13&lt;/span> ├─ content.js
&lt;span class="ln">14&lt;/span> └─ web_access_resources.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>test1.png&lt;/code>-&lt;code>test4.png&lt;/code>是四张标有数字的图片。另外，示例的Demo网页网站为：&lt;a href="https://surprisedcat.github.io/%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/DemoAndTest/javascript_chrome_extension_web_accessible_resources.html">https://surprisedcat.github.io/%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/DemoAndTest/javascript_chrome_extension_web_accessible_resources.html&lt;/a>。该网页相关的结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>DemoAndTest
&lt;span class="ln">2&lt;/span> ├─ javascript_chrome_extension_web_accessible_resources.html
&lt;span class="ln">3&lt;/span> └─ js
&lt;span class="ln">4&lt;/span> └─ web_access_resources.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了便于对比，我们将扩展的&lt;code>option.html&lt;/code>设置的与Demo网页&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>几乎一样（包括&lt;code>web_access_resources.js&lt;/code>也一样），除了content script的js内容用了不同引入方式。因为扩展内部的&lt;code>option.html&lt;/code>是无法使用content script，因此，我们直接用&lt;code>&amp;lt;script src=&amp;quot;js/content.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code>引入，&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>中则是使用扩展静态声明注入。&lt;/p>
&lt;p>首先，我们查看&lt;code>manifest.json&lt;/code>来大体了解下这个扩展：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Web Accessible Resources Demo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;options_page&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;options.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;all_frames&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;js/content.js&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;web_accessible_resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;images/test1.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;images/test2.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;images/test3.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;assets/test.css&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，和Web可访问资源相关的就是&lt;code>web_accessible_resources&lt;/code>，设置了4个&lt;code>https://surprisedcat.github.io&lt;/code>这个域名下访问的的资源，前三个是图片1，2，3，最后一个是一个CSS文件，它调用了图片&lt;code>test3.png&lt;/code>作为背景图片。&lt;code>test4.png&lt;/code>没有被作为Web可访问资源，在扩展的&lt;code>options.html&lt;/code>可以访问，而外部页面无法访问，后面我们将展示这个例子。此外，&lt;code>manifest.json&lt;/code>还使用静态声明注入了&lt;code>js/content.js&lt;/code>。&lt;/p>
&lt;p>下面我们看看&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>的源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;IE=edge&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">test3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">border-style&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web accessible resources&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web可用资源示例&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>本页面位于外部网站&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web页面直接使用Extension ID加载：text1.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Extension ID:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;extension_id_input&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;testButton&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;确定&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test1&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;header2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Content script加载：text2.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test2&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;header3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>CSS作为背景加载：text3.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>一个不在web accessible resources中的文件：text4.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test4&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/web_access_resources.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>总结来说，就是放了四个框框，每个框框里希望引入一个图片。直观效果如下：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_web_accessible_resources_demo.png" alt="chrome_extension_web_accessible_resources_demo">&lt;/p>
&lt;p>第一个&lt;code>&amp;lt;img id=&amp;quot;test1&amp;quot; height=&amp;quot;100&amp;quot; width=&amp;quot;100&amp;quot;&amp;gt;&lt;/code>和第四个&lt;code>&amp;lt;img id=&amp;quot;test4&amp;quot; height=&amp;quot;100&amp;quot; width=&amp;quot;100&amp;quot;&amp;gt;&lt;/code>都是通过js脚本修改其&lt;code>src&lt;/code>属性来更新图片的。js脚本内容在&lt;code>js/web_access_resources.js&lt;/code>文件中，内容如下；&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//为“testButton”按钮增加监听事件
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;testButton&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">setExtensionID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1">//点击按钮，将输入框中的extension id值赋值给第一、四个&amp;lt;img&amp;gt;标签的src属性。
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setExtensionID&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">input_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;extension_id_input&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test1&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">input_id&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/images/test1.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test4&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">input_id&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/images/test4.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为在Web页面的Html中，Chrome扩展无法使用&lt;code>@@extension_id&lt;/code>或&lt;code>chrome.runtime.getURL()&lt;/code>，所以Html页面若要使用Web可访问资源，只能使用最原始的&lt;code>chrome-extension://extension_id/File_path&lt;/code>的方式。我们可以通过&lt;code>chrome://extensions/&lt;/code>页面找到扩展的ID（Demo中ID为&lt;code>ioianjljdbholheahfhjidofmjpgnfho&lt;/code>，载入后每个用户可能不同）。如果我们已经载入了扩展，就能看到&lt;code>test1.png&lt;/code>已经被载入了，而&lt;code>test4.png&lt;/code>无法访问，并且报错&lt;/p>
&lt;blockquote>
&lt;p>Denying load of chrome-extension://ioianjljdbholheahfhjidofmjpgnfho/images/test4.png. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.&lt;/p>
&lt;/blockquote>
&lt;p>这是因为我们并没有把&lt;code>test4.png&lt;/code>作为Web可访问资源，因此外界无法访问。但是，如果我们打开扩展的选项页&lt;code>options.html&lt;/code>，执行同样的操作，&lt;code>test4.png&lt;/code>是能显示出来的。这是因为&lt;code>options.html&lt;/code>是扩展内的Web页面，可直接访问到扩展内部的所有资源，无需&lt;code>web_accessible_resources&lt;/code>字段。二者区别如下：（图左外部页面，图右扩展&lt;code>options.html&lt;/code>页面。）&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_web_accessible_resources_demo2.png" alt="chrome_extension_web_accessible_resources_demo2.png">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 在实际使用Web可访问资源的时候，遇到一个坑。我刚开始开发Chrome扩展的时候，使用Web Accessible Resources的资源文件是一个名叫&lt;code>test image.jpeg&lt;/code>的图片，这个文件名中间有个空格，当时运行扩展的时候，就是找不到这个图片资源，报找不到资源的错误。后来发现，在js编码的时候，把空格编码成了“%20”，也就是&lt;code>test%20image.jpeg&lt;/code>，因此在&lt;code>manifest.json&lt;/code>中&amp;quot;web_accessible_resources&amp;quot;设置资源名称时应该将空格改成“%20”，这样才能正常加载图片。不过为了少出错误，文件名中最好还是不要有空格等特殊字符吧。&lt;/p>
&lt;/blockquote>
&lt;p>有细心的读者会发现，上面对比的页面的图片与原始Web页面相比，中间两个标题后面多出了两个按钮：“载入图片”和“载入CSS”。这是我们载入扩展后，静态声明注入的&lt;code>js/content.js&lt;/code>文件中添加的DOM元素，其代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//content.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//在标题后添加按钮元素，点击后添加图片src
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">loadButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;载入图片&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleLoadImage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;header2&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">//使用chrome.runtime.getURL生成带扩展ID的URL
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">handleLoadImage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">strtest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;images/test2.png&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">strtest&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">//在标题后添加按钮元素，点击后添加link元素链接外部CSS
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">loadCSS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;载入CSS&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleLoadCSS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;header3&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c1">//使用chrome.i18n.getMessage(&amp;#34;@@extension_id&amp;#34;)生成带扩展ID的URL
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">handleLoadCSS&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementsByTagName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;head&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">link&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;link&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;text/css&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;stylesheet&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">i18n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@@extension_id&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/assets/test.css&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">link&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js代码的关键就是如何生成带extension id的URL，我们分别通过两种方式实现，一是调用&lt;code>chrome.runtime.getURL&lt;/code>接口，二是调用&lt;code>chrome.i18n.getMessage(&amp;quot;@@extension_id&amp;quot;)&lt;/code>这两种都能获得extension id。当在CSS文件中无法使用Chrome API获得extension id时，Chrome的开发人员还为我们提供了&lt;code>__MSG_@@extension_id__&lt;/code>让Web可访问的CSS资源能够动态生成ID。我们在网页中引入Web可访问的CSS样式表&lt;code>test.css&lt;/code>中就是用了&lt;code>__MSG_@@extension_id__&lt;/code>作为第三个方框的背景图：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="ln">1&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">test3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;chrome-extension://__MSG_@@extension_id__/images/test3.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们就能够载入所有Web可访问资源了：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_web_accessible_resources_demo3.png" alt="chrome_extension_web_accessible_resources_demo3.png">&lt;/p>
&lt;h3 id="再谈content-script与网页上下文">再谈content script与网页上下文&lt;/h3>
&lt;p>前面我们已经知道页面的js和扩展content script注入的js运行在两个不同的上下文中。只有同一个上下文中的js是具有互操作性的。比如，同一个网页中无论是内联js还是外部链接引入的js，他们可以共享全局变量、函数等（但是要注意载入顺序，否则会出现前面的js引用后面还未载入的js内容而导致的引用为null的错误）。&lt;/p>
&lt;p>虽然页面的js和扩展content script注入的js二者的运行上下文是隔离的，但是它们都可以操作页面DOM，这也是content script的特殊之处。&lt;/p>
&lt;p>但是在Web可访问资源的场景下，还有一种特殊的javacript文件，它本身属于Chrome扩展，但是通过&lt;code>manifest.json&lt;/code>中的Web可访问资源配置项暴露给了外面的网站，从而被外面网站所引用，这种特殊的js脚本可以叫做injected scripts through web accessible resources。其实，我们可以将这类js简单地理解成当前Web页面引入了一个跨域的js文件，并在Web页面的上下文中运行，因此injected scripts through web accessible resources与页面其他的js本质是一样的，此不过来源比较特殊，是从扩展引入的。因此，injected scripts through web accessible resources的运行上下文就是Web页面的上下文，可以操作DOM，也可以与页面本身的JS互操作。同时，这类JS也和Chrome扩展的上下文没有了关系，因此无法使用任何Chrome API。&lt;/p>
&lt;p>而扩展本身的js如&lt;code>background.js&lt;/code>、&lt;code>popup.js&lt;/code>等，他们完全与Web页面的js上下文隔离开，只能通过Chrome API、content script间接访问页面的DOM元素。（&lt;code>devtools&lt;/code>的js例外，正常也用不到）&lt;/p>
&lt;p>Javascript可访问性总结如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">JS种类&lt;/th>
&lt;th style="text-align:center">可访问的Chrome API&lt;/th>
&lt;th style="text-align:center">DOM访问情况&lt;/th>
&lt;th style="text-align:center">页面JS访问情况&lt;/th>
&lt;th style="text-align:center">附：调试方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">injected scripts through web accessible resources&lt;/td>
&lt;td style="text-align:center">和普通JS无任何差别，不能访问任何扩展API&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">开发者工具-控制台（和页面JS一样）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">content scripts&lt;/td>
&lt;td style="text-align:center">只能访问 storage、i18n、runtime等部分API&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">开发者工具-控制台-javascript上下文-切换为对应扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">popup js&lt;/td>
&lt;td style="text-align:center">可访问绝大部分API，除了devtools系列&lt;/td>
&lt;td style="text-align:center">不可直接访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">扩展按钮-右键-审查元素-DevTools&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">background js&lt;/td>
&lt;td style="text-align:center">可访问绝大部分API，除了devtools系列&lt;/td>
&lt;td style="text-align:center">不可直接访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">扩展管理页面-查看视图-DevTools&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">devtools js&lt;/td>
&lt;td style="text-align:center">只能访问 devtools、runtime等部分API&lt;/td>
&lt;td style="text-align:center">可以&lt;/td>
&lt;td style="text-align:center">可以&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="消息传递message-passing">消息传递(Message passing)&lt;/h2>
&lt;p>Chrome扩展不同组件的消息传递模式不同。（Todo）&lt;/p>
&lt;h3 id="消息传递方式总结">消息传递方式总结&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center"> &lt;/th>
&lt;th style="text-align:center">js in Web page (including web accessible resources)&lt;/th>
&lt;th style="text-align:center">content-script&lt;/th>
&lt;th style="text-align:center">popup-js background-js&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">js in Web page (including web accessible resources)&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">window.postMessage&lt;/td>
&lt;td style="text-align:center">externally_connectable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">content-script&lt;/td>
&lt;td style="text-align:center">window.postMessage&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">chrome.runtime.sendMessage chrome.runtime.connect&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">popup-js background-js&lt;/td>
&lt;td style="text-align:center">externally_connectable&lt;/td>
&lt;td style="text-align:center">chrome.tabs.sendMessage chrome.tabs.connect&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="丰富的通知apirich-notifications-api">丰富的通知API(Rich notifications API)&lt;/h2>
&lt;p>Chrome扩展可以通过丰富的通知API和模板给用户推送系统通知。Chrome的通知有四类：&lt;/p>
&lt;ol>
&lt;li>基本通知&lt;/li>
&lt;li>带图片的通知&lt;/li>
&lt;li>列表通知&lt;/li>
&lt;li>进度条通知&lt;/li>
&lt;/ol>
&lt;p>所有种类的通知都包含一个标题、消息、一个小图标以及一个消息摘要。不过需要注意的是不同系统之间的消息接口可能不一样（比如MacOS的消息模式就不同）。需要指出，通知API需要在&lt;code>manifest.json&lt;/code>中授予&lt;code>notifications&lt;/code>权限。&lt;/p>
&lt;p>Chrome扩展的通知主要使用&lt;code>chrome.nitification&lt;/code>接口，典型的创建通知的方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">creationCallback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>options&lt;/code>是一个消息类型模板，依照上面提到的四种类型设置。四种模板使用如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//基本通知模板，这四项是必需的
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;basic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是basic
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//带图片通知模板
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;image&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是image
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nx">imageUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_preview_image&amp;#34;&lt;/span>&lt;span class="c1">//多出来图片url这项
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">//列表通知模板
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;list&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是list
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 1.&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//列表项
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 2.&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 3.&amp;#34;&lt;/span>&lt;span class="p">}]&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c1">//进度条通知模板
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;progress&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是progress
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nx">progress&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="c1">//进度条进度0-100
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般系统中，通知还可以带至多两个&lt;code>action&lt;/code>选项，并可以添加监听事件来回调函数。例如：&lt;code>chrome.notifications.onButtonClicked.addListener(replyBtnClick);&lt;/code>。&lt;/p>
&lt;p>总体而言，Chrome的&lt;code>notification API&lt;/code>比较简单，下面我们通过一个例子来体验下用法与效果。&lt;/p>
&lt;h3 id="实例按时喝水">实例：按时喝水&lt;/h3>
&lt;p>写在最前面，对于windows或macos系统，通知有可能不好用，因此这部分内容我觉得意义不大，不看也行。&lt;/p>
&lt;p>在真正进入这个例子之前，我们先简要介绍下&lt;code>chrome.alarms&lt;/code> API，其主要作用是安排代码定期运行或在将来的指定时间运行，需要授予&lt;code>alarms&lt;/code>权限。&lt;/p>
&lt;p>我们接下来要写的这个扩展是一个定时通知提醒我们喝水的小程序。其&lt;code>manifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Drink Water Event Popup&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demonstrates usage and features of the event page by reminding user to drink water&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s2">&amp;#34;alarms&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;notifications&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;default_title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Drink Water Event&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water128.png&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其中需要说明是因为要定时运行，因此我们使用&lt;code>chrome.alarms&lt;/code> API需要&lt;code>alarms&lt;/code>，又因为需要通知用户因此需要&lt;code>notifications&lt;/code>权限。&lt;/p>
&lt;p>我们在&lt;code>popup.html&lt;/code>和&lt;code>popup.js&lt;/code>中设置定时运行程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Water Popup&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">hydrateImage&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#80DEEA&lt;/span> &lt;span class="kc">dotted&lt;/span> &lt;span class="kc">thick&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c">&amp;lt;!--
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c"> - JavaScript and HTML must be in separate files
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="c"> --&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;./stay_hydrated.png&amp;#39;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;hydrateImage&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="c">&amp;lt;!-- An Alarm delay of less than the minimum 1 minute will fire
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c"> in approximately 1 minute increments if released --&amp;gt;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sampleMinute&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Sample minute&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;min15&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;15&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>15 Minutes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;min30&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;30&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>30 Minutes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;cancelAlarm&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Cancel Alarm&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个网页主题很简单，就是一幅图片后面跟了四个按钮。每个按钮在&lt;code>pop.js&lt;/code>中为其添加了一个监听事件。如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">minutes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">parseFloat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">delayInMinutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">minutes&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">minutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">minutes&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="c1">//存储定时时长
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">clearAlarm&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clearAll&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">//An Alarm delay of less than the minimum 1 minute will fire
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">// in approximately 1 minute increments if released
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sampleMinute&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;min15&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;min30&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cancelAlarm&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">clearAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js内容就是给按钮加上点击的监听事件，分别设置不同的定时时间（通过按钮的&lt;code>value&lt;/code>传递参数），最后一个是清除定时运行。设定或清除定时程序时，也会捎带把扩展图标上的badge设置上。&lt;/p>
&lt;p>最后，我们来看下发出通知的&lt;code>background.js&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//定时到时间后的操作发出通知
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onAlarm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;basic&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;stay_hydrated.png&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Time to Hydrate&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Everyday I\&amp;#39;m Guzzlin\&amp;#39;!&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nx">buttons&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Keep it Flowing.&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">priority&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">//如果点击通知的按钮则根据上一次的定时时长重置定时程序
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onButtonClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;minutes&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">delayInMinutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">minutes&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据我的实际运行经验，定时程序是能运行的，因为能发现到时间了badge状态会改变，但是由于操作系统原因，通知并没有发送出来。所以这部分内容仅供参考吧。&lt;/p>
&lt;h2 id="匹配模式match-pattern">匹配模式(match pattern)&lt;/h2>
&lt;p>匹配模式内容请参考整合版文档：&lt;a href="../../%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/Javascript-Chrome%E6%89%A9%E5%B1%95%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D.html">Chrome扩展模式匹配&lt;/a>&lt;/p>
&lt;h2 id="完成实例复现">完成实例复现&lt;/h2>
&lt;p>经过前面的学习，我们已经拥有了Chrome扩展开发的基础，如果有兴趣的话，我们可以复现下面这个实例：&lt;/p>
&lt;p>素材来源：&lt;a href="https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two">https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two&lt;/a>&lt;/p>
&lt;p>简介：这是要做一个Pomodoro时钟。Pomodoro一词来源于番茄工作法（Pomodoro Technique），是一种时间管理方法，在1980年代由Francesco Cirillo创立。该方法使用一个定时器来分割出一个一般为25分钟的工作时间和5分钟的休息时间，而那些时间段被称为pomodoros，为意大利语单词 pomodoro（中文：番茄）之复数。我们做的这个Pomodoro时钟要有倒计时、设定时间以及任务管理的功能。如果觉得这个工作方法有用，平时工作学习中也可以尝试使用这个扩展^_^。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google Chrome Content Script &lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#files">https://developer.chrome.com/docs/extensions/mv3/content_scripts/#files&lt;/a>&lt;/li>
&lt;li>Manifest - Web Accessible Resources &lt;a href="https://developer.chrome.com/docs/extensions/mv3/manifest/web_accessible_resources/">https://developer.chrome.com/docs/extensions/mv3/manifest/web_accessible_resources/&lt;/a>&lt;/li>
&lt;li>GoogleChrome/chrome-extensions-samples &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples">https://github.com/GoogleChrome/chrome-extensions-samples&lt;/a>&lt;/li>
&lt;li>Message passing &lt;a href="https://developer.chrome.com/docs/extensions/mv3/messaging/">https://developer.chrome.com/docs/extensions/mv3/messaging/&lt;/a>&lt;/li>
&lt;li>Rich notifications API &lt;a href="https://developer.chrome.com/docs/extensions/mv3/richNotifications/">https://developer.chrome.com/docs/extensions/mv3/richNotifications/&lt;/a>&lt;/li>
&lt;li>Match patterns &lt;a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">https://developer.chrome.com/docs/extensions/mv3/match_patterns/&lt;/a>&lt;/li>
&lt;li>番茄时钟扩展 &lt;a href="https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two">https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展实例（二）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%BA%8C/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%BA%8C/</guid><description>
&lt;h2 id="chrome扩展实例二---omit-in-toc---">Chrome扩展实例（二）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在Chrome扩展实例（一）中我们用一个例子走通了扩展开发的大体流程，实现了简单的换背景颜色功能。其中执行的js函数将上下文设置为浏览的网页页面，用的是&lt;code>chrome.scripting.executeScript&lt;/code> API来改变上下文环境。这其实是Chrome扩展content script的一种，这即是本篇文章介绍的重点。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#content-script">Content Script&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#content-script%E5%8F%AF%E7%94%A8%E6%8E%A5%E5%8F%A3">Content Script可用接口&lt;/a>&lt;/li>
&lt;li>&lt;a href="#content-script%E4%B8%8A%E4%B8%8B%E6%96%87">Content Script上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#inject-scripts">Inject Scripts&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%9D%99%E6%80%81%E5%A3%B0%E6%98%8Edeclared-statically%E6%B3%A8%E5%85%A5">静态声明（declared statically）注入&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4%E7%BB%9F%E8%AE%A1">实例：阅读时间统计&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8A%A8%E6%80%81%E5%A3%B0%E6%98%8Edeclared-dynamically%E6%B3%A8%E5%85%A5">动态声明（declared dynamically）注入&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E4%B8%93%E6%B3%A8%E6%A8%A1%E5%BC%8F">实例：专注模式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%A4%AA%E9%80%82%E5%90%88%E6%B3%A8%E5%85%A5javascript">为什么不太适合注入javascript&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%AF%E9%80%89%E4%B8%BA%E6%89%A9%E5%B1%95%E6%B7%BB%E5%8A%A0%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">（可选）为扩展添加键盘快捷方式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BB%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5programmatically-injected">以编程方式注入（programmatically injected）&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E6%97%A0%E5%9B%BE%E6%A8%A1%E5%BC%8F">实例：无图模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="content-script">Content Script&lt;/h2>
&lt;p>Content script是扩展中运行在网页上下文中的typescript/javascript/css文件，它直接作用于网页的DOM，能够直接访问、修改网页元素。但是由于content script的上下文与扩展不同，因此扩展本身交互时需要消息传递机制。同时，content script并不能像service worker或popup那样可以使用几乎所有的Chrome API，它能够使用的Chrome API很有限。&lt;/p>
&lt;h3 id="content-script可用接口">Content Script可用接口&lt;/h3>
&lt;p>Content Script能够&lt;strong>直接使用&lt;/strong>的Chrome API如下：&lt;/p>
&lt;ul>
&lt;li>i18n （语言国际化接口）&lt;/li>
&lt;li>storage （存储接口）&lt;/li>
&lt;li>runtime （运行时接口）
&lt;ul>
&lt;li>connect&lt;/li>
&lt;li>getManifest&lt;/li>
&lt;li>getURL&lt;/li>
&lt;li>id&lt;/li>
&lt;li>onConnect&lt;/li>
&lt;li>onMessage&lt;/li>
&lt;li>sendMessage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>虽然content script无法直接调用其他Chrome API，但是可以利用消息传递机制，通过service worker或popup等间接地调用其他Chrome API。&lt;/p>
&lt;h3 id="content-script上下文">Content Script上下文&lt;/h3>
&lt;p>上下文可以说是Content Script最核心的内容。默认情况下，content script运行的上下文是一个独立的环境。这个独立环境是所在扩展所独享的，因此content script默认情况下只能操作所在扩展中的内容。扩展独立的空间保证content script的内容不会与网页页面内容、其他扩展的内容不会产生冲突。&lt;/p>
&lt;p>但是，如果content script只能在扩展独立的空间中发挥作用，那么它就没法访问、修改网页元素，从而实现目标功能了。因此，Chrome提供一种&lt;strong>叫做“Inject scripts”的技术，来修改content script执行时的上下文&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Inject scripts&lt;/strong>改变上下问的方式有三种：&lt;/p>
&lt;ol>
&lt;li>静态声明（declared statically）注入&lt;/li>
&lt;li>动态声明（declared dynamically）注入&lt;/li>
&lt;li>以编程方式注入（programmatically injected）&lt;/li>
&lt;/ol>
&lt;h2 id="inject-scripts">Inject Scripts&lt;/h2>
&lt;p>直观地说，Inject Scripts就是将扩展中typescript/javascript/css文件注入到特定的运行环境中，这样就能够&lt;strong>用目标环境的上下文覆盖原来文件的上下文&lt;/strong>。而inject script的三种模式，可以根据开发需求，酌情选择。&lt;/p>
&lt;h3 id="静态声明declared-statically注入">静态声明（declared statically）注入&lt;/h3>
&lt;p>静态声明注入是inject script最常用的模式。这种模式需要在&lt;code>manifest.json&lt;/code>文件中提前写入。优点是方便简洁，缺点是缺乏灵活性，需要提前对&lt;code>manifest.json&lt;/code>内容进行规划。静态声明注入使用的&lt;code>manifest.json&lt;/code>中的&lt;code>content_scripts&lt;/code>字段，基本模式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;扩展名称&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;https://*.github/*&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;css&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;my-styles.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;content-script.js&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;run_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;document_idle&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;match_about_blank&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;match_origin_as_fallback&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单来说，&lt;code>content_script&lt;/code>在匹配成功&lt;code>matches&lt;/code>字段的网页中，注入&lt;code>js&lt;/code>指定的javascript文件和&lt;code>css&lt;/code>指定的css文件，其中&lt;code>js&lt;/code>和&lt;code>css&lt;/code>都可以指定一组文件。&lt;code>maches&lt;/code>，&lt;code>js&lt;/code>，&lt;code>css&lt;/code>此三个字段是&lt;code>content_script&lt;/code>的核心字段，后面三个字段都是功能配置字段。&lt;code>matches&lt;/code>字段的使用详情可参见文章&lt;a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">https://developer.chrome.com/docs/extensions/mv3/match_patterns/&lt;/a>以及补充内容&lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#matchAndGlob">https://developer.chrome.com/docs/extensions/mv3/content_scripts/#matchAndGlob&lt;/a>。三种功能字段介绍如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>run_at&lt;/code>:在什么时候注入内容文件，有三个选项&lt;code>document_start&lt;/code>、&lt;code>document_end&lt;/code>、&lt;code>document_idle&lt;/code>，默认选项是&lt;code>document_idle&lt;/code>。
&lt;ul>
&lt;li>&lt;code>document_start&lt;/code>：DOM开始载入。&lt;/li>
&lt;li>&lt;code>document_end&lt;/code>：DOM主体部分载入完毕，资源文件（如图像、脚本）可能尚在载入中。&lt;/li>
&lt;li>&lt;code>document_idle&lt;/code>：DOM和资源文件全部载入完毕。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>match_about_blank&lt;/code>：如果&lt;code>matches&lt;/code>字段能够匹配空页面&lt;code>about:blank&lt;/code>，注入是否生效，默认&lt;code>false&lt;/code>。常见于通配符匹配场景。&lt;/li>
&lt;li>&lt;code>match_origin_as_fallback&lt;/code>：当页面中包含框架（frame），如果框架的URL不匹配&lt;code>matches&lt;/code>字段，但是框架所在的母网页匹配&lt;code>matches&lt;/code>字段，内容注入是否生效，默认为&lt;code>true&lt;/code>。这个属性适用于manifest V3及以上版本的扩展，同时由于HTML5中框架（frame）字段遭到删除，这条可能主要用于兼容老版本网页或&lt;code>&amp;lt;iframe&amp;gt;&lt;/code>标签。&lt;/li>
&lt;/ul>
&lt;p>下面我们就用一个例子解释静态声明注入的用法。&lt;/p>
&lt;h4 id="实例阅读时间统计">实例：阅读时间统计&lt;/h4>
&lt;p>有了《chrome扩展入门》《chrome扩展实例（一）》两篇文章，我们对扩展的基本开发流程已有了基本的了解。现在我们就省略已知的步骤，快速实现一个新的扩展。首先,依旧是&lt;code>manifest.json&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Reading time&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;估计阅读文章所需要的时间&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="s2">&amp;#34;scripts/content.js&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/studynotes/*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/projectnotes/*&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>manifest.json&lt;/code>文件前面几项都没什么再需要解释的了，&lt;code>icons&lt;/code>的素材来自URL&lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/tutorial.reading-time/images">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/tutorial.reading-time/images&lt;/a>（如果链接失效，可以随自己喜好找合适的图片）。新增的内容&lt;code>content_scripts&lt;/code>字段即为静态声明注入&lt;code>content_scripts&lt;/code>，注入的js脚本来自扩展根目录下的&lt;code>scripts/content.js&lt;/code>，扩展可用的网页是匹配&lt;code>matches&lt;/code>字段的本人博客网页^_^。该扩展运行时，Chrome浏览器会给扩展提供网页URL，当&lt;code>matches&lt;/code>字段匹配成功时，注入js脚本的功能生效（默认在网页完全载入的&lt;code>document_idle&lt;/code>阶段启动注入）。&lt;/p>
&lt;p>接下来，新建目录&lt;code>scripts&lt;/code>并在其下新建js文件&lt;code>content.js&lt;/code>，并添加如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//content_script.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//获取网页中的文章&amp;lt;article&amp;gt;标签（并不是所有网页都有，我的博客中有这个标签）
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">article&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;article&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//判断是否成功，不成功则返回null，也可能返回多个，为了方便我们先不考虑
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">article&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">article&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//获取标签中文本
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//分中英文统计字符
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//中文，/\p{Unified_Ideograph}/ug 匹配所有中文
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">chineseChar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">matchAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\p{Unified_Ideograph}/ug&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">chineseNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">chineseChar&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//计算文本长度
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//英文，去除中文后再匹配
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">englishChar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[^\w-]/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">matchAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[^\s]+/g&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">englishNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">englishChar&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//计算文本长度
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//假设我们每分钟阅读中文400个字，英文300单词，计算阅读时长
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">readingTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chineseNum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">englishNum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//创建&amp;lt;p&amp;gt;元素存放结果
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">badge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">badge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`⏱️ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">readingTime&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> min read`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//在&amp;lt;h1&amp;gt;标题后面添加阅读时间的&amp;lt;p&amp;gt;元素
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">heading&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">article&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;h1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nx">heading&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertAdjacentElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;afterend&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">badge&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要指出，这个&lt;code>content.js&lt;/code>文件中的DOM操作针对的是本人博客网页的操作，并不能无缝移植到其他网页上。接下来，我们载入这个扩展。当我们打开一般网页时，这个扩展由于匹配字段并不成功，不会生效，只有当我们访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>https://surprisedcat.github.io/studynotes/*
&lt;span class="ln">2&lt;/span>https://surprisedcat.github.io/projectnotes/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两组网页时，扩展才会生效。那么，我们就访问上一篇文章《javascript-chrome扩展实例（一）》的URL&lt;a href="https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/">https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/&lt;/a>，显然时能够匹配的，注意看大标题“javascript-Chrome扩展实例（一）”下面确实多出了一行阅读时间。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_readingtime.png" alt="chrome_extension_readingtime.png">&lt;/p>
&lt;p>静态声明注入实验成功！附：reading_time文件结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>reading_time
&lt;span class="ln">2&lt;/span> ├─manifest.json
&lt;span class="ln">3&lt;/span> ├─images
&lt;span class="ln">4&lt;/span> │ ├─icon-128.png
&lt;span class="ln">5&lt;/span> │ ├─icon-16.png
&lt;span class="ln">6&lt;/span> │ ├─icon-32.png
&lt;span class="ln">7&lt;/span> │ └─icon-48.png
&lt;span class="ln">8&lt;/span> └─scripts
&lt;span class="ln">9&lt;/span> └─content.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态声明declared-dynamically注入">动态声明（declared dynamically）注入&lt;/h3>
&lt;p>如果某些网站不是那么知名，扩展无法在&lt;code>manifest.json&lt;/code>设计时就预见到或者对于某个匹配到的网站，并不是要总是注入内容脚本，需要在运行时再决定。对于这两种情况，静态声明注入就无法胜任，我们需要一种更灵活的内容注入方式，这就需要&lt;strong>动态声明（declared dynamically）注入&lt;/strong>。&lt;/p>
&lt;p>从Chrome 96开始，我们可以调用&lt;code>chrome.scripting&lt;/code> API进行动态声明注入，其主要方法包括：&lt;/p>
&lt;ol>
&lt;li>注册content script：&lt;code>chrome.scripting.registerContentScripts&lt;/code>，&lt;code>chrome.scripting.insertCSS&lt;/code>。&lt;/li>
&lt;li>查看当前所有动态注册的content script：&lt;code>chrome.scripting.getRegisteredContentScripts&lt;/code>。&lt;/li>
&lt;li>更新content script：&lt;code>chrome.scripting.updateContentScripts&lt;/code>。&lt;/li>
&lt;li>删除已注册的content script：&lt;code>chrome.scripting.unregisterContentScripts&lt;/code>，&lt;code>chrome.scripting.removeCSS&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>动态声明注入通常至少需要两个权限：&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>，其他权限根据所需的功能额外再提供。&lt;/p>
&lt;p>区别与静态声明注入使用&lt;code>matches&lt;/code>字段来决定哪些URL执行内容注入，动态声明注入使用&lt;strong>注入目标&lt;/strong>（Injection targets）来决定内容注入对象。注入目标使用&lt;code>tabID&lt;/code>来唯一决定。&lt;/p>
&lt;blockquote>
&lt;p>tabID是Chrome标签页面window对象的ID，当我们打开多个tab页面时，每个tab页面都是一个独立的window对象，它们通过不同tabId区分，默认内容注入只在页面的主框架中有效。&lt;/p>
&lt;/blockquote>
&lt;h4 id="实例专注模式">实例：专注模式&lt;/h4>
&lt;p>现在网页上面有很多杂七杂八的元素，当我们阅读时很容易被这些元素分心，因此我们想做一个扩展，能够暂时性地让这些杂七杂八的元素消失，是我们能够更专心地阅读文章。本例使用的素材修改自官方教程&lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/">https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/&lt;/a>。&lt;/p>
&lt;p>我们整体思路如下：先选CSDN网站为例，上面有很多妨碍阅读的元素，我们点击该扩展后，能将这些元素的CSS的&lt;code>display&lt;/code>属性修改为&lt;code>none&lt;/code>。假设我们已经提前写好了一个CSS文件，只要注入此文件就能实现（而非一个个地设置哪些元素应该不可见）。此外，我们还需要设置一个键盘快捷键，能够方便地在一般模式和专注模式中切换。&lt;/p>
&lt;p>我们首先设计&lt;code>manifest.json&lt;/code>文件，因为不需要静态声明注入，所以不需要&lt;code>content_scripts&lt;/code>字段，取而代之的是动态声明注入所需要的&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>两个权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Focus Mode&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Enable reading mode on Chrome&amp;#39;s official Extensions and Chrome Web Store documentation.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>manifest&lt;/code>其他部分之前都应该讲解过了，现阶段唯一需要指出的是我们会在service worker的&lt;code>background.js&lt;/code>中动态声明注入内容。&lt;/p>
&lt;p>为了区分当前网页是一般模式还是专注模式，我们给扩展的图标添加一个小徽章（badge），当开启专注模式时显示“ON”，否则显示“OFF”。所谓“badge”就是在扩展图标上显示一些文本，可以用来更新一些小的扩展状态提示信息。因为“badge”空间有限，所以只支持4个以下的字符（英文4个，中文2个）。“badge”无法通过配置文件来指定，必须通过代码实现，设置badge文字和颜色可以分别使用&lt;code>chrome.action.setBadgeText({text: 'WORD'})&lt;/code>和&lt;code>chrome.action.setBadgeBackgroundColor({color:[255, 0, 0, 255]})&lt;/code>。&lt;/p>
&lt;p>每次点击扩展图标，就换切换网页状态，同时badge状态也会跟着改变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//初始状态下，状态为OFF
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//添加监听事件，点击扩展action图标
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">//tab默认指当前的tab页面
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//获取当前badge状态
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">//点击后的状态总是和之前相反
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;OFF&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//更改badge状态的文字
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../../images/chrome_extension_badge.png" alt="chrome_extension_badge.png">&lt;/p>
&lt;p>以上代码实现了Badge状态文字的切换。我们希望在CSDN的网页上实现开启专注模式时，杂乱元素不可见，因此我们要添加CSDN的URL作为判别条件，同时根据Badge状态文字，决定注入还是取消注入CSS文件。因此，完善后的&lt;code>background.js&lt;/code>代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//初始状态下，状态为OFF
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//目标URL
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">CSDN_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;https://blog.csdn.net/&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">//添加监听事件，点击扩展action图标
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//tab默认指当前的tab页面
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">//如果以CSDN_URL开头则执行内容脚本
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CSDN_url&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//获取当前badge状态
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//点击后的状态总是和之前相反
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;OFF&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//更改badge状态的文字
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1">//根据Badge状态文字执行注入CSS和取消注入CSS
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;ON&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertCSS&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="c1">//注入CSS
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css/csdn.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">nextState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeCSS&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="c1">//取消注入CSS
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css/csdn.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就以动态声明注入实现了两种模式CSS的切换。&lt;code>csdn.css&lt;/code>的内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="ln"> 1&lt;/span>&lt;span class="c">/*CSDN 专注模式样式表*/&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c">/*URL: *blog.csdn.net/* */&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">csdn-toolbar&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">aside&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">recommend-right&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">toolBarBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">first-recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">second-recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">csdn-side-toolbar&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">pcCommentBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">insert-baidu-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box-style&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">template-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">blog-footer-bottom&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogHuaweiyunAdvert&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogColumnPayAdvert&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nt">body&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">main_father&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">d-flex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">justify-content-center&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogExtensionBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">js_content&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">pre&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c">/*使用内联样式表以及!important的顽固分子*/&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c">/*一般情况不要再扩展中使用!important*/&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">treeSkill&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">pcCommentBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">recommendNps&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">nodata&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">aliceblue&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们可以重新载入扩展，选择CSDN的博客来测试下效果。示例URL:&lt;a href="https://blog.csdn.net/wuyxinu/article/details/115839575">https://blog.csdn.net/wuyxinu/article/details/115839575&lt;/a>。&lt;/p>
&lt;p>一般模式：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_focus_mode_before.png" alt="chrome_extension_focus_mode_before.png">&lt;/p>
&lt;p>专注模式：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_focus_mode_after.png" alt="chrome_extension_focus_mode_after.png">&lt;/p>
&lt;p>动态声明注入试验成功！附：focus_mode文件结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>focus_mode
&lt;span class="ln"> 2&lt;/span>├─background.js
&lt;span class="ln"> 3&lt;/span>├─manifest.json
&lt;span class="ln"> 4&lt;/span>├─css
&lt;span class="ln"> 5&lt;/span>│ └─ csdn.css
&lt;span class="ln"> 6&lt;/span>└─images
&lt;span class="ln"> 7&lt;/span> ├─icon-128.png
&lt;span class="ln"> 8&lt;/span> ├─icon-16.png
&lt;span class="ln"> 9&lt;/span> ├─icon-32.png
&lt;span class="ln">10&lt;/span> └─icon-48.png
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="为什么不太适合注入javascript">为什么不太适合注入javascript&lt;/h4>
&lt;p>上面的例子我们动态注入的是CSS样式表，那么是否可以注入javascript文件呢？可以的。事实上，最开始我对官方示例改造时就用的是动态注入javascript。但是动态注入javascript时需要指定&lt;code>runAt&lt;/code>，而之前我们说明&lt;code>runAt&lt;/code>只有三个时刻，这三个时刻都需要重新载入网页，对于扩展来说实在不方便，因此我们采用了不需要重载网页的CSS样式表来做示例。&lt;/p>
&lt;p>那么，有没有一种不需要重载网页就能运行javascript的内容注入模式呢？当然有的，就是下一节介绍的&lt;strong>以编程方式注入&lt;/strong>。&lt;/p>
&lt;h4 id="可选为扩展添加键盘快捷方式">（可选）为扩展添加键盘快捷方式&lt;/h4>
&lt;p>为了使用方便，我们还可以给扩展添加键盘快捷方式。比如可以通过快捷键启用/关闭专注模式。我们只需要在&lt;code>manifest.json&lt;/code>最后添加如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//...
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;commands&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;_execute_action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;suggested_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ctrl+B&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;mac&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Command+B&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>command&lt;/code>字段代表监听的键盘事件。&lt;code>_execute_action&lt;/code>等同于点击扩展图标事件&lt;code>action.onClicked()&lt;/code>，因此我们不需要额外添加任何代码。&lt;code>suggested_key&lt;/code>则是指定的快捷键，对于不同的操作系统（win、mac）快捷键有所区别。&lt;/p>
&lt;p>更多关于键盘快捷键的内容可参考&lt;a href="https://developer.chrome.com/docs/extensions/reference/commands/">https://developer.chrome.com/docs/extensions/reference/commands/&lt;/a>。&lt;/p>
&lt;h3 id="以编程方式注入programmatically-injected">以编程方式注入（programmatically injected）&lt;/h3>
&lt;p>我们前来介绍的两种内容注入方式都或多或少有些缺点。静态声明注入需要开发者极富远见，在&lt;code>manifest.json&lt;/code>设计阶段就能够决定未来各种情况，否则就得频繁地更新插件；动态声明注入后又得重载网页让javascript生效，十分麻烦。能否可以让注入的js内容实时生效呢？此时就可以使用以编程方式注入（programmatically injected）。它允许扩展使用&lt;code>chrome.scripting.executeScript&lt;/code> API在特定事件或特殊场景执行内容注入。&lt;/p>
&lt;p>以编程方式注入是最灵活多变的注入方法，它不仅可以像前两种方式那样选择Javascript或CSS文件进行注入，还可以选择可用的Javascript函数进行注入，例如在《javascript-chrome扩展实例（一）》中的修改背景颜色的实例，就是采用了Javascript函数注入的方式。但是如果该模式运用的不合理就会使得代码变得杂乱而无条理。其一般形式代码框架如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//使用js/css文件注入方式
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="c1">//注入的目标tab页面
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;content-script.js&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">//注入的文件
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">//使用js函数注入方式
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//注入的目标tab页面
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">func&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">injectedFunction&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//注入的函数，这个函数必须当前脚本可调用的
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;arg1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;arg2&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="c1">//函数的参数
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">injectedFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;orange&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，在使用函数注入的方式时，注入的函数是&lt;code>chrome.scripting.executeScript&lt;/code>调用中引用的函数的&lt;strong>副本&lt;/strong>，而不是原始函数本身。因此，函数的主体必须是自包含的(self-contained)，即不能使用函数以外的上下文内容；对函数外部变量的引用将导致内容脚本引发引用错误（ReferenceError）。&lt;/p>
&lt;p>以编程方式注入通常至少需要两个权限：&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>，其他权限根据所需的功能额外再提供。&lt;/p>
&lt;h4 id="实例无图模式">实例：无图模式&lt;/h4>
&lt;p>这个实例将使用以编程方式注入删除当前激活tab页面的所以图像元素&lt;code>&amp;lt;img&amp;gt;&lt;/code>，这个简单的扩展只包含三种文件：&lt;code>manifest.json&lt;/code>、&lt;code>background.js&lt;/code>和&lt;code>images&lt;/code>文件夹中的图标。&lt;/p>
&lt;p>&lt;code>manifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;No Images&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Remove all the images in the web pages&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里没有什么新的知识。只需要注意以编程方式注入需要两种权限&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>。我们在&lt;code>background.js&lt;/code>中实现删除图片元素的js功能代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">includes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;chrome://&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//chrome设置页面不生效
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//以编程方式注入
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="c1">//tabId默认是当前激活tab页面的ID
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">removeImages&lt;/span>&lt;span class="c1">//调用函数
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeImages&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//选出所有&amp;lt;img&amp;gt;元素
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">elememts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;img&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elememts&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">elememts&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1">//元素删除的模式，并非直接删除，而是通过父元素删除
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parentNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们载入扩展，用百度主页来做测试：&lt;/p>
&lt;p>之前，下图中百度图标是存在的：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_no_images_before.png" alt="chrome_extension_no_images_before.png">&lt;/p>
&lt;p>点击扩展后，百度主页的图标被删除了：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_no_images_after.png" alt="chrome_extension_no_images_after.png">&lt;/p>
&lt;p>以编程方式注入内容实验成功！&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文以三种方式实现了CSS/Javascript内容的注入，分别是静态声明注入、动态声明注入和以编程方式注入。首先需要注意注入的内容所在上下文与扩展所在上下文的区别。注入内容的上下文需要与目标tab网页一致。其次，我们需要根据不同的场景选择合理的注入方式，还需要给予注入操作权限。内容注入是Chrome扩展实现其功能多样性的灵活。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;li>Content Script &lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/">https://developer.chrome.com/docs/extensions/mv3/content_scripts/&lt;/a>&lt;/li>
&lt;li>Focus Mode &lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/">https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/&lt;/a>&lt;/li>
&lt;li>Page redder &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/sample.page-redder">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/sample.page-redder&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展实例（一）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/</guid><description>
&lt;h2 id="chrome扩展实例一---omit-in-toc---">Chrome扩展实例（一）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在Chrome扩展入门中，我们写了一个最简单的形式化Hello插件，这个插件除了点击之后显示写字符外，没有任何实际作用，在这一章节中我们将写一些具备简单功能的扩展。这些扩展需要通过后台、前台或二者配合实现，主要编程语言是JavaScript，使用Chrome浏览器提供的API。我们更希望在开发实例中逐步学习Chrome扩展的内容。&lt;/p>
&lt;p>Chrome API文档：&lt;a href="https://developer.chrome.com/docs/extensions/reference/">https://developer.chrome.com/docs/extensions/reference/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#service-worker%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1">Service Worker后台服务&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B%E5%B0%86%E6%BF%80%E6%B4%BB%E7%9A%84tab%E9%A1%B5%E9%9D%A2%E7%A7%BB%E8%87%B3%E9%A6%96%E4%BD%8D">后台服务实例：将激活的Tab页面移至首位&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">扩展的权限管理&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8permission%E7%9A%84%E5%AE%9E%E4%BE%8B">自定义扩展使用permission的实例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E4%BF%AE%E6%94%B9%E5%8E%9F%E7%BD%91%E9%A1%B5">使用扩展修改原网页&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%88%86%E7%A6%BB%E7%BD%91%E9%A1%B5%E5%85%83%E7%B4%A0%E5%92%8C%E8%84%9A%E6%9C%AC">分离网页元素和脚本&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87">扩展的上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2">选项设置页面&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="service-worker后台服务">Service Worker后台服务&lt;/h2>
&lt;p>Service Worker是Chrome扩展在后台运行并监听和响应事件的服务程序，具有相当大的权限，几乎可以使用所有的Chrome API，作为扩展的支柱存在，稍微复杂一些的扩展都会需要service worker。在过去的版本中，service worker原名叫background算是非常贴切的名称了。&lt;/p>
&lt;p>Service Worker是&lt;strong>事件驱动的服务&lt;/strong>，平时处于后台静默或休眠状态，当注册在Chrome的API&lt;strong>监听到相应事件&lt;/strong>时才会启动。Service worker注册并安装成功后，运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的Web请求。&lt;/p>
&lt;h3 id="后台服务实例将激活的tab页面移至首位">后台服务实例：将激活的Tab页面移至首位&lt;/h3>
&lt;p>我们下面用一个例子了解下插件的后台service worker是如何工作的。该例子的作用是将处于激活状态的tab页面移至首位，例如当我们点击某个页面时，该页面的标签页就会被移到首位。为了方便，该例子不会用到&lt;code>popup&lt;/code>，&lt;code>conetent&lt;/code>等其他页面，只用后台的service worker。&lt;/p>
&lt;p>首先必然是写配置清单&lt;code>manifest.json&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MoveToFisrt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to move the activated tab to the first place&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>清单中多出的配置项“background”就是用来指定service worker。&lt;code>manifes.json&lt;/code>中使用的都是相对路径，因此我们在&lt;code>manifest.json&lt;/code>同级目录添加&lt;code>background.js&lt;/code>文件。其主要功能就是将激活的标签页移至首位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//添加tab激活的事件监听器，事件触发后调用回调函数moveToFirstPosition
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">//该addListener的回调函数形式：(activeInfo: object) =&amp;gt; void
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//activeInfo {tabID:tabID , windowId:windowId}
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onActivated&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//定义回调函数moveToFirstPosition
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// 将当前的tab移到首位即index:0。
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Success.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Error: Tabs cannot be edited right now (user may be dragging a tab).&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">//如果标签无法移动，那么等50ms再尝试
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js代码难度并不大，但是Chrome API有一个默认规则需要注意：&lt;/p>
&lt;blockquote>
&lt;p>除非特殊说明，&lt;code>chrome.*&lt;/code>的API都是异步的。因此调用后会立即返回，而不会等待异步的操作完成。如果需要对异步操作的结果进行处理，需要使用回调函数、&lt;code>Promise&lt;/code>或&lt;code>async...await...&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>所以，在使用Chrome API开发时，我们会经常见到&lt;code>async ... await..&lt;/code>的形式。关于这种语法，可以参考ES 8中新增的规范。&lt;/p>
&lt;p>现在我们可以在Chrome浏览器中载入这个扩展并尝试了！&lt;/p>
&lt;p>这个例子中我们只是用了后台的service worker(&lt;code>background.js&lt;/code>)，该js脚本向Chrome的tab接口添加了一个事件监听器，当一个tab标签被激活后，会触发该事件监听器从而执行后台功能（&lt;code>moveToFirstPosition&lt;/code>函数）。Chrome的后台脚本基本都是使用事件驱动的模式，这样可以降低扩展对内存的消耗。&lt;/p>
&lt;h2 id="扩展的权限管理">扩展的权限管理&lt;/h2>
&lt;p>在网络安全与数据隐私重要性日益凸显的当下，Chrome在&lt;code>V3&lt;/code>版本的&lt;code>manifest.json&lt;/code>中，着重考虑了安全与隐私，甚至到了不进行权限授予就不能使用大部分Chrome API的程度。当我们需要操作浏览器或用户的相关数据等Chrome API时，需要给予扩展相对应的权限（Permissions），从而帮助扩展程序或应用程序受到攻击时尽可能减小损失。扩展有四种类型的权限：&lt;/p>
&lt;ol>
&lt;li>&lt;code>permissions&lt;/code>：包含API文档中特点的权限字段如（&lt;code>storage&lt;/code>,&lt;code>geolocation&lt;/code>）&lt;/li>
&lt;li>&lt;code>optional_permissions&lt;/code>：类似&lt;code>permissions&lt;/code>。但是在运行时由用户决定是否给予权限，而非事先决定。&lt;/li>
&lt;li>&lt;code>host_permissions&lt;/code>：通过匹配字段来匹配是否有相应权限。&lt;/li>
&lt;li>&lt;code>optional_host_permissions&lt;/code>：类似&lt;code>host_permissions&lt;/code>使用匹配字段。但是在运行时由用户决定是否给予权限，而非事先决定。&lt;/li>
&lt;/ol>
&lt;p>扩展程序或应用程序必须在清单文件&lt;code>manifest.json&lt;/code>中的 &lt;code>permissions&lt;/code>字段中声明所需要的权限，否则Chrome API会拒绝被调用。关于那些API需要什么权限的细节，可以参考&lt;a href="https://developer.chrome.com/docs/extensions/mv3/declare_permissions/">Chrome扩展的权限的文档&lt;/a>。&lt;/p>
&lt;h3 id="自定义扩展使用permission的实例">自定义扩展使用permission的实例&lt;/h3>
&lt;p>下面我们要开发一个Chrome扩展，让用户可以改变当前网页的背景色，其中需要使用到存储权限。首先在该扩展的目录下创建&lt;code>manifest.json&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：此时我们未向其添加权限&lt;code>permission&lt;/code>信息。目前为止，这个&lt;code>manifest.json&lt;/code>文件和上个例子“将激活的Tab页面移至首位”并无太大区别。接下来，我们编写该扩展的&lt;code>background.js&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;#3aa757&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//绿色
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()=&amp;gt;{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="c1">//调用存储API，存储color变量。
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`[Coloring] default background color is set to: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们载入这个扩展，发现这个简单的脚本报错了：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_permission_error.png" alt="chrome_extension_permission_error">&lt;/p>
&lt;p>错误原因是&lt;code>chrome.storage.sync&lt;/code>是&lt;code>undefined&lt;/code>，这是因为Chrome还没将&lt;code>storage&lt;/code>接口授权给扩展，因此扩展无法获得&lt;code>chrome.storage.sync.*&lt;/code>的API。我们要做就是在&lt;code>manifest.json&lt;/code>中添加&lt;code>permissions&lt;/code>字段，并在其中添加&lt;code>storage&lt;/code>权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新加载扩展，可以看到&lt;code>background.js&lt;/code>执行无误，并如预期那样在DevTools页面中输出日志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>Coloring&lt;span class="o">]&lt;/span> default background color is &lt;span class="nb">set&lt;/span> to: &lt;span class="c1">#3aa757 background.js:6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们就能在浏览器中存储了一个颜色数据，不过暂时也只是存储下，并没有实际的用途。&lt;/p>
&lt;blockquote>
&lt;p>Tips：在重新载入扩展后，&lt;a href="chrome://extensions/">chrome://extensions/&lt;/a>页面下的扩展依旧会显示有个错误按钮，那是因为扩展会保留之前的错误，而非重载之后依然有错，我们需要手动清除之前的错误信息。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用扩展修改原网页">使用扩展修改原网页&lt;/h2>
&lt;p>现在，我们需要将存储的背景颜色数据拿出来真正利用上。为了降低学习曲线，我们先只是用扩展工具栏上的&lt;code>popup&lt;/code>页面来修改网页。结合上一篇文章《javascript-Chrome扩展入门》中&lt;code>popup&lt;/code>页面的内容，我们增加&lt;code>popup&lt;/code>页面与相关&lt;code>icon&lt;/code>图标。首先，在&lt;code>manifest.json&lt;/code>文件添加&lt;code>action&lt;/code>和&lt;code>icon&lt;/code>字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，正如前一篇文章介绍的，&lt;code>action&lt;/code>字段用于代表点击扩展工具栏中扩展图标的响应动作，&lt;code>default_popup&lt;/code>是指点击图标后弹出的页面，本例中是&lt;code>popup.html&lt;/code>这个页面。&lt;code>default_icon&lt;/code>和&lt;code>icon&lt;/code>下都是不同尺寸的图标图片，这个例子是借用了谷歌Chrome&lt;code>manifest V2&lt;/code>版本的素材，链接：&lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started&lt;/a>。（如果链接失效了，自己找一些图片换上去也行）&lt;/p>
&lt;blockquote>
&lt;p>关于扩展的图标。最好使用PNG格式，兼容性最好，BMP、GIF、ICO和JPEG格式也可以使用，不过写本文时(2023年1月)尚不支持WebP和SVG格式。图标的尺寸最好分别提供16×16像素、32×32像素、48×48像素和128×128像素四种，如果尺寸不合适，Chrome浏览器将会尽力选用合适的尺寸（不保证效果）。&lt;/p>
&lt;/blockquote>
&lt;p>接下来就是编写&lt;code>popup.html&lt;/code>页面。我们希望&lt;code>popup.html&lt;/code>这个页面能够提供一个按钮，当我们点击按钮时，就能够将网页背景颜色替换成我们之前在&lt;code>background.js&lt;/code>存储的绿色。显然，仅仅靠HTML是不可能的，还要借助javascript来实现。基础的HTML代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c">/*按钮的样式*/&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">current&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">box-shadow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">white&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>B&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Add some codes here&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">// 可以在这里添加JS代码吗？？？ &lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分离网页元素和脚本">分离网页元素和脚本&lt;/h3>
&lt;p>上面的HTML代码很简单，就只有一个&lt;code>button&lt;/code>按钮。如果开发者觉得一个简单的js脚本，直接在上面的&lt;code>&amp;lt;script&amp;gt; ... &amp;lt;/script&amp;gt;&lt;/code>里添加就行，那么这个&lt;strong>扩展必然是运行不起来&lt;/strong>的。因为根据Chrome extension的Content Security Policy（CSP），&lt;strong>不允许我们使用内联javascript脚本(inline script)&lt;/strong>。我们可以试试，跑这个代码会报什么错误。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_CSP.png" alt="chrome_extension_CSP.png">&lt;/p>
&lt;blockquote>
&lt;p>在网页中，inline script是恶意注入的重灾区，因此处于安全考虑，Chrome extension在开发时禁止使用inline script。即使原生的CSP是可以添加&lt;code>unsafe-inline&lt;/code>字段来允许inline script的运行，但是Chrome extension开发组还是完全禁止了&lt;code>unsafe-inline&lt;/code>、&lt;code>unsafe-eval&lt;/code>这些存在安全隐患方法的使用。如果应要开发者坚持要使用inline script，必须要添加&lt;code>nonce&lt;/code>或&lt;code>hash&lt;/code>这种额外的安全验证手段，其带来的代码复杂度往往还要超过单独把inline script改成独立的js文件。因此，除非是实在没法改，都不鼓励使用inline script。&lt;/p>
&lt;/blockquote>
&lt;p>因此，我们需要再单独建一个javascript文件&lt;code>popup.js&lt;/code>来放脚本程序，同时修改&lt;code>popup.html&lt;/code>中inline script为External JavaScript文件链接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="c">&amp;lt;!-- no inline script
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c">&amp;lt;script&amp;gt; alert(&amp;#39;Add some codes here&amp;#39;);// 可以在这里添加JS代码吗？？？ &amp;lt;/script&amp;gt;
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c">--&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那在&lt;code>popup.js&lt;/code>添加什么样的Javascript代码呢？第一，解析&lt;code>popup.html&lt;/code>的dom树，得到&lt;code>button&lt;/code>表单元素。第二，给&lt;code>button&lt;/code>注册监听按钮点击（&lt;code>click&lt;/code>）事件。第三，当发生&lt;code>click&lt;/code>事件时，需要从浏览器的本地存储中取出&lt;code>background.js&lt;/code>存储的颜色数据。第四，解析&lt;code>DOM&lt;/code>树修改页面背景的CSS属性。接下来，我们在上面的&lt;code>popup.html&lt;/code>中着手添加js代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//popup.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//第一，解析dom树，得到button表单元素。
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//注意由于Chrome API都是异步的，因此这里用async函数
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//调用Chrome接口取出当前标签页
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">active&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentWindow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// 以当前标签页为上下文，执行setPageBackgroundColor函数
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//第三，从浏览器的本地存储中取出存储的颜色数据。
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//第四，修改页面背景的CSS属性。
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的js代码中，我们使用到了另外两个Chrome API：&lt;code>chrome.tabs.query&lt;/code>和&lt;code>chrome.scripting.executeScript&lt;/code>。它们分别来获取当前活动的tab页面和执行脚本命令，需要&lt;code>activeTab&lt;/code>, &lt;code>scripting&lt;/code>两种权限，因此我们再修改上述&lt;code>manifest.json&lt;/code>的&lt;code>permissions&lt;/code>字段，添加这两种权限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后重新载入扩展，点击扩展工具栏中的插件，弹出了一个带字母“B”（Button）按钮的小页面，点击该按钮，则会将网页背景颜色改成我们之前存储的绿色&lt;code>#3aa757&lt;/code>。我们以常见的百度首页为例：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_changeColor.png" alt="chrome_extension_changeColor.png">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 请注意，插件通过给&lt;code>body&lt;/code>标签设置样式来修改网页背景色。因此，如果网页背景色是由其他标签决定的，便无法生效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="扩展的上下文">扩展的上下文&lt;/h3>
&lt;p>说实话，第一次看到例子中&lt;code>popup.js&lt;/code>代码有点迷糊，尤其是中间&lt;code>async function onClickFunction()&lt;/code>函数，不知道为什么要有这一步操作，还得用&lt;code>chrome.tabs.query&lt;/code>先找当前的tab页面，然后在麻烦地用&lt;code>chrome.scripting.executeScript&lt;/code>来执行&lt;code>setPageBackgroundColor&lt;/code>函数。如此大费周章，为什么不能直接在注册监听事件的时候就将回调函数设置为&lt;code>setPageBackgroundColor&lt;/code>呢？&lt;/p>
&lt;p>我们可以尝试下看看直接这么做有什么效果，修改&lt;code>popup.js&lt;/code>中的时间监听代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//直接执行修改背景的函数
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新载入后，Chrome没有报错，点击工具栏扩展弹出的按钮，得到的效果如下图所示：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_changebg_error_context.png" alt="chrome_extension_changebg_error_context">&lt;/p>
&lt;p>哈，网页页面本身的背景颜色没变，改变的只有扩展&lt;code>popup.html&lt;/code>那个小页面的背景颜色！这是因为：要考虑扩展执行时候的上下文啊。&lt;/p>
&lt;p>首先，点击按钮&amp;quot;B&amp;quot;所执行的&lt;code>popup.js&lt;/code>脚本是在&lt;code>popup.html&lt;/code>中引入的，因此&lt;code>popup.js&lt;/code>执行的上下文是&lt;code>popup.html&lt;/code>页面，因此此时的&lt;code>setPageBackgroundColor&lt;/code>函数中DOM解析的&lt;code>document.body.style.backgroundColor&lt;/code>是指&lt;code>popup.html&lt;/code>的背景色，而非原网页&lt;code>www.baidu.com&lt;/code>的背景色。所以要改变js函数执行的上下文，我们要先用&lt;code>chrome.tabs.query({active: true, currentWindow: true});&lt;/code>找到当前页面的上下文环境，然后用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1">// 指定函数执行的上下为tabID所代表的环境
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>来重定向函数&lt;code>function: setPageBackgroundColor&lt;/code>执行时的上下文环境为&lt;code>target: {tabId: tab.id}&lt;/code>所指代的上下文。这样修改背景颜色的效果才会作用到原网页中。&lt;/p>
&lt;p>不过，我们也可以通过上下文的区别来提供更好的用户体验。比如修饰原有的按钮。为了让用户更直观的感受背景将要变换的颜色，我们可以提前将背景色放到按钮上，让用户感觉我点击该颜色的按钮，就可以将背景改成和按钮一样的颜色。其修改的&lt;code>popup.js&lt;/code>代码如下，读者可借助下面的代码体会两种上下文的区别。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//popup.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//第一，解析dom树，得到button表单元素。
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">// 从storage取背景色并设到按钮上，以popup.html为上下文
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//注意由于Chrome API都是异步的，因此这里用async函数
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//调用Chrome接口取出当前标签页
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">active&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentWindow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">// 以当前标签页为上下文，执行setPageBackgroundColor函数
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//指定访问的网页为上下文
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">//第三，从浏览器的本地存储中取出存储的颜色数据。
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1">//第四，修改页面背景的CSS属性。
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果如下:&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_context.png" alt="chrome_extension_context">&lt;/p>
&lt;h2 id="选项设置页面">选项设置页面&lt;/h2>
&lt;p>目前改背景颜色这个扩展只支持将背景色设为绿色，这样很不灵活。我们可以给插件添加&lt;strong>选项设置页面&lt;/strong>，实现更加丰富的功能，比如提供不同的背景色。&lt;/p>
&lt;p>选项设置页面也可以看作是扩展的配置页面，是扩展灵活性的体现。在&lt;code>manifest.json&lt;/code>中，需要添加&lt;code>option_page&lt;/code>字段指定选项页面，我们在目录中新建&lt;code>options.html&lt;/code>作为选项页面的HTML文件。完整的&lt;code>mamifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nt">&amp;#34;options_page&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;options.html&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时重新加载插件，如果扩展在扩展工具栏可见，则右键点击扩展图标，可以看到右键菜单中的&lt;code>选项&lt;/code>菜单，点它就会打开我们添加的选项页&lt;code>options.html&lt;/code>。如果扩展被收纳进扩展程序图标里，那么点击扩展程序图标，找到对应扩展右侧的三个竖点图标 $\vdots$，在下拉菜单中也可以找到&lt;code>选项&lt;/code>入口。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_options.png" alt="chrome_extension_options">&lt;/p>
&lt;p>现在我们还没给&lt;code>options.html&lt;/code>添加任何内容，因此现在打开选项页是一个空白页。我们给其添加上相应的Html代码（体会个意思就不搞太复杂了^_^）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;buttonDiv&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Choose a different background color!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;options.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和&lt;code>popup.html&lt;/code>类似，其主要功能也得依托Javascript实现，同时受限于CSP规则，js代码应该与Html代码分写在两个文件中，所以我们还要建立&lt;code>options.js&lt;/code>实现具体功能。&lt;/p>
&lt;p>为了方便示例，我们在选项页面中提供四种可选的背景色，用四个按钮表示。当我们点击选中的颜色的按钮时，会将对应的颜色存储到Chrome浏览器的存储空间&lt;code>chrome.storage.sync&lt;/code>中。这样&lt;code>popup.html&lt;/code>页面运行时就会从浏览器中选出选项页确定的颜色。其代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//options.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//设置四种颜色：绿、红、黄、蓝
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">kButtonColors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;#3aa757&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#e8453c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#f9bb2d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#4688f1&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">//根据给定的颜色创建颜色按钮并注册监听事件
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">constructOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">//找到添加按钮的div
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;buttonDiv&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">//根据给定的颜色创建颜色按钮
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//设置按钮背景色
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">//为按钮注册监听事件，点击按钮则存储该颜色
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;color is &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//添加元素
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c1">//运行创建按钮函数
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">constructOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开选项页面，就是四个不同颜色的按钮。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_optionpage.png" alt="chrome_extension_optionpage.png">&lt;/p>
&lt;p>当我们点击蓝色按钮后，&lt;code>popup.html&lt;/code>的按钮也会变成蓝色，点击后，网页的背景色也是蓝色。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_optionpage_blue.png" alt="chrome_extension_optionpage_blue.png">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这篇文章中，我们相对完整的实现了一个改背景颜色的Chrome扩展，包含了清单文件&lt;code>manifest.json&lt;/code>，后台脚本&lt;code>background.js&lt;/code>，功能页面&lt;code>popup.html&lt;/code>和配置页面&lt;code>options.html&lt;/code>。基本走通了Chrome扩展开发的普遍流程，其他扩展开发的步骤也是大同小异。同时文章中也介绍了常见权限问题、上下文问题、CSP问题等常见坑，也算是经验的积累。改颜色扩展完整的目录结构如下：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_my_color.png" alt="chrome_extension_my_color.png">&lt;/p>
&lt;p>该扩展主要参考了Chrome官方Manifest V2的一个教程，针对V3版本做了修改。&lt;/p>
&lt;p>如果想把自己的扩展给更多人使用，可以将其打包上传的Chrome商店，发布自己的扩展，其步骤可参考Chrome教程&lt;a href="https://developer.chrome.com/docs/webstore/publish/">https://developer.chrome.com/docs/webstore/publish/&lt;/a>。如果只是小范围使用，可以直接把文件拷给别人就可以了。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;li>MV2 教程老例子 &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展入门</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%85%A5%E9%97%A8/</guid><description>
&lt;h2 id="chrome扩展入门---omit-in-toc---">Chrome扩展入门&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Chrome扩展能为Chrome浏览器增加新的功能和特性，为用户提供定制化的浏览体验，如果有一些自己需要的功能，也可以尝试自己写一些扩展来实现。开发Chrome扩展所需要的技术和WEB前端开发并无不同，都是需要&lt;/p>
&lt;ol>
&lt;li>HTML&lt;/li>
&lt;li>CSS&lt;/li>
&lt;li>JavaScript&lt;/li>
&lt;/ol>
&lt;p>本质上来时，Chrome扩展就是工作在客户端浏览器上的JavaScript程序。如果说写Chrome扩展有什么需要新学的东西，那就是Chrome浏览器的Javascript APIs，通过浏览器的API，我们可以&lt;/p>
&lt;ol>
&lt;li>修改Chrome浏览器原有的功能和行为；&lt;/li>
&lt;li>允许用户收集和组织（重新组织）网上的信息；&lt;/li>
&lt;li>给Chrome的DevTools添加新的特性。&lt;/li>
&lt;/ol>
&lt;p>正是Google提供的扩展开发功能，为Chrome浏览器带来了源源不断的创新动力。&lt;/p>
&lt;p>目前Chrome建议使用的是Manifest V3，本文以此为环境写作。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">扩展的设计原则&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">扩展的文件结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90hello-world-extension">入门例子：Hello World Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B0%83%E8%AF%95%E6%89%A9%E5%B1%95">调试扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%B3%E4%BA%8E%E6%89%A9%E5%B1%95extensions%E6%8F%92%E4%BB%B6plugins%E4%B8%8E%E5%BA%94%E7%94%A8apps">关于扩展（extensions），插件（plugins）与应用（Apps）&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="扩展的设计原则">扩展的设计原则&lt;/h2>
&lt;p>Chrome的扩展设计要求遵循“单一目的”原则，该原则包含两个方面：&lt;/p>
&lt;ol>
&lt;li>扩展的主题或关注领域集中，例如“新闻头条”，“天气”，“购物比价”。千万不要像国内很多软件那样做得那么大而全。&lt;/li>
&lt;li>扩展的功能集中，例如“标签管理”，“搜索功能”，“新标签页面”。&lt;/li>
&lt;/ol>
&lt;h2 id="扩展的文件结构">扩展的文件结构&lt;/h2>
&lt;p>扩展根据所需的功能，包含的文件千差万别，其中最常用的如下。&lt;/p>
&lt;ol>
&lt;li>（必需）manifest文件。此文件翻译为“清单文件”，是唯一必需的文件，且名字必须为&lt;code>manifest.json&lt;/code>（显然是个&lt;code>json&lt;/code>文件），放在扩展的根目录文件夹下。Chrome浏览器通过该文件找到扩展配置并载入，&lt;code>manifest.json&lt;/code>中记录了扩展重要的元信息、定义资源、声明权限同时指定哪些文件在后台运行，哪些在前台显示，可以说是扩展的指导手册。&lt;/li>
&lt;li>service worker。通常是Javascript文件，监听并处理浏览器事件，例如跳转到新的页面、删除书签、关闭标签（tabs）等等。service worker可以使用所有的Chrome APIs，但是不能直接和页面的内容进行交互，那是Content scripts的工作。service worker一般运行在后台。&lt;/li>
&lt;li>content scripts。一般也是Javascript文件，content scripts在页面上下文中执行Javascript脚本，能够读取和修改DOM节点，并向指定页面注入JS和CSS。content scripts只能直接使用部分Chrome APIs，不过，如果需要的话，可以与service worker交互来间接地使用其余的Chrome APIs。&lt;/li>
&lt;li>UI元素。扩展的页面部分也是由HTML文件组成，包括图标、popup页面，配置页面等等，这些页面并不是必需的，开发者可以按需添加，这些页面也可以使用Chrome APIs。&lt;/li>
&lt;/ol>
&lt;p>一般常用目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">|&lt;/span>-- my-extension/
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">|&lt;/span>-- manifest.json // 清单文件。必需
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">|&lt;/span>-- background.js // service worker文件，后台
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">|&lt;/span>-- scripts/
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">|&lt;/span> ﹂ content.js // 前端内容处理
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">|&lt;/span> ﹂ others.js // 其他库，支持文件，按需命名
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">|&lt;/span>-- popup/ //扩展按钮
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.html
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.js
&lt;span class="ln">10&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.css
&lt;span class="ln">11&lt;/span> ﹂ images/ //所需图片
&lt;span class="ln">12&lt;/span> ﹂ icon-16.png // 各种尺寸的图标
&lt;span class="ln">13&lt;/span> ﹂ icon-32.png
&lt;span class="ln">14&lt;/span> ﹂ icon-48.png
&lt;span class="ln">15&lt;/span> ﹂ icon-128.png
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要指出的是，上述文件结构除了&lt;code>manifest.json&lt;/code>文件的名字和位置固定，其他文件的名字和位置都可以通过&lt;code>manifet.json&lt;/code>中进行指定和配置，文件中的路径都使用&lt;strong>相对路径&lt;/strong>。&lt;/p>
&lt;h2 id="入门例子hello-world-extension">入门例子：Hello World Extension&lt;/h2>
&lt;p>在了解了Chrome扩展大体结构后，我们用一个简单的“Hello”例子来展示下扩展的简要开发流程。这个“Hello”扩展的效果是当我们点击工具栏上的扩展图标，就会弹出“Hello Extensions 我的第一个扩展”。&lt;/p>
&lt;p>第一步，我们需要在跟目录建立一个&lt;code>manifest.json&lt;/code>文件。&lt;code>manifest.json&lt;/code>内容可以分为三类，Required，Recommended和Optional。&lt;/p>
&lt;ul>
&lt;li>Required: 必需的，3个
&lt;ul>
&lt;li>&amp;quot;manifest_version&amp;quot;：当前版本为3，现在推荐就写3。&lt;/li>
&lt;li>&amp;quot;name&amp;quot;：开发者定义的扩展名称。&lt;/li>
&lt;li>&amp;quot;version&amp;quot;：开发者扩展的版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Recommended：推荐要有的，4个
&lt;ul>
&lt;li>&amp;quot;action&amp;quot;：使用&lt;code>chrome.action&lt;/code>接口控制Chrome工具栏的扩展动作。工具栏的扩展图标是一定存在的，无论是否有可用的操作。&lt;/li>
&lt;li>&amp;quot;default_locale&amp;quot;：默认语言环境，在有本地化的扩展中是必需的（带&lt;code>_locales&lt;/code>文件夹），如果没有&lt;code>_locales&lt;/code>文件夹，则一定不要写。&lt;/li>
&lt;li>&amp;quot;description&amp;quot;：扩展的简要描述。&lt;/li>
&lt;li>&amp;quot;icons&amp;quot;：&lt;code>{...}&lt;/code>。扩展的图标，总是要求提供128*128的图标，同时最好提供48*48的图标（用于管理页）和16*16的图标。为了保证通用性，最好用&lt;code>png&lt;/code>格式。实际上，即使没有图标，Chome也会给弄个默认的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Optional：可选的，剩余的都是。常用的有：
&lt;ul>
&lt;li>&amp;quot;author&amp;quot;：开发者名称&lt;/li>
&lt;li>&amp;quot;background&amp;quot;：&lt;code>{...}&lt;/code>设置&amp;quot;service_worker&amp;quot;的条目；&lt;/li>
&lt;li>&amp;quot;content_script&amp;quot;：&lt;code>[{...}]&lt;/code>设置&amp;quot;content script&amp;quot;脚本；&lt;/li>
&lt;li>&amp;quot;permissions&amp;quot;：&lt;code>[&amp;quot;...&amp;quot;]&lt;/code>允许的权限；&lt;/li>
&lt;li>&amp;quot;short_name&amp;quot;：扩展的简称（短名）；&lt;/li>
&lt;li>&amp;quot;update_url&amp;quot;: Chrome商店以外的更新地址，在国内很有用；&lt;/li>
&lt;li>&amp;quot;version_name&amp;quot;：扩展版本的名称。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>根据上面的介绍，我们可以写出&amp;quot;hello&amp;quot;扩展的&lt;code>manifest.json&lt;/code>文件。需要指出的是，json文件在JSON5标准之前都&lt;strong>不支持注释&lt;/strong>，因此在真正使用时，需要将注释内容去除。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//Required
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello Extensions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//注意这里是字符，不是数字
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">//Recommended
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;hello.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//点击工具栏扩展图标后显示的弹窗
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;hello_extensions.png&amp;#34;&lt;/span>&lt;span class="c1">//默认图标地址
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c1">// &amp;#34;default_locale&amp;#34; 没有本地化文件，一定不要写
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;My first new extension.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">//&amp;#34;icon&amp;#34;先不写，看看Chrome给的默认的长什么样
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">//Optional
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SurprisedCat&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二步，根据&lt;code>manifest.json&lt;/code>中的配置，我们在根目录下创建&lt;code>hello_extensions.png&lt;/code>图片（图片大家可以根据自己喜好选一个）和&lt;code>hello.html&lt;/code>文件，该文件就是点击工具栏扩展图片后显示的页面文件，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello Extensions&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>我的第一个扩展&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们的文件结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>﹂- hello/
&lt;span class="ln">2&lt;/span> &lt;span class="p">|&lt;/span>-- manifest.json
&lt;span class="ln">3&lt;/span> &lt;span class="p">|&lt;/span>-- hello_extensions.png
&lt;span class="ln">4&lt;/span> ﹂- hello.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存好现有的3个文件，我们先来尝试本地载入扩展看看效果。&lt;/p>
&lt;p>第三步，载入未打包的扩展。&lt;/p>
&lt;ol>
&lt;li>在浏览器URL中输入&lt;code>chrome://extensions&lt;/code>打开扩展设置页面。&lt;/li>
&lt;li>打开页面右上角的“开发者模式”。&lt;/li>
&lt;li>点击页面左上角的“加载已解压的扩展程序”，并在找到刚刚存放三个文件的&lt;code>hello&lt;/code>文件夹。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../../images/chrome_extension_hello_load.png" alt="chrome_extension_hello_load">&lt;/p>
&lt;p>这样我们就载入了自己编写的第一个扩展！我们点击工具栏就可以发现自己编写的扩展已经运行了，单击&amp;quot;hello&amp;quot;扩展，就弹出了&lt;code>hello.html&lt;/code>中设置的内容。效果如下：&lt;/p>
&lt;p>&lt;img src="../../images/chrome_hello_extensions_demo.png" alt="hello extensions">&lt;/p>
&lt;p>当我们对&lt;code>manifest.json&lt;/code>中的内容进行修改后，比如将其中的名称项&lt;code>&amp;quot;name&amp;quot;: &amp;quot;Hello Extensions of the world!&amp;quot;,&lt;/code>换个名字，还需要重新载入扩展，点击下图圆圈箭头按钮。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_hello_reload.png" alt="chrome_extension_hello_reload">&lt;/p>
&lt;p>可以发现扩展名称已经被修改了。不过，并不是所有的修改都需要重新载入扩展，下表显示了哪些文件修改后需要重载扩展。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">扩展组成部件&lt;/th>
&lt;th style="text-align:center">是否需要重载&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">The manifest&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Service worker&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Content Scripts&lt;/td>
&lt;td style="text-align:center">是 (包括原页面)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">The popup&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Options page&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Other extension HTML pages&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="调试扩展">调试扩展&lt;/h2>
&lt;p>在开发期时，我们一般可以通过两种方式调试代码，一种是自己在代码中添加&lt;code>console.log()&lt;/code>提示错误，另一种使用Chrome的开发者工具来调试。&lt;/p>
&lt;p>我们还用上面&amp;quot;hello extension&amp;quot;的例子，简要介绍两种方式的使用。首先，我们对&lt;code>hello.html&lt;/code>进行修改如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello Extensions&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>我的第一个扩展&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--引入一个新的js文件--&amp;gt;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>引入的&lt;code>popup.js&lt;/code>文件同样放在根目录下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;This is a popup!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存文件后，重载扩展。&lt;/p>
&lt;p>第一个，使用&lt;code>console.log()&lt;/code>。现在的问题就是哪里能到看它的输出结果。我们右键点击工具栏的&amp;quot;hello&amp;quot;扩展，在菜单中点击“审查弹出内容”。在弹出的开发者工具中，选择“console”控制面板，就可以看&lt;code>console.log()&lt;/code>输出的内容了。&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_debug_consolelog.png" alt="chrome_extension_debug_consolelog">&lt;/p>
&lt;p>第二个，如果我们的扩展出现了一些无法运行的错误，就无法使用&lt;code>console.log&lt;/code>调试了，我们可以借助Chrome开发者工具的错误信息，比如在&lt;code>popup.js&lt;/code>中，我们出现了语法错误，少打了一个引号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="nx">This&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">popup&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// ❌ broken code
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们重新载入扩展时，会发现扩展页面多了一个“错误”按钮，点击后出现:&lt;/p>
&lt;p>&lt;img src="../../images/chrome_extension_debug_error.png" alt="chrome_extension_debug_error.png">&lt;/p>
&lt;p>这样就能够根据提示调试代码。注意，这里的错误信息是不会自动删除的，即使后面改对了，之前的错误信息也会保留下来，必需自行手动清除。&lt;/p>
&lt;p>此外，在开发者工具中，也会有错误代码位置的提示。&lt;/p>
&lt;h2 id="关于扩展extensions插件plugins与应用apps">关于扩展（extensions），插件（plugins）与应用（Apps）&lt;/h2>
&lt;p>在Chrome浏览器的发展中，扩展（extensions），插件（plugins）与应用（Apps）三个词都曾出现过。&lt;/p>
&lt;p>不过现在Chrome目前不再提插件这种讲法，而广大用户也常常把插件和扩展当成一回事。严格来讲，扩展是利用浏览器已有的API，进行二次开发，提供新功能，新特性的代码，开发者只是将浏览器已潜在具备但尚未提供的功能组合出来。插件则是由于浏览器本身缺乏相应功能，使用底层内核API开发的新功能，例如过去Chrome不支持Flash，因此有Flash插件。从开发者角度来看，插件的开发难度是远大于扩展的。从用户角度看，二者都是提供了新功能，因此常常认为两者差不多。随着Google公司在互联网领域的话语权逐步增强和Chrome浏览器的逐渐完善，目前我们可以说Chrome已经不缺重要的功能，因此插件这个东西就逐渐不需要了。现在更多的是根据用户自身需求所定制化的扩展，目前用户所说的Chrome浏览器插件，实际上都是指Chrome的扩展，或者连在一起称为Chrome扩展插件。Chrome商店里提供的也都是Chrome扩展。&lt;/p>
&lt;p>而Chrome应用（App）则是Google竞争失败的产物。2010年左右，Google公司提出了一个非常有魄力的想法，将Chrome浏览器做成一个像操作系统一样的大平台（实际上Google确实做到了），其他应用都跑在Chrome这个平台上，就是Chrome Apps。但是，用户们显然对这个想法不买账，而且随着网络前端能力的增强，Chrome应用变得很鸡肋。于是在2016 年，Google宣布会逐渐抛弃Chrome App，进一步拥抱网页平台。最终2022年6月，谷歌所有客户终止了Chrome App的支持。Chrome App已经陷入历史的尘埃中。&lt;/p>
&lt;p>最终，只有轻量级的Chrome扩展留存下来，并且得到了越来越多用户的喜爱。后来，微软的IE和后续的Edge都被Chrome打的溃不成军，不得已放弃了自己的浏览器内核，在2018年采用了Chromium的Blink内核，这使得Chrome扩展也能够运行在Edge浏览器上，可以说是Chrome扩展的高光时刻了。至于以后，微软会不会反水，再弄一个自己的内核分庭抗礼，让我们拭目以待。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-js高阶解析</title><link>https://surprisedcat.github.io/projectnotes/javascript-js%E9%AB%98%E9%98%B6%E8%A7%A3%E6%9E%90/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-js%E9%AB%98%E9%98%B6%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h2 id="js高阶解析---omit-in-toc---">js高阶解析&lt;!-- omit in toc -->&lt;/h2>
&lt;p>关于JavaScript的一些高阶问题，建议在入门之后当作Q&amp;amp;A查看。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E8%AF%AD%E6%B3%95%E5%BD%A2%E5%BC%8F">语法形式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F">变量与作用域&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87">变量提升&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E8%A6%86%E7%9B%96">作用域的覆盖&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#null%E4%B8%8Eundefined">&lt;code>null&lt;/code>与&lt;code>undefined&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8E">&lt;code>==&lt;/code>与&lt;code>===&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#for--of-%E5%92%8C-for--in-%E9%81%8D%E5%8E%86">&lt;code>for ... of&lt;/code> 和 &lt;code>for ... in&lt;/code> 遍历&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95">类中的方法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98">&lt;code>this&lt;/code>的指向问题&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%B1%BB%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B">类中属性的类型&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1prototype">原型对象prototype&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="语法形式">语法形式&lt;/h2>
&lt;p>JavaScript的语法与C/C++，Java类似，通过&lt;code>;、{...}&lt;/code>来分割语句，区分大小写，而非像Python一样通过缩进。Javascript解析器对缩进没有讲究。但是，JavaScript并不强制要求在每个语句的结尾加&lt;code>;&lt;/code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上&lt;code>;&lt;/code>，但是自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。因此在实际编程中，&lt;strong>强烈建议&lt;/strong>像C/C++，Java一样严谨使用等号。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">test1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>两个函数&lt;code>test1(par),test2(par)&lt;/code>的区别就是&lt;code>return&lt;/code>语句是否分成了两行写。但是执行结果却不一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>test1: &lt;span class="nb">true&lt;/span>
&lt;span class="ln">2&lt;/span>test2: undefined
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因就在在引擎执行时，在&lt;code>test2&lt;/code>函数的&lt;code>return&lt;/code>后面自动加了&lt;code>;&lt;/code>，在执行时就成了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">//自动加了分号，函数到此处直接返回
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此&lt;code>test2&lt;/code>的返回结果就是&lt;code>undefined&lt;/code>。&lt;/p>
&lt;h2 id="变量与作用域">变量与作用域&lt;/h2>
&lt;p>JavaScript提供了三类变量声明方法。&lt;/p>
&lt;ol>
&lt;li>直接赋值使用，&lt;code>x=100&lt;/code>；&lt;/li>
&lt;li>&lt;code>var&lt;/code>声明，&lt;code>var x = 100&lt;/code>；&lt;/li>
&lt;li>&lt;code>let, const&lt;/code>声明，&lt;code>let x = 100; const y = 3.14;&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>它们三者各有区别。&lt;/p>
&lt;p>首先，当我们使用方式1，直接给未声明变量赋值时，所产生的变量都是&lt;strong>全局变量&lt;/strong>！无论是在函数体内，还是函数体外，只要使用这种声明方式的都是全局变量。&lt;/p>
&lt;p>当我们使用方式2中&lt;code>var&lt;/code>声明时，在函数外部声明就是全局变量；在函数内部声明就是局部变量。&lt;code>var&lt;/code>变量可以重新声明和修改。需要注意的是，&lt;code>var&lt;/code>的局部变量范围是整个函数体，不像C/C++，Java那样作用域是代码块。&lt;/p>
&lt;p>为了实现更细&lt;strong>代码块级别&lt;/strong>的作用域划分，在ES6中引入了&lt;code>let&lt;/code>和&lt;code>const&lt;/code>。块是由&lt;code>{}&lt;/code>界定的代码块，匹配的大括号中就是一个块，代码块可以嵌套定义。大括号内的任何内容都包含在一个块级作用域中，而&lt;code>let&lt;/code>和&lt;code>const&lt;/code>声明的变量都只在对应的代码块中有效。如果在全局中使用&lt;code>let&lt;/code>那么定义的就是全局变量。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">times&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;say Hello&amp;#34;
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// hello is not defined
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到在其代码块（定义它的花括号）之外使用&lt;code>hello&lt;/code>会返回错误。这是因为&lt;code>let&lt;/code>变量是块范围的。&lt;/p>
&lt;p>就像&lt;code>var&lt;/code>一样，用&lt;code>let&lt;/code>声明的变量可以在其范围内被修改。但与&lt;code>var&lt;/code>不同的是，&lt;code>let&lt;/code>变量无法在其作用域内被重新声明。 来看下面的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//正常执行
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是重新给&lt;code>greeting&lt;/code>变量赋值，修改时允许的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// SyntaxError: Identifier &amp;#39;greeting&amp;#39; has already been declared
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两个&lt;code>let&lt;/code>相当于重新声明&lt;code>greeting&lt;/code>，会报错：变量已经被声明。但是，如果在不同的作用域中定义了相同的变量，则不会有错误，这属于作用域的覆盖。这个事实说明：使用&lt;code>let&lt;/code>，是比&lt;code>var&lt;/code>更好的选择。当使用&lt;code>let&lt;/code>时，你不必费心思考变量的名称，因为变量仅在其块级作用域内存在。现在推荐使用&lt;code>let&lt;/code>来声明变量。&lt;/p>
&lt;p>&lt;code>const&lt;/code>声明的变量保持常量值，和&lt;code>let&lt;/code>一样也是在对应代码块内有效。&lt;code>const&lt;/code>不能被修改并且不能被重新声明，因此每个&lt;code>const&lt;/code>声明都必须在声明时进行初始化。虽然&lt;code>const&lt;/code>声明的变量不可以修改，但是可以修改&lt;code>const&lt;/code>对象的属性，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">times&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="c1">//声明const对象
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">words&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">number&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;five&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// error: Assignment to constant variable.
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nx">greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//可以修改其属性
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="变量提升">变量提升&lt;/h3>
&lt;p>变量提升是JavaScript的一种机制：在执行代码之前，&lt;strong>变量和函数声明&lt;/strong>会移至其作用域的顶部。注意，仅仅是声明，赋值操作并不会提升。这意味着如果我们这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">greeter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生面的代码会被解释为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">greeter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// greeter is undefined
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">greeter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>var&lt;/code>,&lt;code>let&lt;/code>,&lt;code>const&lt;/code>都会被提升，区别是&lt;code>var&lt;/code>提升到顶部后使用&lt;code>undefined&lt;/code>值对其进行初始化。用&lt;code>let&lt;/code>声明的变量被提升到作用域的顶部时不会对值进行初始化，因此，如果你尝试在声明前使用&lt;code>let&lt;/code>变量，则会收到&lt;code>Reference Error&lt;/code>。&lt;code>const&lt;/code>声明也会被提升到顶部，但是没有初始化，最好将&lt;code>const&lt;/code>声明都放到代码顶部。&lt;/p>
&lt;h3 id="作用域的覆盖">作用域的覆盖&lt;/h3>
&lt;p>当全局变量跟局部变量重名时，局部变量的作用域会覆盖掉全局变量的作用域，当离开局部变量的作用域后，又重回到全局变量的作用域。如果代码块内的局部变量与外部局部变量重名，代码块内局部变量作用域优先级最高。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是全局变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是局部变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是局部变量
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是块内局部变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是块内局部变量
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是局部变量
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//结果：我是全局变
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>我是局部变量
&lt;span class="ln">2&lt;/span>我是块内局部变量
&lt;span class="ln">3&lt;/span>我是局部变量
&lt;span class="ln">4&lt;/span>我是全局变量
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="null与undefined">&lt;code>null&lt;/code>与&lt;code>undefined&lt;/code>&lt;/h2>
&lt;p>目前，&lt;code>null&lt;/code>和&lt;code>undefined&lt;/code>基本是同义的，只有一些细微的差别。&lt;/p>
&lt;p>&lt;code>null&lt;/code>表示&lt;strong>没有对象，即该处不应该有值&lt;/strong>。典型用法是：&lt;/p>
&lt;ol>
&lt;li>作为函数的参数，表示该函数的参数不是对象。&lt;/li>
&lt;li>作为对象原型链的终点。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getPrototypeOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1">// null
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>undefined&lt;/code>表示&lt;strong>缺少值，就是此处应该有一个值，但是还没有定义&lt;/strong>。典型用法是：&lt;/p>
&lt;ol>
&lt;li>变量被声明了，但没有赋值时，就等于&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>调用函数时，应该提供的参数没有提供，该参数等于&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>对象没有赋值的属性，该属性的值为&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>函数没有返回值时，默认返回&lt;code>undefined&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="与">&lt;code>==&lt;/code>与&lt;code>===&lt;/code>&lt;/h2>
&lt;p>JavaScript在设计时，有两种比较运算符：&lt;/p>
&lt;p>第一种是&lt;code>==&lt;/code>比较，它会&lt;strong>自动转换数据类型再比较&lt;/strong>，很多时候，会得到非常诡异的结果；&lt;/p>
&lt;p>第二种是&lt;code>===&lt;/code>比较，它不会自动转换数据类型，如果数据类型不一致，返回&lt;code>false&lt;/code>，如果一致，再比较。&lt;/p>
&lt;p>由于JavaScript这个设计缺陷，不要使用&lt;code>==&lt;/code>比较，始终坚持使用&lt;code>===&lt;/code>比较。&lt;/p>
&lt;p>另一个例外是&lt;code>Na&lt;/code>N这个特殊的Number与所有其他值都不相等，包括它自己：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kc">NaN&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">NaN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>唯一能判断NaN的方法是通过&lt;code>isNaN()&lt;/code>函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">isNaN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">NaN&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意浮点数的相等比较：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">0.0000001&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// true`
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于&lt;code>Array&lt;/code>,&lt;code>Object&lt;/code>等高级类型，&lt;code>==&lt;/code>和&lt;code>===&lt;/code>是没有区别的进行 &amp;quot;指针地址&amp;quot; 比较。&lt;/p>
&lt;h2 id="for--of-和-for--in-遍历">&lt;code>for ... of&lt;/code> 和 &lt;code>for ... in&lt;/code> 遍历&lt;/h2>
&lt;p>&lt;code>for ... in&lt;/code>是ES5标准引入的语法，用于&lt;strong>遍历键值对对象&lt;/strong>（可遍历对象，数组，字符串，&lt;code>map&lt;/code>等），输出的是键（key）。此外，其不仅可以遍历数字键名，还会遍历原型（prototype）和用户手动添加的其他键。&lt;/p>
&lt;p>&lt;code>for ... of&lt;/code>是ES6标准引入的语法，用于拥有&lt;strong>迭代器对象的集合遍历&lt;/strong>（可遍历对象，数组，字符串，&lt;code>map&lt;/code>，&lt;code>set&lt;/code>，&lt;code>arguments&lt;/code>对象，&lt;strong>普通对象没有迭代器无法遍历&lt;/strong>）输出的是值（value）。&lt;/p>
&lt;p>此外，还可以使用可迭代对象内置的&lt;code>forEach&lt;/code>方法（ES5.1标准引入），它接收一个函数，每次迭代就自动回调该函数。&lt;/p>
&lt;h2 id="类中的方法">类中的方法&lt;/h2>
&lt;p>在一个对象中绑定函数，称为这个对象的方法。绑定到对象上的函数称为方法，和普通函数也没啥区别。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">xiaoming&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;小明&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nx">birth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1990&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">birth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，&lt;code>age()&lt;/code>就是对象&lt;code>xiaoming&lt;/code>的方法，使用时直接调用即可&lt;code>xiaoming.age()&lt;/code>。&lt;/p>
&lt;p>它在内部使用了一个&lt;code>this&lt;/code>关键字，这个东东是什么？在一个方法内部，&lt;code>this&lt;/code>是一个特殊变量，&lt;strong>它始终指向当前对象&lt;/strong>，也就是&lt;code>xiaoming&lt;/code>这个变量。所以，&lt;code>this.birth&lt;/code>可以拿到&lt;code>xiaoming&lt;/code>的&lt;code>birth&lt;/code>属性。&lt;/p>
&lt;h3 id="this的指向问题">&lt;code>this&lt;/code>的指向问题&lt;/h3>
&lt;p>总结：一般情况下，&lt;code>this&lt;/code>指向生成实例时的上一级对象。难点就是判断何时生成对象实例。&lt;/p>
&lt;ol>
&lt;li>&lt;code>this&lt;/code>永远指向一个对象；&lt;/li>
&lt;li>&lt;code>this&lt;/code>的指向完全取决于函数调用时的位置，而非声明时的位置；&lt;/li>
&lt;/ol>
&lt;h2 id="箭头函数">箭头函数&lt;/h2>
&lt;p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 像Lambda表达式，是一种语法糖，简化匿名函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的箭头函数相当于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>箭头函数有两种格式，一种像上面的，只包含一个表达式，连大括号&lt;code>{ ... }&lt;/code>和&lt;code>return&lt;/code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略大括号&lt;code>{ ... }&lt;/code>和&lt;code>return&lt;/code>。&lt;/p>
&lt;h2 id="面向对象编程">面向对象编程&lt;/h2>
&lt;p>JavaScript的面向对象编程和大多数其他语言如Java、C#的面向对象编程都不太一样。如果你熟悉Java或C#，很好，你一定明白面向对象的两个基本概念：类（对象的类型模板）和实例（根据类创建的对象）。不过，在JavaScript中，这个概念需要改一改。JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">class1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__proto__&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">class2&lt;/span>&lt;span class="c1">//低版本浏览器可能不适用
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表示&lt;code>class1&lt;/code>通过&lt;code>class2&lt;/code>来生成新的对象。对于低版本浏览器不适用的场景，建议使用&lt;code>Object.create()&lt;/code>方法可以传入一个原型对象，并创建一个基于该原型的新对象，但是新对象什么属性都没有。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">class1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">class2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//默认class1的所有值为空
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。&lt;/p>
&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;p>&lt;code>new&lt;/code>一个函数，就可以把这个函数当成构造函数使用。&lt;/p>
&lt;h3 id="类中属性的类型">类中属性的类型&lt;/h3>
&lt;p>由于Javascript在设计之处并不是面向对象的语言，因此在类设计方面没有现在常见的特性例如访问级别修饰符（&lt;code>public&lt;/code>,&lt;code>private&lt;/code>,&lt;code>protected&lt;/code>）,读方法(&lt;code>getter&lt;/code>)和写方法(&lt;code>setter&lt;/code>)，属性的枚举等等。尤其在Java语言中出现的Javabean规范被证明对减少面向对象编程中的BUG具有积极意义，这促使其他编程语言包括Javascript也想方设法实现类似的功能，其中属性类型就是此方面的实践。为了表示方便，标准中一般使用&lt;code>[[Prooerty]]&lt;/code>来表示类中内容的属性，本文中依照标准的表示方法使用。&lt;/p>
&lt;p>JavaScript属性类型分为两种，&lt;strong>数据属性和访问器属性&lt;/strong>。最开始Javascript只有数据属性，基本上一般教程里看到的类属性都是数据属性；在ES5标准中，为了增加数据的封装性和可控性，又增加了访问器属性（Accessor）。访问器属性更类似于面向对象编程中成员属性的&lt;code>get()&lt;/code>,&lt;code>set()&lt;/code>函数，在这些函数中，我们能够对数据的读写进行一定控制。&lt;/p>
&lt;p>我们先看&lt;strong>数据属性&lt;/strong>，其包含四个特性：&lt;/p>
&lt;ol>
&lt;li>&lt;code>[[Configurable]]&lt;/code>：可配置性。表示属性是否可以通过&lt;code>delete&lt;/code>删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。
&lt;ul>
&lt;li>例外，当&lt;code>[[Configurable]]&lt;/code>为&lt;code>false&lt;/code>时，若&lt;code>[[Writable]]&lt;/code>为&lt;code>true&lt;/code>，我们可以修改&lt;code>[[value]]&lt;/code>的值或将&lt;code>[[Writable]]&lt;/code>改为&lt;code>false&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>[[Enumerable]]&lt;/code>：可遍历性。表示属性是否可以通过&lt;code>for-in&lt;/code>循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。
&lt;ul>
&lt;li>由于Javascript中&lt;code>Array&lt;/code>也是对象，因此我们给&lt;code>Array&lt;/code>自定义的属性也会在&lt;code>for-in&lt;/code>循环中带出来。目前建议数组&lt;code>Array&lt;/code>的数据遍历用&lt;code>for-of&lt;/code>循环。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>[[Writable]]&lt;/code>：是否可写。表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。&lt;/li>
&lt;li>&lt;code>[[Value]]&lt;/code>：包含属性实际的值。未初始化的默认值为 &lt;code>undefined&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>在上面四个数据属性中，最容易理解的是&lt;code>[[value]]&lt;/code>，我们用各种方法初始化对象就是设置属性的&lt;code>[[value]]&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 数据属性name的[[value]]是Alice
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">person2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 数据属性name的[[value]]是Bob
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后对这个值的任何修改都会保存在&lt;code>[[value]]&lt;/code>这个特性。相对于 &lt;code>[[value]]&lt;/code>可以方便地修改，剩下三个数据属性的特性并不能直接修改，就必须使用&lt;code>Object.defineProperty()&lt;/code>方法。这个方法接收 3 个参数：&lt;strong>要给其添加属性的对象、属性的名称和一个特性描述符对象&lt;/strong>。最后一个参数，即描述符对象上的属性可以包含：&lt;code>configurable&lt;/code>、&lt;code>enumerable&lt;/code>、&lt;code>writable&lt;/code>和&lt;code>value&lt;/code>，跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。&lt;/p>
&lt;p>需要指出，区别于特性初始化默认为&lt;code>true&lt;/code>的情形，在调用&lt;code>Object.defineProperty()&lt;/code>时，&lt;code>configurable&lt;/code>、&lt;code>enumerable&lt;/code>和&lt;code>writable&lt;/code>的值如果不指定，则都默认为&lt;code>false&lt;/code>。多数情况下，可能都不需要&lt;code>Object.defineProperty()&lt;/code>提供的这些强大的设置，但要理解 JavaScript对象，就要理解这些概念。&lt;/p>
&lt;p>例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//数值上等同于 person.name = &amp;#34;Bill&amp;#34;;person.income=10000;person.tax=2000;person.gender=&amp;#34;male&amp;#34;。但是属性特性不同
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;income&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;tax&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;gender&amp;#39;&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;male&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//for-in 遍历
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">par&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Tax: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tax&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1">//尝试修改gender属性与income属性
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;尝试修改gender属性与income属性&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">income&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Income: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">income&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;female&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gender: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gender&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显示结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>name:Bill
&lt;span class="ln">2&lt;/span>income:10000
&lt;span class="ln">3&lt;/span>gender:male
&lt;span class="ln">4&lt;/span>Tax: &lt;span class="m">2000&lt;/span>
&lt;span class="ln">5&lt;/span>尝试修改gender属性与income属性
&lt;span class="ln">6&lt;/span>Income: &lt;span class="m">20000&lt;/span>
&lt;span class="ln">7&lt;/span>Gender: male
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于没有将&lt;code>person.tax&lt;/code>的可遍历&lt;code>[[enumerable]]&lt;/code>设置为&lt;code>true&lt;/code>，因此js采用默认值&lt;code>false&lt;/code>，在使用&lt;code>for-in&lt;/code>遍历时，不会显示&lt;code>person.tax&lt;/code>。不过我们依旧可以使用&lt;code>person.tax&lt;/code>来访问。由于&lt;code>person.income&lt;/code>的&lt;code>[[writable]]&lt;/code>是&lt;code>true&lt;/code>，我们可以顺利地修改其值。然而&lt;code>person.gender&lt;/code>的&lt;code>[[writable]]&lt;/code>是&lt;code>false&lt;/code>，这个属性的值就不能再修改了，在非严格模式下尝试给这个属性重新赋值会被忽略。在严格模式下，尝试修改只读属性的值会抛出错误。&lt;/p>
&lt;h3 id="原型对象prototype">原型对象prototype&lt;/h3>
&lt;p>在ES6中新增了面向对象编程的模式，支持了&lt;code>Class&lt;/code>,&lt;code>extends&lt;/code>等面向对象关键字。不过在ES6之前，JavaScript也是能够实现面向对象编程的，用的就是&lt;strong>原型对象protptype&lt;/strong>，新增的功能不过是对既有功能的封装，让其更符合现代编程模式。&lt;/p>
&lt;p>javascript中的&lt;code>prototype&lt;/code>更像是面向对象设计中的类，&lt;code>prototype&lt;/code>属性指向的是原型类，构造函数的原型&lt;code>prototype&lt;/code>是这个&lt;code>prototype&lt;/code>对象，原型对象的&lt;code>constructor&lt;/code>指向构造函数。所以说&lt;code>prototype&lt;/code>扮演了js中类&lt;code>class&lt;/code>的角色，对象与类直接有关系，构造函数也和类直接有关系，实例对象与构造函数通过类间接联系在一起。&lt;/p>
&lt;p>构造函数通过&lt;code>prototype&lt;/code>属性指向原型对象，实例通过&lt;code>__proto__&lt;/code>属性指向原型对象。关系如下图：&lt;/p>
&lt;p>&lt;img src="../../images/js%E5%8E%9F%E5%9E%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B%E7%B1%BB%E6%AF%94.png" alt="js原型构造函数实例类比">&lt;/p>
&lt;p>上图展示了&lt;code>Person&lt;/code>构造函数、&lt;code>Person&lt;/code>的原型对象和&lt;code>Person&lt;/code>现有两个实例之间的关系。注意，&lt;code>Person.prototype&lt;/code>指向原型对象，而&lt;code>Person.prototype.contructor&lt;/code>指回&lt;code>Person&lt;/code>构造函数。原型对象包含&lt;code>constructor&lt;/code>属性和其他后来添加的属性。&lt;code>Person&lt;/code>的两个实例&lt;code>person1&lt;/code>和&lt;code>person2&lt;/code>都只有一个内部属性指回&lt;code>Person.prototype&lt;/code>，而且两者都与构造函数没有直接联系。另外要注意，虽然这两个实例都没有属性和方法，但&lt;code>person1.sayName()&lt;/code>、&lt;code>person2.sayName()&lt;/code>可以正常调用。这是由于对象属性查找机制的原因。&lt;/p></description></item></channel></rss>
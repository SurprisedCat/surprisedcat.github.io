<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projectnotes on SurprisedCat</title><link>https://surprisedcat.github.io/projectnotes/</link><description>Recent content in Projectnotes on SurprisedCat</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2020–2021, SurprisedCat; all rights reserved.</copyright><lastBuildDate>Thu, 26 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://surprisedcat.github.io/projectnotes/index.xml" rel="self" type="application/rss+xml"/><item><title>hadoop-HDFS集群部署</title><link>https://surprisedcat.github.io/projectnotes/hadoop-hdfs%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/hadoop-hdfs%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h2 id="hdfs集群部署---omit-in-toc---">HDFS集群部署&lt;!-- omit in toc -->&lt;/h2>
&lt;p>本篇笔记使用的Hadoop版本为3.4.1，下载链接&lt;a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.4.1/hadoop-3.4.1.tar.gz">hadoop-3.4.1.tar.gz&lt;/a>。&lt;/p>
&lt;p>根据前面的笔记，部署HDFS的3台虚拟机配置如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">节点&lt;/th>
&lt;th style="text-align:center">CPU&lt;/th>
&lt;th style="text-align:center">内存&lt;/th>
&lt;th style="text-align:center">服务&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">node1&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">4GB&lt;/td>
&lt;td style="text-align:center">NameNode, DataNode, SecondaryNameNode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">node2&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">2GB&lt;/td>
&lt;td style="text-align:center">DataNode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">node3&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">2GB&lt;/td>
&lt;td style="text-align:center">DataNode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Hadoop HDFS的角色包含：&lt;/p>
&lt;ul>
&lt;li>NameNode，主节点管理者&lt;/li>
&lt;li>DataNode，从节点工作者&lt;/li>
&lt;li>SecondaryNameNode，主节点辅助&lt;/li>
&lt;/ul>
&lt;p>我们将使用&lt;code>node1&lt;/code>作为NameNode主节点，将会部署更多的软件。本质上，HDFS的三种角色都是作为进程运行在主机上。hadoop-3.4.1.tar.gz安装包中包含了3种角色的程序，我们将其分别上传到3台虚拟机&lt;code>node1&lt;/code>，&lt;code>node2&lt;/code>，&lt;code>node3&lt;/code>。具体操作步骤（以&lt;code>node1&lt;/code>为例，以&lt;code>root&lt;/code>用户操作）如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 1. 上传Hadoop安装报到node1节点中，本人使用的是MobaXterm直接上传，并切换到上传所在目录&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 2. 解压缩安装包到/export/server中&lt;/span>
&lt;span class="ln"> 3&lt;/span>tar -zxvf hadoop-3.4.1.tar.gz -C /export/server
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># 3. 构建软连接方便操作&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">cd&lt;/span> /export/server
&lt;span class="ln"> 7&lt;/span>ln -s /export/server/hadoop-3.4.1 hadoop
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 进入hadoop安装包准备安装&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">cd&lt;/span> hadoop
&lt;span class="ln">11&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>hadoop-搭建Hadoop虚拟机环境</title><link>https://surprisedcat.github.io/projectnotes/hadoop-%E6%90%AD%E5%BB%BAhadoop%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/hadoop-%E6%90%AD%E5%BB%BAhadoop%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#vmware-%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE">VMware 虚拟网卡设置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%88%9B%E5%BB%BA%E5%9F%BA%E7%A1%80%E8%99%9A%E6%8B%9F%E6%9C%BA">创建基础虚拟机&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA">克隆虚拟机&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BB%E6%9C%BA%E5%90%8Dipssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95">主机名、IP、SSH免密登录&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%B8%8Eip%E8%AE%BE%E7%BD%AE">主机名与IP设置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95">SSH免密登录&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#jdk%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2">JDK环境部署&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%98%B2%E7%81%AB%E5%A2%99selinux%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5">防火墙、SELinux、时间同步&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8Cselinux">关闭防火墙和SELinux&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5">时间同步&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BF%AB%E7%85%A7">设置虚拟机快照&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="hadoop虚拟机集群的设置---omit-in-toc---">Hadoop虚拟机集群的设置&lt;!-- omit in toc -->&lt;/h2>
&lt;p>本笔记主要记录黑马程序Hadoop课程对应的，在Windows 11上通过3台虚拟机搭建Hadoop平台的笔记。需要的软件如下：&lt;/p>
&lt;ul>
&lt;li>VMware workstation 17.6&lt;/li>
&lt;li>Oracle JDK 8 [https://download.oracle.com/otn/java/jdk/8u421-b09/d8aa705069af427f9b83e66b34f5e380/jdk-8u421-linux-x64.tar.gz]&lt;/li>
&lt;li>Centos 7.6 [https://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso] 可能需要翻墙。&lt;/li>
&lt;li>Hadoop 3.4&lt;/li>
&lt;/ul>
&lt;h2 id="vmware-虚拟网卡设置">VMware 虚拟网卡设置&lt;/h2>
&lt;p>首先，点击&lt;code>编辑&lt;/code>，打开&lt;code>虚拟网络编辑器&lt;/code>，选择&lt;code>VMnet8&lt;/code>按照如下网络设置虚拟网络网段和网关。&lt;/p>
&lt;ul>
&lt;li>子网IP：&lt;code>192.168.88.0&lt;/code>，子网掩码&lt;code>255.255.255.0&lt;/code>&lt;/li>
&lt;li>网关IP：&lt;code>192.168.88.2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png" alt="Hadoop-VMware-虚拟网络设置">&lt;/p>
&lt;h2 id="创建基础虚拟机">创建基础虚拟机&lt;/h2>
&lt;p>由于VMware提供了虚拟机克隆功能，因此我们不必一个个创建虚拟机，而是通过先创建一个基础虚拟机，然后再克隆成多个虚拟机再微调的方式。&lt;/p>
&lt;p>点击&lt;code>创建新的虚拟机&lt;/code>-&amp;gt;选择&lt;code>典型(推荐)&lt;/code>-&amp;gt;填入Centos 7.6光盘镜像所在位置，如下图&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA1.png" alt="Hadoop-VMware-虚拟机创建1">&lt;/p>
&lt;p>点击&lt;code>下一步&lt;/code>，之后设置虚拟机的账号，密码，再点击下一步。并选择虚拟机存放位置（最好选一个空间比较大的磁盘）。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA2.png" alt="Hadoop-VMware-虚拟机创建2">&lt;/p>
&lt;p>基础虚拟机磁盘可以先设置为20G，之后如果需要可以随时扩容，这也是使用虚拟机的好处。接下来，都直接点击&lt;code>下一步&lt;/code>，不用更改什么，点击&lt;code>完成&lt;/code>后，即开机了Centos系统的安装，其安装过程是自动化的。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA3.png" alt="Hadoop-VMware-虚拟机创建3">&lt;/p>
&lt;p>等待系统安装好后，就完成了基础虚拟机的创建。&lt;/p>
&lt;h2 id="克隆虚拟机">克隆虚拟机&lt;/h2>
&lt;p>我们目前一共需要3台虚拟机，来构建Hadoop集群。VMware可以直接通过现有的虚拟克隆出其他虚拟机，而不用重复创建。&lt;/p>
&lt;p>克隆虚拟机之前，先用保证被克隆的虚拟机处于关闭状态。然后在已建立好的虚拟机上右键菜单-&amp;gt;&lt;code>管理&lt;/code>-&amp;gt;&lt;code>克隆&lt;/code>。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%861.png" alt="Hadoop-VMware-虚拟机克隆1">&lt;/p>
&lt;p>克隆选项分别是：克隆自&lt;code>虚拟机中的当前状态&lt;/code>--&amp;gt;&lt;code>创建完整克隆&lt;/code>--&amp;gt;虚拟机名称分别为&lt;code>node1&lt;/code>,&lt;code>node2&lt;/code>,&lt;code>node3&lt;/code>，虚拟机位置分别为&lt;code>D:\VMware\bigdata\node1&lt;/code>,&lt;code>D:\VMware\bigdata\node2&lt;/code>,&lt;code>D:\VMware\bigdata\node3&lt;/code>。&lt;/p>
&lt;p>为了方便管理，我们可以在VMware资源管理栏添加一个文件夹叫&lt;code>大数据集群&lt;/code>，把node1，node2，node3三个虚拟机移入文件夹中。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%862.png" alt="Hadoop-VMware-虚拟机克隆2">&lt;/p>
&lt;p>克隆好3台虚拟机后，我们设置以下3台虚拟机的内存。我们计划使用node1作为master节点，运行更多功能，所以将其内存大小设置为4GB，其他为2GB。如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">节点&lt;/th>
&lt;th style="text-align:center">CPU&lt;/th>
&lt;th style="text-align:center">内存&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">node1&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">4GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">node2&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">2GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">node3&lt;/td>
&lt;td style="text-align:center">1 core&lt;/td>
&lt;td style="text-align:center">2GB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>下图中以node1为例，其他两个节点操作方法一样。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%863.png" alt="Hadoop-VMware-虚拟机克隆3">&lt;/p>
&lt;p>这样我们就设置好了Hadoop的虚拟机集群。&lt;/p>
&lt;h2 id="主机名ipssh免密登录">主机名、IP、SSH免密登录&lt;/h2>
&lt;p>为了方便Hadoop集群中虚拟机的通信，我们将修改主机名以及设置固定IP。同时将使用密钥登陆的方式实现主从之间的免密登录。&lt;/p>
&lt;h3 id="主机名与ip设置">主机名与IP设置&lt;/h3>
&lt;p>开启node1，右键选择&lt;code>Open Terminal&lt;/code>。修改主机名为&lt;code>node1&lt;/code>，并修改固定IP为&lt;code>192.168.88.131&lt;/code>，最后重启网卡。具体命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 切换到root(否则无权限)&lt;/span>
&lt;span class="ln"> 2&lt;/span>su - root
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 修改主机名&lt;/span>
&lt;span class="ln"> 5&lt;/span>hostnamectl set-hostname node1
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 设置IP地址&lt;/span>
&lt;span class="ln"> 8&lt;/span>vim /etc/sysconfig/network-scripts/ifcfg-ens33
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 1. 修改IP获取方式为静态&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nv">BOOTPROTO&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;static&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c1"># 2. 在文本末尾添加IP地址相关信息&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">IPADDR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.88.131&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">NETMASK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;255.255.255.0&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nv">GATEWAY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.88.2&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nv">DNS1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;192.168.88.2&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c1">#重启网卡&lt;/span>
&lt;span class="ln">18&lt;/span>systemctl restart network
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># 设置hosts文件，方便DNS解析&lt;/span>
&lt;span class="ln">21&lt;/span>vim /etc/hosts
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="c1"># 添加以下内容&lt;/span>
&lt;span class="ln">24&lt;/span>192.168.88.131 node1
&lt;span class="ln">25&lt;/span>192.168.88.132 node2
&lt;span class="ln">26&lt;/span>192.168.88.133 node3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的操作启动&lt;code>node2&lt;/code>和&lt;code>node3&lt;/code>，对应的名称为&lt;code>node2&lt;/code>,&lt;code>node3&lt;/code>，IP为&lt;code>192.168.88.132&lt;/code>,&lt;code>192.168.88.133&lt;/code>。&lt;/p>
&lt;p>黑马的教程中，还需要将windows实体机的&lt;code>hosts&lt;/code>文件也添加上DNS解析项，不知道是不是必须的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># windows中C:\Windows\System32\drivers\etc\hosts&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 在文本最后添加&lt;/span>
&lt;span class="ln">3&lt;/span>192.168.88.131 node1
&lt;span class="ln">4&lt;/span>192.168.88.132 node2
&lt;span class="ln">5&lt;/span>192.168.88.133 node3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssh免密登录">SSH免密登录&lt;/h3>
&lt;p>后续安装的集群画软件，多数需要远程登录以及远程执行命令，为了方便起见，我们让3台虚拟机之间可以相互免密登录。我们不仅需要root节点的相互登录，同时创建了一个&lt;code>hadoop&lt;/code>用户，让各个节点的&lt;code>hadoop&lt;/code>用户也可以免密登录。下面是&lt;code>node1&lt;/code>中的操作，其他两个节点也类似。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 生成密钥，一路回车&lt;/span>
&lt;span class="ln"> 2&lt;/span>ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 将密钥复制到各个节点上（包括自己）&lt;/span>
&lt;span class="ln"> 5&lt;/span>ssh-copy-id node1
&lt;span class="ln"> 6&lt;/span>ssh-copy-id node2
&lt;span class="ln"> 7&lt;/span>ssh-copy-id node3
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 创建单独的hadoop用户，以备装以后的软件&lt;/span>
&lt;span class="ln">10&lt;/span>useradd hadoop
&lt;span class="ln">11&lt;/span>&lt;span class="c1"># 设置密码&lt;/span>
&lt;span class="ln">12&lt;/span>passwd hadoop
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 切换到hadoop用户,执行免密登录&lt;/span>
&lt;span class="ln">15&lt;/span>su - hadoop
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># 生成密钥，一路回车&lt;/span>
&lt;span class="ln">17&lt;/span>ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span>
&lt;span class="ln">18&lt;/span>ssh-copy-id node1
&lt;span class="ln">19&lt;/span>ssh-copy-id node2
&lt;span class="ln">20&lt;/span>ssh-copy-id node3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，免密需要退出后重新登录才能生效。另外，上述命令是使得各虚拟机&lt;code>root&lt;/code>用户之前，&lt;code>hadoop&lt;/code>用户之前可以相互免密登录。&lt;code>root&lt;/code>用户登录其他&lt;code>hadoop&lt;/code>用户，或者&lt;code>hadoo&lt;/code>p登录&lt;code>root&lt;/code>用户还是需要密码的。&lt;/p>
&lt;h2 id="jdk环境部署">JDK环境部署&lt;/h2>
&lt;p>Hadoop很多软件是需要Java运行环境的，目前推荐使用JDK 8。首先将下载好的JDK 8版本压缩包（jdk-18.0.2.1_linux-x64_bin.tar.gz）上传到3台linux虚拟机。&lt;/p>
&lt;p>注：Oracle的JDK下载很垃圾，首先要免费注册，还得清理cookies，不然容易发生400错误。我为了不清理cookies，是用了无痕模式才下载成功。&lt;/p>
&lt;p>我们将JDK压缩包上传到&lt;code>/tmp&lt;/code>文件夹下，上传好了后，分别在3台虚拟机上部署jdk，具体步骤如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>su - root
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 1. 创建文件夹，用来部署jdk，将jdk，tomcat都安装部署到:/export/server内&lt;/span>
&lt;span class="ln"> 3&lt;/span>mkdir -p /export/server
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># 2. 解压缩jdk安装文件&lt;/span>
&lt;span class="ln"> 6&lt;/span>tar -zxvf /tmp/jdk-8u421-linux-x64.tar.gz -C /export/server
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># 3. 配置java环境&lt;/span>
&lt;span class="ln"> 9&lt;/span>vim /etc/profile
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 文末添加&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">JAVA_HOME&lt;/span>&lt;span class="o">=&lt;/span>/export/server/jdk1.8.0_421
&lt;span class="ln">12&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$JAVA_HOME&lt;/span>/bin
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 4. 使环境变量生效&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nb">source&lt;/span> /etc/profile
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c1"># 5. 配置java执行程序, centos默认使用openjdk&lt;/span>
&lt;span class="ln">18&lt;/span>mv /usr/bin/java /usr/bin/openjava
&lt;span class="ln">19&lt;/span>ln -s /export/server/jdk1.8.0_421/bin/java /usr/bin/java
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1"># 6. 执行验证展示&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">[&lt;/span>root@node1 ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># java -version&lt;/span>
&lt;span class="ln">23&lt;/span>java version &lt;span class="s2">&amp;#34;1.8.0_421&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span>Java&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> SE Runtime Environment &lt;span class="o">(&lt;/span>build 1.8.0_421-b09&lt;span class="o">)&lt;/span>
&lt;span class="ln">25&lt;/span>Java HotSpot&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> 64-Bit Server VM &lt;span class="o">(&lt;/span>build 25.421-b09, mixed mode&lt;span class="o">)&lt;/span>
&lt;span class="ln">26&lt;/span>javac -version
&lt;span class="ln">27&lt;/span>&lt;span class="o">[&lt;/span>root@node1 ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># javac -version&lt;/span>
&lt;span class="ln">28&lt;/span>javac 1.8.0_421
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c1"># 7. 最后清理垃圾文件&lt;/span>
&lt;span class="ln">31&lt;/span>rm /tmp/jdk-8u421-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="防火墙selinux时间同步">防火墙、SELinux、时间同步&lt;/h2>
&lt;p>我们还需要在三台虚拟机上分别执行以下操作，来方便Hadoop程序的运行。&lt;/p>
&lt;h3 id="关闭防火墙和selinux">关闭防火墙和SELinux&lt;/h3>
&lt;p>集群化软件之间需要通过端口互相通讯，为了简单起见，我们直接关闭防火墙。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 关闭防火墙&lt;/span>
&lt;span class="ln">2&lt;/span>systemctl stop firewalld
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 开机不再启动这个服务&lt;/span>
&lt;span class="ln">4&lt;/span>systemctl disable firewalld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux有一个安全模块，叫SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。在当前学习阶段，为了简单起见，我们也直接关闭SELinux功能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>vim /etc/sysconfig/selinux
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 将该行disabled&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nv">SELINUX&lt;/span>&lt;span class="o">=&lt;/span>disabled
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="c1"># 保存后退出，重启虚拟机生效&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="时间同步">时间同步&lt;/h3>
&lt;p>修改时区并配置自动时间同步。集群的同步非常重要，否则会出现混乱。时间同步是通过&lt;code>ntp&lt;/code>这个软件实现的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 1. 安装ntp软件&lt;/span>
&lt;span class="ln">2&lt;/span>yum install -y ntp
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 2. 更新时区在同一位置，这里设置为上海&lt;/span>
&lt;span class="ln">4&lt;/span>rm -f /etc/localtime&lt;span class="p">;&lt;/span> sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 3. 同步时间,使用阿里云的时间同步服务器&lt;/span>
&lt;span class="ln">6&lt;/span>ntpdate -u ntp.aliyun.com
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 4. 开启ntp服务并设置开机自启动&lt;/span>
&lt;span class="ln">8&lt;/span>systemctl start ntpd
&lt;span class="ln">9&lt;/span>systemctl &lt;span class="nb">enable&lt;/span> ntpd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，现在这个年代，&lt;code>yum install&lt;/code>基本上很难直接安装成功。源大概率没了。因此，我们最后用阿里的Centos 7源更换下默认的&lt;code>yum&lt;/code>源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 下载源&lt;/span>
&lt;span class="ln">2&lt;/span>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 清空并生成缓存&lt;/span>
&lt;span class="ln">4&lt;/span>yum clean all
&lt;span class="ln">5&lt;/span>yum makecache
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后就可以&lt;code>yum install&lt;/code>了。(没必要先&lt;code>yum update&lt;/code>)&lt;/p>
&lt;h2 id="设置虚拟机快照">设置虚拟机快照&lt;/h2>
&lt;p>经过以上设置，3台虚拟机的状态已经装备就绪，可以对当前来之不易的状态进行快照保存，以备后续恢复。&lt;/p>
&lt;p>对3台虚拟机均执行拍摄快照。首先我们将3台虚拟机关机（保存的更快），然后菜单栏上&lt;code>虚拟机&lt;/code>-&amp;gt;&lt;code>快照&lt;/code>-&amp;gt;&lt;code>拍摄快照&lt;/code>。就可拍摄快照进行备份了。&lt;/p>
&lt;p>&lt;img src="../images/Hadoop-VMware-%E6%8B%8D%E6%91%84%E5%BF%AB%E7%85%A7.png" alt="Hadoop-VMware-拍摄快照">&lt;/p>
&lt;p>至此，Hadoop平台的虚拟机设置已经完成。&lt;/p></description></item><item><title>AI-神经网络玩雅达利游戏(atari 2600)的预处理</title><link>https://surprisedcat.github.io/projectnotes/ai-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%8E%A9%E9%9B%85%E8%BE%BE%E5%88%A9%E6%B8%B8%E6%88%8Fatari-2600%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/ai-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%8E%A9%E9%9B%85%E8%BE%BE%E5%88%A9%E6%B8%B8%E6%88%8Fatari-2600%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</guid><description>
&lt;h2 id="ai-神经网络玩雅达利游戏atari-2600的预处理---omit-in-toc---">AI-神经网络玩雅达利游戏(atari 2600)的预处理&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在阅读DQN的一些基本文章时，发现都是大家着重于神经网络部分（这也没错），中文互联网缺乏对DQN实验环境——Atari 2600游戏环境的处理。本文通过阅读国外的一些博文、论文以及源码，整理了Atari游戏的环境处理步骤。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#atari%E6%B8%B8%E6%88%8F%E5%A4%84%E7%90%86%E6%95%B4%E4%BD%93%E6%A1%86%E6%9E%B6">Atari游戏处理整体框架&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%8E%B7%E5%8F%96%E8%A7%82%E6%B5%8B%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96">获取观测与初始化&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%B8%B8%E6%88%8F%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96">游戏环境初始化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%8E%B7%E5%8F%96%E8%A7%82%E6%B5%8B%E5%9B%BE%E5%83%8F%E4%B8%8E%E4%BA%A4%E4%BA%92">获取观测图像与交互&lt;/a>&lt;/li>
&lt;li>&lt;a href="#firereset-%E5%90%AF%E5%8A%A8">FireReset 启动&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%A2%9E%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%80%A7">增加随机性&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#sticky-action">Sticky Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#noop">Noop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frame-skip-%E4%B8%8E-max-pooling">Frame skip 与 Max pooling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%A1%A5%E5%85%85frame-stack">补充：Frame stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gym%E6%8F%90%E4%BE%9B%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%80%A7">Gym提供的随机性&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E4%BD%93%E6%AD%A5%E9%AA%A4%E7%9A%84%E9%99%90%E5%88%B6">总体步骤的限制&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B8%B8%E6%88%8F%E5%9B%BE%E5%83%8F%E7%9A%84%E5%A4%84%E7%90%86">游戏图像的处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BA%E4%BA%86%E9%80%82%E5%BA%94%E4%BA%8E%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%A4%84%E7%90%86">为了适应于神经网络的处理&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#episodic-life">Episodic Life&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clipreward">ClipReward&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scaledfloat">ScaledFloat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frame-stack">Frame Stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="#frametopytorch">FrameToPytorch&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="atari游戏处理整体框架">Atari游戏处理整体框架&lt;/h2>
&lt;p>Atari游戏是过去一款风靡世界的游戏机，有着丰富的游戏可选。2017年，OpenAI团队正是使用Atari 2600作为环境，发表了那篇神经网络领域的里程碑之作：《Human-level control through deep reinforcement learning》。这篇文章以及很多后续论文中，对Atrai环境本身的处理也是非常重要的引入了不少新的概念，如frame skip, frame stack, sticky action, max pooling等等，为DQN的发展打下了良好的基础。&lt;/p>
&lt;p>为了适应DQN的处理，目前主流Atari游戏的整体处理步骤如下：&lt;/p>
&lt;p>&lt;img src="../images/Atari%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.drawio.svg" alt="Atari处理流程.drawio.svg">&lt;/p>
&lt;p>注意，这些步骤在不同项目中可能属于不同的项目。例如，在ALE中实现了sticky action, gymnasium中就没有特地实现。stable-baselines3这个库基本上就都是自己实现的。另外，同一个大步骤在具体细节上也可能不同，例如对于游戏图像的处理，原始论文是直接缩放，没有剪裁图像，而现在一些实现代码例如《Deep Reinforcement Learning Hands On Second Edition》剪裁了图像。&lt;/p>
&lt;h2 id="获取观测与初始化">获取观测与初始化&lt;/h2>
&lt;p>为了将Atari 2600游戏环境作为DQN的交互环境，我们通常使用 Arcade Learning Environment(ALE)来模拟游戏并提供用于选择要执行的操作的接口。ALE是一个简洁的框架，允许研究人员和爱好者为Atari 2600游戏开发AI代理。它构建在Atari 2600仿真器 Stella 之上，并将仿真细节与代理设计分开。ALE允许我们在每个时间步骤提取Atari游戏反馈的信息，这种信息既可以是人眼可观测的图像(RGB图像)也可以是计算机处理的内存内容(RAM)，同时在每个时间步骤接收操作信息，用于与游戏环境交互。&lt;/p>
&lt;p>本文默认使用RGB图像信息作为ALE的反馈内容，其图像大小为&lt;code>210 * 160&lt;/code>像素，采用RGB模式，即返回的观测数据规模为&lt;code>210*160*3&lt;/code>。每个像素点都是0-255取值范围的整数。为了不失一般性，本文采用Breakout（打砖块）这个游戏为例，Gym环境为0.29.1版本，环境创建时采用最原始（并非默认）的配置，即从ALE中获取1帧RGB图像，并给ALE每一帧一个操作（对应环境为&lt;code>BreakoutNoFrameskip-v4&lt;/code>）。&lt;/p>
&lt;p>注：默认情况下，ALE中Atari游戏每秒有60帧。&lt;/p>
&lt;h3 id="游戏环境初始化">游戏环境初始化&lt;/h3>
&lt;p>我们可以通过如下代码构建环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">gymnasium&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">gym&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">cv2&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">deque&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，gym版本更新后全程是gymnasium，为了与过去统一所以&lt;code>import gymnasium as gym&lt;/code>。引入&lt;code>matplotlib.pyplot&lt;/code>和&lt;code>cv2&lt;/code>是为了画图与处理图像，而&lt;code>deque&lt;/code>是为了存储反馈的图像帧。为了保持可复现性，本文中设置了随机种子值都是100，至此，我们可以创建Breakout的游戏环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 设置随机种子值&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BreakoutNoFrameskip-v4&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，为了获得Atari游戏最原始，未经任何处理的观测数据，我们使用了&lt;code>BreakoutNoFrameskip-v4&lt;/code>，这个名称的创建的环境返回的结果不会使用Sticky action过滤动作，也不会使用frame skip跳帧来增强随机性（这些我们接下来要自己实现）。&lt;/p>
&lt;p>至于如何在gym中对环境返回的动作和观测进行修改，这里推荐使用&lt;a href="https://gymnasium.farama.org/api/wrappers/">gym Wrapper模块&lt;/a>，具体操作方法超出了本文的阐述范围，需要了解的读者可以通过gym官方文档深入学习。&lt;/p>
&lt;p>未经处理的Breakout游戏信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 游戏动作的含义&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">action_space&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 游戏操作的动作空间&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 游戏图像的观测空间，对于Atari游戏来说，一般是210*160的RGB图像，每个像素点RGB范围都是[0,255]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">observation_space&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;NOOP&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;FIRE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;RIGHT&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;LEFT&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">Discrete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="n">Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">210&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">160&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">uint8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上述可以发现，Breakout游戏的操作动作有四种：无操作（NOOP），开火/开球（FIRE），向右移动（RIGHT）和向左移动（LEFT），其动作空间是四个离散的数值（&lt;code>Discrete(4)&lt;/code>），分别对应着0——NOOP，1——FIRE，2——RIGHT，3——LEFT。而游戏的反馈（返回值）是一个210 $\times$ 160大小的RGB图像，以&lt;code>numpy.ndarray&lt;/code>的形式返回，具体来说是 $210\times 160\times 3$的三维数组，每个元素都是0-255的整数（如果熟悉图像处理，这部分就很好理解了）。&lt;/p>
&lt;h3 id="获取观测图像与交互">获取观测图像与交互&lt;/h3>
&lt;p>在生成Atari环境之后，Gym主要通过两个函数与Agents进行操作，一是重置函数&lt;code>env.reset()&lt;/code>，二是操作函数&lt;code>env.step()&lt;/code>。&lt;/p>
&lt;p>&lt;code>env.reset()&lt;/code>将环境重置为初始状态，返回初始观测结果和信息。该函数最好接收一个整数参数作为随机数种子。其返回值是一个210 $\times$ 160大小的初始RGB图像和一些与游戏初始化信息。常见用法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 以图片的形式显示numpy.ndarray&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># info一般是游戏相关信息，如lives表示游戏中剩余的生命数，frame_number表示游戏进行了多少帧&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;lives&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;episode_frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;seeds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">271914307&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3436027390&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/breakout_reset.png" alt="breakout_reset.png">&lt;/p>
&lt;p>&lt;code>env.step()&lt;/code>函数根据给定的动作与游戏环境进行一次交互。在Gym atari实际环境中，每执行一次step函数，游戏进行一帧（1/60秒）。当游戏进行到终止时（&lt;code>terminated or truncated&lt;/code>），需要重新调用&lt;code>env.reset()&lt;/code>函数重置环境以继续游戏交互。常见的用法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reward&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>step&lt;/code>函数的参数来自于动作空间&lt;code>action_space&lt;/code>，由上可知，Breakout的动作空间是0-3四个离散整数。&lt;code>observation&lt;/code>和过去一样是&lt;code>numpy.ndarray&lt;/code>数组。&lt;code>reward&lt;/code>是采取该动作获取的奖励；&lt;code>terminated&lt;/code>指的是游戏是否进入到终止状态，&lt;code>truncated&lt;/code>则是在0.26版本后新添加的结果，表示是否达到一个截断状态，通常截断状态是由超时&lt;code>TimeLimit&lt;/code>引起的。&lt;code>info&lt;/code>和&lt;code>env.reset()&lt;/code>反馈的结果类似，也是游戏的辅助信息。函数返回的信息结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 图片多了球&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;reward: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reward&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;termianted: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;truncated: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">reward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.0&lt;/span> &lt;span class="n">termianted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;lives&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;episode_frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;frame_number&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/breakout_start.png" alt="breakout_reset.png">&lt;/p>
&lt;h3 id="firereset-启动">FireReset 启动&lt;/h3>
&lt;p>对于像breakout、pong之类的Atari游戏，我们需要需要通过Fire操作来发球（或者说开始游戏），如果让Agent自己学习的话，可能会花很多时间来发球，因此有些神经网络项目在Atari游戏的预处理中，会将发球和reset进行绑定，如果这个游戏需要通过Fire来启动，那么则添加&lt;code>FireReset&lt;/code>这个Wrapper。需要说明的是，对于是否需要使用FireReset，大家并没有统一意见，有人认为学习发球也是神经网络的工作之一，并不需要额外地设置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">gymnasium.core&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Env&lt;/span> &lt;span class="c1"># typing类型提示&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">FireResetEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Wrapper&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s1"> 对于使用FIRE开始游戏的游戏采取FIRE操作来初始化
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s1"> :param env: Environment to wrap
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Env&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1"># 检查第2个动作是否为FIRE。&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;FIRE&amp;#34;&lt;/span> &lt;span class="c1"># type: ignore[attr-defined]&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unwrapped&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_action_meanings&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1"># type: ignore[attr-defined]&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># 重载reset函数，使用FireReset&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># 核心代码&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1"># Fire to start&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="c1"># 特殊情况处理&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1"># 如果已经结束了，则重置环境&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">terminated&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1"># 存疑，为啥这里用使用step(2)???&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">terminated&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">obs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">info&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>FireResetEnv&lt;/code>类继承了&lt;code>gym.Wrapper&lt;/code>，它的初始化函数仅仅检查动作空间中是否存在“Fire”这个选项。由于只需要在重置阶段起作用，因此只重写了&lt;code>reset()&lt;/code>函数。主要修改就是在原始的&lt;code>reset()&lt;/code>之后添加一步“Fire”动作，从而触发开始游戏。后面特殊处理的代码是为了防止游戏已经结束从而重置游戏。从本人实践的实际效果来看，至少对于（初期）探索性比较强的算法，&lt;code>FireResetEnv&lt;/code>并不是很必要。参见讨论&lt;a href="https://github.com/openai/baselines/issues/240">https://github.com/openai/baselines/issues/240&lt;/a>。&lt;/p>
&lt;p>如果要使用上述Wrapper，只需要将原始的环境作为参数传递给Wrapper即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BreakoutNoFrameskip-v4&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">env_firereset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FireResetEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么新的环境&lt;code>env_firereset&lt;/code>在调用重置函数&lt;code>reset&lt;/code>时就会调用&lt;code>FireResetEnv&lt;/code>中重写的&lt;code>reset&lt;/code>函数。&lt;/p>
&lt;p>最后需要指出的是，&lt;code>FireResetEnv&lt;/code>类虽然负责开启特定游戏，但是在各个项目的Atari预处理流程中并不一定是最先处理的，甚至Gym项目中已经移除了FireReset的相关代码。（个人觉得只要放在NOOP处理的后面就问题不大）。&lt;/p>
&lt;h2 id="增加随机性">增加随机性&lt;/h2>
&lt;p>《The arcade learning environment: An evaluation platform for general agents》中指出，Atari 游戏是完全确定性的。 因此，玩家可以通过简单地记住最佳的动作序列而完全忽略对环境的观察来实现最先进的性能（例如背板行为）。为了避免这种情况，游戏环境都需要增加随机性。从添加随机性的时机来看，可以分为在初始阶段添加随机性（例如：NOOP）和交互阶段添加随机性（例如：Sticky action、frame skip）。&lt;/p>
&lt;p>在初始阶段，我们可以等一段时间在开始操作（即开始有几步什么都不做，No Operation），让环境自动演变一会，从而获得不同的初始状态。在交互阶段，可以使用Sticky action(粘连动作)：即动作不是总是准确传递到环境中的，而是有概率使用之前执行的动作，从而增加动作的随机性。此外，还可以应用Frame Skip（随机跳帧）：在每个环境步骤中，都会针对随机数量的帧重复该操作。可以通过将关键字参数frameskip设置为正整数或两个正整数的元组来更改此行为。如果frameskip是一个整数，则跳帧是确定性的，并且在每个步骤中动作都会重复frameskip很多次。否则，frameskip若是一个元组，则在每个环境步骤中，在（frameskip[0]， frameskip[1]）之间均匀随机选择跳过帧的数量来创造随机性。&lt;/p>
&lt;p>下面我们按照处理流程介绍增加随机性的功能。&lt;/p>
&lt;h3 id="sticky-action">Sticky Action&lt;/h3>
&lt;p>Sticky Action，中文翻译为粘连动作，是论文《Revisiting the Arcade Learning Environment:
Evaluation Protocols and Open Problems for General Agents》在Section 5.2中提出的方法，具体步骤为设定一个概率阈值&lt;code>repeat_action_probability&lt;/code>，每次Agent执行动作前先生成一个随机数，如果这个随机数大于&lt;code>repeat_action_probability&lt;/code>，则执行Agent本身的动作，否则沿用上一次的动作。这就使得动作产生了随机性，Atari游戏实际执行的动作并不一定是Agent传递的操作。&lt;/p>
&lt;p>ALE和Gymnasium都自己实现了Sticky action(粘连动作)代码，为了方便理解，我们将以Gymnaisum的代码作为基础进行适当简化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">StickyAction&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ActionWrapper&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Env&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Initialize StickyAction wrapper.
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s2"> env (Env): the wrapped environment
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> repeat_action_probability (int | float): a probability of repeating the old action.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="n">InvalidProbability&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;repeat_action_probability should be in the interval [0,1). Received &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ActionWrapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repeat_action_probability&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ActType&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">reset&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ObsType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Reset the environment.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># 为了方便NOOP操作，这里设置为None&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ActType&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="c1"># 如果随机数未超过阈值概率，则不接受新的动作，执行之前的动作&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">repeat_action_probability&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">):&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span>
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">action&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">action&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="noop">Noop&lt;/h3>
&lt;p>在游戏刚开始阶段，在一定随机步数内不做任何操作，从而获得一定的初始随机化能力。我只需要设置一个最大Noop步数，代码会在0-max Noop中选择一个随机数N，执行N步的Noop。&lt;/p>
&lt;h3 id="frame-skip-与-max-pooling">Frame skip 与 Max pooling&lt;/h3>
&lt;h3 id="补充frame-stack">补充：Frame stack&lt;/h3>
&lt;h3 id="gym提供的随机性">Gym提供的随机性&lt;/h3>
&lt;p>在Gym V26中所有Atari游戏均提供三个随机性版本。它们的不同之处在于上述参数的默认设置。默认参数差异如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Version&lt;/th>
&lt;th style="text-align:center">frame skip&lt;/th>
&lt;th style="text-align:center">repeat_action_probability&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">V0&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">V4&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">V5&lt;/td>
&lt;td style="text-align:center">(2,5)&lt;/td>
&lt;td style="text-align:center">0.25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>具体来说，对于每个 Atari 游戏，Gymnasium 中都会注册几种不同的配置。 v0 和 v4 的命名方案类似。 让我们以Amidar游戏为例看一下在gymnasium注册的Amidar的所有变体：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Env-id&lt;/th>
&lt;th style="text-align:left">obs_type=&lt;/th>
&lt;th style="text-align:left">frameskip=&lt;/th>
&lt;th style="text-align:left">repeat_action_probability=&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Amidar-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ram-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramDeterministic-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramNoFrameskip-v0&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarDeterministic-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarNoFrameskip-v0&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ram-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">(2, 5)&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramDeterministic-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Amidar-ramNoFrameskip-v4&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarDeterministic-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">AmidarNoFrameskip-v4&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ALE/Amidar-v5&lt;/td>
&lt;td style="text-align:left">rgb&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ALE/Amidar-ram-v5&lt;/td>
&lt;td style="text-align:left">ram&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">0.25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注：obs_type表示观测返回的类型。可以有三种&lt;/p>
&lt;ol>
&lt;li>“ram”: The 128 Bytes of RAM&lt;/li>
&lt;li>“rgb”: 类似于人眼看到的RGB图像&lt;/li>
&lt;li>“grayscale”： 返回的是单一色的灰度图&lt;/li>
&lt;/ol>
&lt;h2 id="总体步骤的限制">总体步骤的限制&lt;/h2>
&lt;p>TimeLimit&lt;/p>
&lt;h2 id="游戏图像的处理">游戏图像的处理&lt;/h2>
&lt;p>WarpFrame流程：灰度图+缩放，有的需要裁剪&lt;/p>
&lt;h2 id="为了适应于神经网络的处理">为了适应于神经网络的处理&lt;/h2>
&lt;h3 id="episodic-life">Episodic Life&lt;/h3>
&lt;h3 id="clipreward">ClipReward&lt;/h3>
&lt;h3 id="scaledfloat">ScaledFloat&lt;/h3>
&lt;h3 id="frame-stack">Frame Stack&lt;/h3>
&lt;h3 id="frametopytorch">FrameToPytorch&lt;/h3>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.html">https://stable-baselines3.readthedocs.io/en/master/common/atari_wrappers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/">https://danieltakeshi.github.io/2016/11/25/frame-skipping-and-preprocessing-for-deep-q-networks-on-atari-2600-games/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gymlibrary.dev/environments/atari/index.html">https://www.gymlibrary.dev/environments/atari/index.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stable-baselines3.readthedocs.io/en/master/_modules/stable_baselines3/common/atari_wrappers.html">https://stable-baselines3.readthedocs.io/en/master/_modules/stable_baselines3/common/atari_wrappers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition/blob/master/Chapter06/lib/wrappers.py">https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition/blob/master/Chapter06/lib/wrappers.py&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>python-gym中box空间环境解读</title><link>https://surprisedcat.github.io/projectnotes/python-gym%E4%B8%ADbox%E7%A9%BA%E9%97%B4%E7%8E%AF%E5%A2%83%E8%A7%A3%E8%AF%BB/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-gym%E4%B8%ADbox%E7%A9%BA%E9%97%B4%E7%8E%AF%E5%A2%83%E8%A7%A3%E8%AF%BB/</guid><description>
&lt;h2 id="python-gym中box空间环境解读---omit-in-toc---">python-gym中box空间环境解读&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Box空间环境中使用的辅助函数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>is_float_integer()&lt;/code>判断是否为整数或浮点数&lt;/li>
&lt;li>&lt;code>_broadcast()&lt;/code>将标量扩充为给定的shape大小与dtype类型，附带处理&lt;code>np.inf&lt;/code>的转换问题。&lt;/li>
&lt;li>&lt;code>get_precision()&lt;/code>获取数据类型精度，小知识：python中整型精度是无限。&lt;/li>
&lt;li>&lt;code>_short_repr()&lt;/code>如何将对象转换为一种简单的描述，一般用于&lt;code>print()&lt;/code>或者文本化。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 查看变量是否为整数或浮点数&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Checks if a variable is an integer or float.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 变量广播，实际上这个函数只对标量变量进行了广播，ndarray不变&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Handle infinite bounds and broadcast at the same time if needed.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> 包括对无穷大边界的整数化处理（实际就是±2）
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s2"> This is needed primarily because:
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s2"> &amp;gt;&amp;gt;&amp;gt; import numpy as np
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s2"> &amp;gt;&amp;gt;&amp;gt; np.full((2,), np.inf, dtype=np.int32)
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="s2"> array([-2147483648, -2147483648], dtype=int32)
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1"># 对于value值只是一个数字，直接扩展到shape大小&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># 判断value是否为负无穷大，以及类型是否为signed integer(缩写i)。对于float类型，-np.inf不用修改&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1"># np.iinfo表示机器对整数类型的限制（根据机器不同会有所区别）,这里根据实际类型将-np.inf值转换为对应dtype类型的下限。&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1"># 至于为什么是+2 我也不知道&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1"># 判断value是否为正无穷大，以及类型是否为signed integer(缩写i)，对于float类型，np.inf不用修改&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="c1"># 这里根据实际类型将np.inf值转换为对应dtype类型的上限&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># 至于为什么是-2 我也不知道&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="c1"># 使用np.full 填充常常数&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="c1"># 对于np.array类型，不需要再次填充，但是需要根据数据类型对无穷（inf）进行对应转换，因为astype对np.inf向整数类型的转换存在问题&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c1"># this is needed because we can&amp;#39;t stuff np.iinfo(int).min into an array of dtype float&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">casted_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="c1"># 对于整数类型无穷的转换处理（float类型与非inf值不用额外处理）&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="c1"># 只处理inf值&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">casted_value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="n">casted_value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">casted_value&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="c1"># only np.ndarray allowed beyond this point&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">TypeError&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Unknown dtype for `value`, expected `np.ndarray` or float/integer, got &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Get precision of a data type.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="c1"># 获取数据类型的精度，只针对float类型，其他类型精度无限？&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="c1"># 在Python 中整型的取值范围是无限的（整数具有无限的精度）&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">finfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">precision&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">56&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>
&lt;span class="ln">57&lt;/span>
&lt;span class="ln">58&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="c1"># 主要用来打印的时期，以何种方式简要地说明arr参数&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a shortened string representation of a numpy array.
&lt;/span>&lt;span class="ln">61&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">62&lt;/span>&lt;span class="s2"> If arr is a multiple of the all-ones vector, return a string representation of the multiplier.
&lt;/span>&lt;span class="ln">63&lt;/span>&lt;span class="s2"> Otherwise, return a string representation of the entire array.
&lt;/span>&lt;span class="ln">64&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">65&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="ln">66&lt;/span>&lt;span class="s2"> arr: The array to represent
&lt;/span>&lt;span class="ln">67&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">68&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="ln">69&lt;/span>&lt;span class="s2"> A short representation of the array
&lt;/span>&lt;span class="ln">70&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">71&lt;/span> &lt;span class="c1"># 首先处理特殊情况，一般情况就是使用arr自身的__repr__功能&lt;/span>
&lt;span class="ln">72&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">73&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">74&lt;/span> &lt;span class="c1"># 主要还是利用array自身的__repr__功能&lt;/span>
&lt;span class="ln">75&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体实现自己的MyBox模块：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Mapping&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">numpy.typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">NDArray&lt;/span> &lt;span class="c1"># NDArray Can be used during runtime for typing arrays with a given dtype and unspecified shape.&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy.typing&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">npt&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyBox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spaces&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Space&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">any&lt;/span>&lt;span class="p">]]):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 10&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SupportsFloat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 11&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 12&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floating&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float32&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 13&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 14&lt;/span> &lt;span class="c1"># super().__init__(shape, dtype, seed)&lt;/span>
&lt;span class="ln"> 15&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;Box dtype must be explicitly provided, cannot be None.&amp;#34;&lt;/span>
&lt;span class="ln"> 16&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 17&lt;/span>
&lt;span class="ln"> 18&lt;/span> &lt;span class="c1"># determine shape if it isn&amp;#39;t provided directly&lt;/span>
&lt;span class="ln"> 19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 20&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">issubdtype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dim&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">dim&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Expected all shape elements to be an integer, actual type: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dim&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">dim&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 21&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 22&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 23&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 24&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 25&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 26&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln"> 27&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 28&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box shape is inferred from low and high, expected their types to be np.ndarray, an integer or a float, actual type low: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, high: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 29&lt;/span>
&lt;span class="ln"> 30&lt;/span> &lt;span class="c1"># Capture the boundedness information before replacing np.inf with get_inf&lt;/span>
&lt;span class="ln"> 31&lt;/span> &lt;span class="c1"># 对于单个low数字，使用shape大小进行填充，对于其他如ndarray则保留原有形式&lt;/span>
&lt;span class="ln"> 32&lt;/span> &lt;span class="n">_low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">low&lt;/span>
&lt;span class="ln"> 33&lt;/span>
&lt;span class="ln"> 34&lt;/span> &lt;span class="c1"># 记录是否有界，如果_low中元素都大于-np.inf就认为是有下界的&lt;/span>
&lt;span class="ln"> 35&lt;/span> &lt;span class="c1"># 注意low的类型必须是int，float或np.array否则无法重载比较运算符&lt;/span>
&lt;span class="ln"> 36&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bool_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">_low&lt;/span>
&lt;span class="ln"> 37&lt;/span> &lt;span class="c1"># 记录是否有界，如果_high中元素都小于np.inf就认为是有下界的&lt;/span>
&lt;span class="ln"> 38&lt;/span> &lt;span class="c1"># 注意high的类型必须是int，float或np.array否则无法重载比较运算符&lt;/span>
&lt;span class="ln"> 39&lt;/span> &lt;span class="n">_high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">is_float_integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">high&lt;/span>
&lt;span class="ln"> 40&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bool_&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_high&lt;/span>
&lt;span class="ln"> 41&lt;/span> &lt;span class="c1"># 注：是否有界会影响抽样函数sample函数使用的分布函数。&lt;/span>
&lt;span class="ln"> 42&lt;/span>
&lt;span class="ln"> 43&lt;/span> &lt;span class="c1"># 如果low,high是单个数字，将他们扩展成一个ndarray&lt;/span>
&lt;span class="ln"> 44&lt;/span> &lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 45&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 46&lt;/span>
&lt;span class="ln"> 47&lt;/span> &lt;span class="c1"># 确保low经过前面操作，已经是np.ndarray类型&lt;/span>
&lt;span class="ln"> 48&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 49&lt;/span> &lt;span class="c1"># 确保low的shape与参数提供的shape一致&lt;/span>
&lt;span class="ln"> 50&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;low.shape doesn&amp;#39;t match provided shape, low.shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 51&lt;/span>
&lt;span class="ln"> 52&lt;/span> &lt;span class="c1"># 确保high经过前面操作，已经是np.ndarray类型&lt;/span>
&lt;span class="ln"> 53&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 54&lt;/span> &lt;span class="c1"># 确保high的shape与参数提供的shape一致&lt;/span>
&lt;span class="ln"> 55&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;high.shape doesn&amp;#39;t match provided shape, high.shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, shape: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 56&lt;/span>
&lt;span class="ln"> 57&lt;/span> &lt;span class="c1"># 检验low与high的大小关系是否正确&lt;/span>
&lt;span class="ln"> 58&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">):&lt;/span>&lt;span class="c1"># low中有任一元素大于high&lt;/span>
&lt;span class="ln"> 59&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Some low values are greater than high, low=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, high=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 60&lt;/span> &lt;span class="c1"># 如果low的值是正无穷或者high的值是负无穷，肯定是错的&lt;/span>
&lt;span class="ln"> 61&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isposinf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln"> 62&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;No low value can be equal to `np.inf`, low=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 63&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isneginf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln"> 64&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;No high value can be equal to `-np.inf`, high=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 65&lt;/span>
&lt;span class="ln"> 66&lt;/span> &lt;span class="c1"># 确定shape变量没问题，赋值&lt;/span>
&lt;span class="ln"> 67&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shape&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shape&lt;/span>
&lt;span class="ln"> 68&lt;/span>
&lt;span class="ln"> 69&lt;/span> &lt;span class="c1"># 确定low,high没问题，按照dtype转换成相应类型赋值&lt;/span>
&lt;span class="ln"> 70&lt;/span> &lt;span class="c1"># 我的疑问：在_broadcast()函数中已经做过了一样的操作,完成了转换，这里有必要再用一次astype()吗？&lt;/span>
&lt;span class="ln"> 71&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 72&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 73&lt;/span>
&lt;span class="ln"> 74&lt;/span> &lt;span class="c1"># 生成简洁的文本化描述&lt;/span>
&lt;span class="ln"> 75&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 76&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 77&lt;/span>
&lt;span class="ln"> 78&lt;/span> &lt;span class="c1"># 获取数据精度，暂时不知道用处&lt;/span>
&lt;span class="ln"> 79&lt;/span> &lt;span class="n">low_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 80&lt;/span> &lt;span class="n">high_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 81&lt;/span> &lt;span class="n">dtype_precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_precision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 82&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low_precision&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high_precision&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dtype_precision&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 83&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box bound precision lowered by casting to &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 84&lt;/span>
&lt;span class="ln"> 85&lt;/span> &lt;span class="c1"># 最后调用父函数&lt;/span>
&lt;span class="ln"> 86&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 87&lt;/span>
&lt;span class="ln"> 88&lt;/span>
&lt;span class="ln"> 89&lt;/span> &lt;span class="c1"># 设置一些只读属性&lt;/span>
&lt;span class="ln"> 90&lt;/span> &lt;span class="nd">@property&lt;/span>
&lt;span class="ln"> 91&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln"> 92&lt;/span> &lt;span class="c1"># 比父类gym.Space更加严格，永远不要是None&lt;/span>
&lt;span class="ln"> 93&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shape&lt;/span>
&lt;span class="ln"> 94&lt;/span>
&lt;span class="ln"> 95&lt;/span> &lt;span class="nd">@property&lt;/span>
&lt;span class="ln"> 96&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">is_np_flattenable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 97&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Checks whether this space can be flattened to a :class:`spaces.Box`.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 98&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 99&lt;/span>
&lt;span class="ln">100&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">is_bounded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">manner&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">101&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="s2"> 检验box是否有界（某种程度上）
&lt;/span>&lt;span class="ln">103&lt;/span>&lt;span class="s2"> 参数： Args : manner(str): ``&amp;#34;both&amp;#34;``, ``&amp;#34;below&amp;#34;``, ``&amp;#34;above&amp;#34;``
&lt;/span>&lt;span class="ln">104&lt;/span>&lt;span class="s2"> 结果： 实际边界与给定的manner是否一致
&lt;/span>&lt;span class="ln">105&lt;/span>&lt;span class="s2"> Raises: ValueError: 如果 `manner` 不是 ``&amp;#34;both&amp;#34;`` 或 ``&amp;#34;below&amp;#34;`` 或 ``&amp;#34;above&amp;#34;``
&lt;/span>&lt;span class="ln">106&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">107&lt;/span> &lt;span class="c1"># 之前在__init__()环境中，检验的是否有上下界&lt;/span>
&lt;span class="ln">108&lt;/span> &lt;span class="n">below&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">109&lt;/span> &lt;span class="n">above&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">110&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">111&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">below&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">above&lt;/span>
&lt;span class="ln">112&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;below&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">113&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">below&lt;/span>
&lt;span class="ln">114&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="n">manner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;above&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">115&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">above&lt;/span>
&lt;span class="ln">116&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 对于既不是both, below, above的场景，就报错&lt;/span>
&lt;span class="ln">117&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;manner is not in &lt;/span>&lt;span class="se">{{&lt;/span>&lt;span class="s2">&amp;#39;below&amp;#39;, &amp;#39;above&amp;#39;, &amp;#39;both&amp;#39;&lt;/span>&lt;span class="se">}}&lt;/span>&lt;span class="s2">, actual value: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">manner&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">118&lt;/span>
&lt;span class="ln">119&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">sample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">120&lt;/span> &lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;从Box的空间随机生成一个样本
&lt;/span>&lt;span class="ln">121&lt;/span>&lt;span class="s2"> 从box空间的每一个维度独立地抽样，抽样原则服从如下方式：
&lt;/span>&lt;span class="ln">122&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">123&lt;/span>&lt;span class="s2"> * :math:`[a, b]` : 均匀分布
&lt;/span>&lt;span class="ln">124&lt;/span>&lt;span class="s2"> * :math:`[a, \infty)` : 偏移的指数分布
&lt;/span>&lt;span class="ln">125&lt;/span>&lt;span class="s2"> * :math:`(-\infty, b]` : 偏倚的负指数分布
&lt;/span>&lt;span class="ln">126&lt;/span>&lt;span class="s2"> * :math:`(-\infty, \infty)`： 正态分布
&lt;/span>&lt;span class="ln">127&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">128&lt;/span>&lt;span class="s2"> Args: mask：暂时不支持……
&lt;/span>&lt;span class="ln">129&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">130&lt;/span>&lt;span class="s2"> Returns: 一个从Box空间随机抽样的值
&lt;/span>&lt;span class="ln">131&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">132&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 暂时不支持mask，提供的话报错&lt;/span>
&lt;span class="ln">133&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">134&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box.sample cannot be provided a mask, actual value: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">135&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">136&lt;/span> &lt;span class="c1"># 抽样空间上限处理。对于整数处理时，初始化函数是-2，这里是+1，不知道为什么&lt;/span>
&lt;span class="ln">137&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;f&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;int64&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">138&lt;/span>
&lt;span class="ln">139&lt;/span> &lt;span class="c1"># 抽样结果初始化&lt;/span>
&lt;span class="ln">140&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">141&lt;/span>
&lt;span class="ln">142&lt;/span> &lt;span class="c1"># 查看每一个维度是否有界，注意self.bounded_below与self.bounded_above都是bool序列，~表示按位取反，&amp;amp;表示按位与操作&lt;/span>
&lt;span class="ln">143&lt;/span> &lt;span class="c1"># 下面四个变量都是True，False的np.array数组，用于索引取舍&lt;/span>
&lt;span class="ln">144&lt;/span> &lt;span class="c1"># 无界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">145&lt;/span> &lt;span class="n">unbounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">146&lt;/span> &lt;span class="c1"># 仅有上界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">147&lt;/span> &lt;span class="n">upp_bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">148&lt;/span> &lt;span class="c1"># 仅有下界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">149&lt;/span> &lt;span class="n">low_bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">150&lt;/span> &lt;span class="c1"># 有界的维度，得到一个array[bool]&lt;/span>
&lt;span class="ln">151&lt;/span> &lt;span class="n">bounded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>
&lt;span class="ln">152&lt;/span>
&lt;span class="ln">153&lt;/span> &lt;span class="c1"># 针对四种边界情形，分别根据分布类型抽样。属性self.np_random继承自父类class Space(Generic[T_cov])&lt;/span>
&lt;span class="ln">154&lt;/span> &lt;span class="c1"># 无界的维度，正态分布抽样。通过unbounded的bool数组筛选项，再赋值&lt;/span>
&lt;span class="ln">155&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">normal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">unbounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># unbounded[unbounded]得到其中为True的项&lt;/span>
&lt;span class="ln">156&lt;/span>
&lt;span class="ln">157&lt;/span> &lt;span class="c1"># 有下界，使用指数分布定义域[0,+infty)，加上下界作为偏移量，范围为[self.low[low_bounded], +infty)&lt;/span>
&lt;span class="ln">158&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exponential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low_bounded&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">159&lt;/span>
&lt;span class="ln">160&lt;/span> &lt;span class="c1"># 有上界，使用负指数分布，定义域(-infty,0]，加上上界作为偏移量，范围为(-infty, high[upp_bounded]]&lt;/span>
&lt;span class="ln">161&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exponential&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">upp_bounded&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1"># 注意小区别，这里用的是high而不是self.high，因为上限的一点处理，具体不知道为什么&lt;/span>
&lt;span class="ln">162&lt;/span>
&lt;span class="ln">163&lt;/span> &lt;span class="c1"># 上下界皆存在，均匀分布抽样&lt;/span>
&lt;span class="ln">164&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">np_random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bounded&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">165&lt;/span>
&lt;span class="ln">166&lt;/span> &lt;span class="c1"># 对于整形，无符号整形等，向下取整&lt;/span>
&lt;span class="ln">167&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kind&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;u&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">168&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">169&lt;/span>
&lt;span class="ln">170&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 按要求类型返回&lt;/span>
&lt;span class="ln">171&lt;/span>
&lt;span class="ln">172&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">173&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Return boolean specifying if x is a valid member of this space.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">174&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndarray&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 如果x不是np.ndarray类型，先尝试转换成np.ndarray&lt;/span>
&lt;span class="ln">175&lt;/span> &lt;span class="n">gym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Casting input x to numpy array.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">176&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">177&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">asarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">178&lt;/span> &lt;span class="k">except&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">ValueError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">TypeError&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">179&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">180&lt;/span>
&lt;span class="ln">181&lt;/span> &lt;span class="c1"># 转换成功或者x是np.ndarray时&lt;/span>
&lt;span class="ln">182&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">can_cast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1"># 类型可以转换&lt;/span>
&lt;span class="ln">183&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="c1"># shape大小一致&lt;/span>
&lt;span class="ln">184&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 处于上界与下界之间&lt;/span>
&lt;span class="ln">185&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">186&lt;/span>
&lt;span class="ln">187&lt;/span> &lt;span class="c1"># json序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">188&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">to_jsonable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">189&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Convert a batch of samples from this space to a JSONable data type.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">190&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tolist&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">191&lt;/span>
&lt;span class="ln">192&lt;/span> &lt;span class="c1"># json反序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">193&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">from_jsonable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NDArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;span class="ln">194&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Convert a JSONable data type to a batch of samples from this space.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">195&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">asarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">sample&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sample_n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">196&lt;/span>
&lt;span class="ln">197&lt;/span> &lt;span class="c1"># 打印时如何生成string字符串&lt;/span>
&lt;span class="ln">198&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__repr__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">199&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;A string representation of this space.
&lt;/span>&lt;span class="ln">200&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">201&lt;/span>&lt;span class="s2"> The representation will include bounds, shape and dtype.
&lt;/span>&lt;span class="ln">202&lt;/span>&lt;span class="s2"> If a bound is uniform, only the corresponding scalar will be given to avoid redundant and ugly strings.
&lt;/span>&lt;span class="ln">203&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">204&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="ln">205&lt;/span>&lt;span class="s2"> A representation of the space
&lt;/span>&lt;span class="ln">206&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">207&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Box(&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>
&lt;span class="ln">208&lt;/span>
&lt;span class="ln">209&lt;/span> &lt;span class="c1"># 对于等号运算符的重载&lt;/span>
&lt;span class="ln">210&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__eq__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">211&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Check whether `other` is equivalent to this instance. Doesn&amp;#39;t check dtype equivalence.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">212&lt;/span> &lt;span class="c1"># 两个Box空间是否相等，看下面四条&lt;/span>
&lt;span class="ln">213&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="ln">214&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MyBox&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 类的类型是否相容&lt;/span>
&lt;span class="ln">215&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># shape大小是否一致&lt;/span>
&lt;span class="ln">216&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 用于比较浮点数，两者相差是否在一定范围内&lt;/span>
&lt;span class="ln">217&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 上下界是否一样&lt;/span>
&lt;span class="ln">218&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="ln">219&lt;/span> &lt;span class="c1"># 用于python的反序列化，暂时不用考虑&lt;/span>
&lt;span class="ln">220&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">__setstate__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Union&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Iterable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">Mapping&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]]):&lt;/span>
&lt;span class="ln">221&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Sets the state of the box for unpickling a box with legacy support.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">222&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__setstate__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">223&lt;/span>
&lt;span class="ln">224&lt;/span> &lt;span class="c1"># legacy support through re-adding &amp;#34;low_repr&amp;#34; and &amp;#34;high_repr&amp;#34; if missing from pickled state&lt;/span>
&lt;span class="ln">225&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">hasattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;low_repr&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">226&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">227&lt;/span>
&lt;span class="ln">228&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">hasattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;high_repr&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">229&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_repr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_short_repr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="n">testbox&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MyBox&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">),&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">),&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bounded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;both&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_np_flattenable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># (3, 4) False True&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_above&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bounded_below&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testbox&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contains&lt;/span>&lt;span class="p">(([[&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">]])))&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="s1">[[ True True True True]
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="s1"> [False False True True]
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="s1"> [ True True False False]]
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="s1">[[ True True True True]
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="s1"> [False False False False]
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="s1"> [False False True True]]
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="s1">[[ 0.02490971 0.73054417 0.12991174 0.0641791 ]
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="s1"> [-0.96922534 1.03660516 0.84641361 0.84423148]
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="s1"> [-2.12524701 0.19277976 1.75165337 0.16050653]]
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="s1">True
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="s1">/tmp/ipykernel_18223/1967140855.py:169: UserWarning: WARN: Casting input x to numpy array.
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="s1"> gym.logger.warn(&amp;#34;Casting input x to numpy array.&amp;#34;)
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python-Pytorch中随机种子问题</title><link>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/pytorch-%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%E9%97%AE%E9%A2%98/</guid><description>
&lt;h2 id="可复现的pytorch---omit-in-toc---">可复现的pytorch&lt;!-- omit in toc -->&lt;/h2>
&lt;p>为了保证实验的「可复现性」，许多机器学习的代码都会有一个方法叫 seed_everything，这个方法尝试固定随机种子以让一些随机的过程在每一次的运行中产生相同的结果。但如果用谷歌搜索「how to seed everything in pytorch」，会得到各种不同的版本，本文就来讨论如何正确设置&lt;strong>随机种子&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90">什么是随机种子&lt;/a>&lt;/li>
&lt;li>&lt;a href="#linux-%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">Linux 系统中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">程序中的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cuda%E9%9A%8F%E6%9C%BA%E6%95%B0">CUDA随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0">不同设备之间的随机数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%80%A7">多进程的随机性&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="什么是随机种子">什么是随机种子&lt;/h2>
&lt;p>随机数，分为&lt;strong>真随机数&lt;/strong>和&lt;strong>伪随机数&lt;/strong>，真随机数需要自然界中真实的随机物理现象才能产生，而对于计算机来说生成这种随机数是很难办到的。而伪随机数是通过一个初始化的值，来计算来产生一个随机序列，如果初始值是不变的，那么多次从该种子产生的随机序列也是相同的。这个初始值一般就称为&lt;strong>种子&lt;/strong>。&lt;/p>
&lt;h2 id="linux-系统中的随机数">Linux 系统中的随机数&lt;/h2>
&lt;p>在 Ubuntu 系统中，有一个专门管理随机种子的服务&lt;a href="https://manpages.ubuntu.com/manpages/focal/en/man8/systemd-random-seed.service.8.html">systemd-random-seed.service&lt;/a>，该服务负责在计算机启动的时候，从硬盘上加载一个随机种子文件到内核中，以作为随机初始化值在整个系统运行的过程中提供服务。Linux 会通过许多硬件信息来获得这个初始化值。可以通过&lt;code>/dev/urandom&lt;/code>文件来产生随机字节，然后使用&lt;code>od&lt;/code>命令（该命令可将字节转换成希望的格式并打印）来获得随机数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 随机生成 0 ~ 255 的数。&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># -N1 从 /dev/urandom 中读取一个字节&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># -t u1 将字节流格式化为为 1 字节的无符号整型&lt;/span>
&lt;span class="ln">4&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 输出 194&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 再次调用&lt;/span>
&lt;span class="ln">8&lt;/span>od -An -N1 -t u1 &amp;lt; /dev/urandom
&lt;span class="ln">9&lt;/span>&lt;span class="c1"># 输出 50&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果仅希望获得随机数，直接读取&lt;code>/dev/urandom&lt;/code>或调用 Linux 系统调用&lt;code> getrandom()&lt;/code>(内部也使用&lt;code>/dev/urandom&lt;/code>)是不错的选择。但这种随机数是无法复现的，因为种子是由系统设置的，并且每次开机设置的种子都不一样。在「可复现」的场景中，我们需要的是一种能手动控制随机种子和读取随机序列的方式，以便可以重复获得相同随机序列的功能。&lt;/p>
&lt;p>如果一个过程依赖系统产生的随机数，则称这个过程是 Non Deterministic（不确定的）；相反的如果一个过程对相同的输入种子都有相同的输出，则这个随机过程是Deterministic 的。在「可复现」场景中，我们需要保证所有的随机过程都是 Deterministic 的。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>/dev/random&lt;/code>可生成「随机性」更强的随机数，但由于其依赖的系统资源更多，导致性能缓慢，因此绝大多数场景都只使用&lt;code>/dev/urandom&lt;/code>。&lt;code>/dev/random&lt;/code>依赖于系统的熵池，在没有足够多随机性时并不会产生随机数从而导致阻塞。&lt;/p>
&lt;/blockquote>
&lt;h2 id="程序中的随机数">程序中的随机数&lt;/h2>
&lt;p>在 PyTorch 中，设置随机种子的方法是&lt;code>torch.manual_seed(777)&lt;/code>，这里 777 就是我们所设置的随机种子，设置完毕后，如果多次调用同样的具有随机过程 PyTorch 方法，就会获得相同的结果，例如下面的代码在多次调用后的打印是一样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.0819])&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出：tensor([0.4911])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不论在任何机器或系统，只要使用 &lt;code>torch==1.10.0&lt;/code> 版本（其他版本大概率也是 OK 的），输出应该都是长这样的。诶？既然随机种子产生跟系统硬件信息相关，那不同的机器至少应该不一样才对呀？上文说了，在要求「可复现」的场景下，是不能使用&lt;code>/dev/urandom&lt;/code>来产生随机数的，那剩下的是需要搞清楚 PyTorch 是如何生成随机数的。&lt;/p>
&lt;p>通过&lt;code>torch.manual_seed&lt;/code>方法往下找，可以知道 PyTorch 生成随机数是使用了&lt;a href="https://en.wikipedia.org/wiki/Mersenne_Twister">MT19937（梅森旋轉）算法&lt;/a>，这个算法的输入只有一个初始化值也不需要其他的环境信息。因此无论在任何机器，只要 PyTorch 的版本一致（算法部分没有改变）并且设置了随机种子，那么调用随机过程所产生的随机数就是一致的。&lt;/p>
&lt;p>C++ 11 在标准库中直接引入了这个方法：&lt;code>std::mt19937&lt;/code>，而 PyTorch 是自己实现的，官方称性能比 C++ 的版本要更好一些，感兴趣的话可以直接看 PyTorch &lt;a href="https://github.com/pytorch/pytorch/blob/main/aten/src/ATen/core/MT19937RNGEngine.h">源码&lt;/a>。&lt;/p>
&lt;p>NumPy 的&lt;code>np.random.seed&lt;/code>也同样使用 &lt;code>MT19937&lt;/code>来生成随机数，因此也与硬件无关。要注意的是：&lt;code>np.random.seed&lt;/code> 只影响 NumPy 的随机过程，&lt;code>torch.manual_seed&lt;/code> 也只影响 PyTorch 的随机过程。通过下面的代码很容易验证这个结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用产生不同输出&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numpy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 [0.15266373]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可以得到这样的结论：程序中所有依赖 MT19937 算法产生随机数的包，都需要手动设置随机种子，才能使整个程序的随机性是可复现的。&lt;/p>
&lt;blockquote>
&lt;p>PS: 根据&lt;a href="https://pytorch.org/docs/stable/notes/randomness.html#pytorch-random-number-generator">文档中可复现性描述&lt;/a>，设置 &lt;code>torch.manual_seed&lt;/code> 是对所有的设备设置随机种子。目前似乎没有单独为 CPU 设备设置随机种子的方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cuda随机数">CUDA随机数&lt;/h2>
&lt;p>PyTorch 中，还有另一个设置随机种子的方法：&lt;code>torch.cuda.manual_seed_all&lt;/code>，从名字可知这是设置&lt;strong>显卡&lt;/strong>的随机种子。&lt;/p>
&lt;p>在 PyTorch 的内部，使用 &lt;code>CUDA Runtime API&lt;/code> 提供的 &lt;code>curand&lt;/code> 来设置随机种子，根据 &lt;code>curand&lt;/code> 的文档，他们提供的所有随机数生成算法都是 Deterministic 的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 多次调用都产生不同输出&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码看起来不够「随机」，因为在不同的 GPU 设备上产生了相同的结果，如果希望不同设备可以产生不同的随机数，可以这么做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">777&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">device_count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_device&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cuda&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.4315], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:1&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 始终输出 tensor([0.6701], device=&amp;#39;cuda:1&amp;#39;)&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码既保证了随机性（不同设备产生不同的随机数），也保证了确定性（多次调用只产生相同结果）。在真实场景中，一般只会用相同的设备来产生随机数，因此&lt;code>torch.manual_seed(777)&lt;/code>应该就能满足大多数需求。&lt;/p>
&lt;h2 id="不同设备之间的随机数">不同设备之间的随机数&lt;/h2>
&lt;p>先问一个问题：「用 GPU 训练的实验结果，可以在 CPU 上复现吗？」。&lt;/p>
&lt;p>答案是「也许可以」。&lt;/p>
&lt;p>根据前文可知，CPU 设置随机种子是用 PyTorch 官方实现的 MT19937，而 GPU 是用到了 CUDA Runtime API 的&lt;code>curand&lt;/code>。因此两套实现是完全不同的，那么对于相同的随机种子，理应产生不同的随机序列，用下面的代码可以验证：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819])&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 将下面的 cuda:0 改为 cuda:1 会产生相同的结果，因为都是 curand 算法&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.3530], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的例子中知道，对于同一个随机种子，在 CPU 和 GPU 上产出的结果是不同的，因此这种情况在 GPU 上的结果是无法在 CPU 上复现的。那为什么的答案是「也许可以」呢？&lt;/p>
&lt;p>因为很多代码，都会在 CPU 上创建 Tensor，再切换到 GPU 上。&lt;em>只要不直接在 GPU 上创建随机变量，就可以避免这个问题&lt;/em>。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">manual_seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cuda:0&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 输出 tensor([0.0819], device=&amp;#39;cuda:0&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码输出值跟 CPU 一致，但是 device 是在 CUDA 上。这样写可能性能不如直接在 GPU 上直接创建随机变量效率高，但为了保证程序的确定性，牺牲一点性能我认为是值得的。&lt;/p>
&lt;h2 id="多进程的随机性">多进程的随机性&lt;/h2>
&lt;p>PyTorch 的 &lt;code>torch.utils.data.DataLoader&lt;/code> 在 &lt;code>num_worker &amp;gt; 0&lt;/code> 的情况下会 fork 出子进程，而通常又会在加载数据的时候做很多「随机变换」，那么就有必要讨论一下多进程下的随机性是怎样的，&lt;/p>
&lt;p>子进程一般会保留父进程的一些状态，这也包括随机种子。因此若不做特殊处理，所有子进程都会产生和父进程相同的随机序列。请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">torch.utils.data&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dataset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DataLoader&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dataset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__getitem__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_numpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__len__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataLoader&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">num_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">loader_result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loader_result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1"># 输出&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># tensor([[0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685],&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c1"># [0.1527, 0.3024, 0.0620, 0.4599],&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1"># [0.8353, 0.9270, 0.7270, 0.7685]], dtype=torch.float64)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注：上面的结果在 torch&amp;gt;=1.9.0 是不能复现的，因为 PyTorch 1.9 之后给 DataLoader 默认给每个 worker 重新设置随机种子。&lt;/p>
&lt;/blockquote>
&lt;p>可以发现两次 batch 输出的结果是一样的，这是因为主进程中 numpy 的随机性，被两个 worker 保留了，因此两个 worker 的随机性是相同的。&lt;/p></description></item><item><title>javascript-Chrome扩展实例（三）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%89/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%89/</guid><description>
&lt;h2 id="chrome扩展实例三---omit-in-toc---">Chrome扩展实例（三）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>前面的教程中，我们已经阐述了Chrome扩展开发的整体框架和主干内容，经历了扩展开发的大致流程。Chrome以&lt;code>manifest.json&lt;/code>为组织框架，Chrome API为轴心，service worker为协调者，通过Content scripts的三种注入模式来更改网页内容，再辅以&lt;code>popup&lt;/code>，&lt;code>options&lt;/code>来增强操作，能够实现丰富的用户定制化功能。此外，我们之前还介绍了权限、上下文、快捷键等概念，通过这些知识，如果已经有了一定javascript/CSS基础，那么开发常用的插件大多不成问题。&lt;/p>
&lt;p>这篇文章将会介绍三个更深入一些的概念，不一定在开发过程中会用到，但是能提升Chrome扩展的可用性和丰富其功能性。它们分别是：&lt;/p>
&lt;ul>
&lt;li>Web可访问资源(Web Accessible Resources)&lt;/li>
&lt;li>消息传递(Message passing)&lt;/li>
&lt;li>丰富的通知API(Rich notifications API)&lt;/li>
&lt;/ul>
&lt;p>为了完整性，本文还将补充匹配模式(match pattern)的内容。如果在阅读过程中遇到匹配模式不懂的内容，也可以优先阅读匹配模式(match pattern)的章节。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#web%E5%8F%AF%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90web-accessible-resourceswar">Web可访问资源(Web Accessible Resources，WAR)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E8%B5%84%E6%BA%90%E5%8F%AF%E7%94%A8%E6%80%A7%E5%B1%95%E7%A4%BA">实例：资源可用性展示&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%8D%E8%B0%88content-script%E4%B8%8E%E7%BD%91%E9%A1%B5%E4%B8%8A%E4%B8%8B%E6%96%87">再谈content script与网页上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92message-passing">消息传递(Message passing)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93">消息传递方式总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%B8%B0%E5%AF%8C%E7%9A%84%E9%80%9A%E7%9F%A5apirich-notifications-api">丰富的通知API(Rich notifications API)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E6%8C%89%E6%97%B6%E5%96%9D%E6%B0%B4">实例：按时喝水&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8Fmatch-pattern">匹配模式(match pattern)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8C%E6%88%90%E5%AE%9E%E4%BE%8B%E5%A4%8D%E7%8E%B0">完成实例复现&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="web可访问资源web-accessible-resourceswar">Web可访问资源(Web Accessible Resources，WAR)&lt;/h2>
&lt;p>在阐述tab页面和扩展时，我们已经知道它们分属于不同的上下文，即有独立的运行环境。扩展的代码正常情况下只可以使用扩展自身的资源（如函数、CSS文件、图片、javascript文件）等等，无法访问网页的DOM及JS，同时网页在开发时也是意识不到Chrome扩展存在的，因此无法访问Chrome扩展的资源。&lt;/p>
&lt;p>为了打破这种界限，扩展使用了Inject scripts技术，使用三种模式进行内容注入，从而使得扩展的content script能够操作网页的DOM元素。需要指出的是扩展的content script无论使用静态声明注入、动态声明注入还是以编程方式注入，都只是获得了网页DOM元素的操作权，本质上Chrome的content script脚本和网页的JavaScript脚本还是处在两个独立的空间，没有互操作性，同时网页的DOM元素依然无法使用扩展内的资源。&lt;/p>
&lt;p>如果我们希望网页的DOM元素直接使用扩展的资源（比如图片、视频、CSS样式表甚至javascript文件），有什么方法呢？这就需要设置&lt;strong>Web可访问资源(Web Accessible Resources, WAR)&lt;/strong>。&lt;/p>
&lt;p>Web可访问的资源是Chrome扩展中的文件，可由Web页面或其他Chrome扩展访问。扩展程序通常使用此功能来显示需要在网页中加载的图像或其他资源，扩展包中任何文件都可以设置成Web访问的。&lt;/p>
&lt;p>默认情况下，扩展中的任何资源都不是Web可访问的，只有扩展本身的页面或Script脚本能够访问这些内容。如果希望扩展以外的Web页面或脚本能够使用扩展中的资源，需要使用&lt;code>manifest.json&lt;/code>中的&lt;code>web_accessible_resources&lt;/code>字段来配置，格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="s2">&amp;#34;web_accessible_resources&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;images/file1.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;css/file2.css&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>&lt;span class="c1">//&amp;lt;all_urls&amp;gt;
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//&amp;#34;extension_ids&amp;#34;: [&amp;#34;chrome-extension://EXTENSION_ID/&amp;#34;],
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//&amp;#34;use_dynamic_url&amp;#34;: true
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>resources&lt;/code>表示需要暴露给外界的资源文件名称；&lt;code>matches&lt;/code>表示匹配的URL，使用match pattern，只有匹配成功的url才能使用暴露出来的资源，也可以使用&lt;code>extension_ids&lt;/code>来匹配其他Chrome扩展。&lt;code>matches&lt;/code>和&lt;code>extension_ids&lt;/code>二者必有一个。&lt;code>use_dynamic_url&lt;/code>，可选项，它为真时，只允许使用动态ID来访问Web可用资源，每个session都会的自己生成动态ID。&lt;/p>
&lt;p>之后，外部Web页面可以通过三种方式访问。一是外部Web页面通过&lt;code>chrome-extension://extension-id/FILE_PATH&lt;/code>直接访问；二是当使用content script时，content script中可以使用Chrome API &lt;code>chrome.runtime.getURL(FILE_PATH)&lt;/code>来访问。&lt;code>chrome.runtime.getURL&lt;/code>将根据自身来自哪个扩展生成extension ID。三是可以使用&lt;code>@@extension_id&lt;/code>来替代javascript中&lt;code>chrome.runtime.getURL&lt;/code>生成extension ID的效果（用法&lt;code>chrome.i18n.getMessage(&amp;quot;@@extension_id&amp;quot;)&lt;/code>），也可以在CSS文件中使用（用法&lt;code>__MSG_@@extension_id__&lt;/code>），注意&lt;code>__MSG_@@extension_id__&lt;/code>用在html的内联css中貌似不生效，只在Web可访问文件的独立CSS/JS文件中生效，可能是因为Chrome扩展觉得Html网页的内容不归它管吧，只有从它这里取出去的文件才会做&lt;code>__MSG_@@extension_id__&lt;/code>的转换。&lt;/p>
&lt;h3 id="实例资源可用性展示">实例：资源可用性展示&lt;/h3>
&lt;p>下面我们通过下面例子中4个图片的可访问性来展示Web可访问资源的用法与性质。为了方便，我们先将该扩展的文件结构展示如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>web_accessible_resources
&lt;span class="ln"> 2&lt;/span> ├─ manifest.json
&lt;span class="ln"> 3&lt;/span> ├─ options.html
&lt;span class="ln"> 4&lt;/span> ├─ assets
&lt;span class="ln"> 5&lt;/span> │ └─ test.css
&lt;span class="ln"> 6&lt;/span> ├─ images
&lt;span class="ln"> 7&lt;/span> │ ├─ icon-128.png
&lt;span class="ln"> 8&lt;/span> │ ├─ test1.png
&lt;span class="ln"> 9&lt;/span> │ ├─ test2.png
&lt;span class="ln">10&lt;/span> │ ├─ test3.png
&lt;span class="ln">11&lt;/span> │ └─ test4.png
&lt;span class="ln">12&lt;/span> └─ js
&lt;span class="ln">13&lt;/span> ├─ content.js
&lt;span class="ln">14&lt;/span> └─ web_access_resources.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>test1.png&lt;/code>-&lt;code>test4.png&lt;/code>是四张标有数字的图片。另外，示例的Demo网页网站为：&lt;a href="https://surprisedcat.github.io/%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/DemoAndTest/javascript_chrome_extension_web_accessible_resources.html">https://surprisedcat.github.io/%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/DemoAndTest/javascript_chrome_extension_web_accessible_resources.html&lt;/a>。该网页相关的结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>DemoAndTest
&lt;span class="ln">2&lt;/span> ├─ javascript_chrome_extension_web_accessible_resources.html
&lt;span class="ln">3&lt;/span> └─ js
&lt;span class="ln">4&lt;/span> └─ web_access_resources.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了便于对比，我们将扩展的&lt;code>option.html&lt;/code>设置的与Demo网页&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>几乎一样（包括&lt;code>web_access_resources.js&lt;/code>也一样），除了content script的js内容用了不同引入方式。因为扩展内部的&lt;code>option.html&lt;/code>是无法使用content script，因此，我们直接用&lt;code>&amp;lt;script src=&amp;quot;js/content.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code>引入，&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>中则是使用扩展静态声明注入。&lt;/p>
&lt;p>首先，我们查看&lt;code>manifest.json&lt;/code>来大体了解下这个扩展：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Web Accessible Resources Demo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;options_page&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;options.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;all_frames&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;js/content.js&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;web_accessible_resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;resources&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;images/test1.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;images/test2.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;images/test3.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;assets/test.css&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/*&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，和Web可访问资源相关的就是&lt;code>web_accessible_resources&lt;/code>，设置了4个&lt;code>https://surprisedcat.github.io&lt;/code>这个域名下访问的的资源，前三个是图片1，2，3，最后一个是一个CSS文件，它调用了图片&lt;code>test3.png&lt;/code>作为背景图片。&lt;code>test4.png&lt;/code>没有被作为Web可访问资源，在扩展的&lt;code>options.html&lt;/code>可以访问，而外部页面无法访问，后面我们将展示这个例子。此外，&lt;code>manifest.json&lt;/code>还使用静态声明注入了&lt;code>js/content.js&lt;/code>。&lt;/p>
&lt;p>下面我们看看&lt;code>javascript_chrome_extension_web_accessible_resources.html&lt;/code>的源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;IE=edge&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">test3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">border-style&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">solid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web accessible resources&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web可用资源示例&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>本页面位于外部网站&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Web页面直接使用Extension ID加载：text1.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Extension ID:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;extension_id_input&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;testButton&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;确定&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test1&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;header2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Content script加载：text2.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test2&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;header3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>CSS作为背景加载：text3.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>一个不在web accessible resources中的文件：text4.png&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test4&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;js/web_access_resources.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>总结来说，就是放了四个框框，每个框框里希望引入一个图片。直观效果如下：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_web_accessible_resources_demo.png" alt="chrome_extension_web_accessible_resources_demo">&lt;/p>
&lt;p>第一个&lt;code>&amp;lt;img id=&amp;quot;test1&amp;quot; height=&amp;quot;100&amp;quot; width=&amp;quot;100&amp;quot;&amp;gt;&lt;/code>和第四个&lt;code>&amp;lt;img id=&amp;quot;test4&amp;quot; height=&amp;quot;100&amp;quot; width=&amp;quot;100&amp;quot;&amp;gt;&lt;/code>都是通过js脚本修改其&lt;code>src&lt;/code>属性来更新图片的。js脚本内容在&lt;code>js/web_access_resources.js&lt;/code>文件中，内容如下；&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//为“testButton”按钮增加监听事件
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;testButton&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">setExtensionID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1">//点击按钮，将输入框中的extension id值赋值给第一、四个&amp;lt;img&amp;gt;标签的src属性。
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setExtensionID&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">input_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;extension_id_input&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test1&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">input_id&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/images/test1.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test4&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">input_id&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/images/test4.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为在Web页面的Html中，Chrome扩展无法使用&lt;code>@@extension_id&lt;/code>或&lt;code>chrome.runtime.getURL()&lt;/code>，所以Html页面若要使用Web可访问资源，只能使用最原始的&lt;code>chrome-extension://extension_id/File_path&lt;/code>的方式。我们可以通过&lt;code>chrome://extensions/&lt;/code>页面找到扩展的ID（Demo中ID为&lt;code>ioianjljdbholheahfhjidofmjpgnfho&lt;/code>，载入后每个用户可能不同）。如果我们已经载入了扩展，就能看到&lt;code>test1.png&lt;/code>已经被载入了，而&lt;code>test4.png&lt;/code>无法访问，并且报错&lt;/p>
&lt;blockquote>
&lt;p>Denying load of chrome-extension://ioianjljdbholheahfhjidofmjpgnfho/images/test4.png. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.&lt;/p>
&lt;/blockquote>
&lt;p>这是因为我们并没有把&lt;code>test4.png&lt;/code>作为Web可访问资源，因此外界无法访问。但是，如果我们打开扩展的选项页&lt;code>options.html&lt;/code>，执行同样的操作，&lt;code>test4.png&lt;/code>是能显示出来的。这是因为&lt;code>options.html&lt;/code>是扩展内的Web页面，可直接访问到扩展内部的所有资源，无需&lt;code>web_accessible_resources&lt;/code>字段。二者区别如下：（图左外部页面，图右扩展&lt;code>options.html&lt;/code>页面。）&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_web_accessible_resources_demo2.png" alt="chrome_extension_web_accessible_resources_demo2.png">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 在实际使用Web可访问资源的时候，遇到一个坑。我刚开始开发Chrome扩展的时候，使用Web Accessible Resources的资源文件是一个名叫&lt;code>test image.jpeg&lt;/code>的图片，这个文件名中间有个空格，当时运行扩展的时候，就是找不到这个图片资源，报找不到资源的错误。后来发现，在js编码的时候，把空格编码成了“%20”，也就是&lt;code>test%20image.jpeg&lt;/code>，因此在&lt;code>manifest.json&lt;/code>中&amp;quot;web_accessible_resources&amp;quot;设置资源名称时应该将空格改成“%20”，这样才能正常加载图片。不过为了少出错误，文件名中最好还是不要有空格等特殊字符吧。&lt;/p>
&lt;/blockquote>
&lt;p>有细心的读者会发现，上面对比的页面的图片与原始Web页面相比，中间两个标题后面多出了两个按钮：“载入图片”和“载入CSS”。这是我们载入扩展后，静态声明注入的&lt;code>js/content.js&lt;/code>文件中添加的DOM元素，其代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//content.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//在标题后添加按钮元素，点击后添加图片src
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">loadButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;载入图片&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleLoadImage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;header2&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loadButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">//使用chrome.runtime.getURL生成带扩展ID的URL
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">handleLoadImage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">strtest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;images/test2.png&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">strtest&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">//在标题后添加按钮元素，点击后添加link元素链接外部CSS
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">loadCSS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;载入CSS&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleLoadCSS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;header3&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">loadCSS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c1">//使用chrome.i18n.getMessage(&amp;#34;@@extension_id&amp;#34;)生成带扩展ID的URL
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">handleLoadCSS&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementsByTagName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;head&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">link&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;link&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;text/css&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;stylesheet&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;chrome-extension://&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">i18n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@@extension_id&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/assets/test.css&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">link&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js代码的关键就是如何生成带extension id的URL，我们分别通过两种方式实现，一是调用&lt;code>chrome.runtime.getURL&lt;/code>接口，二是调用&lt;code>chrome.i18n.getMessage(&amp;quot;@@extension_id&amp;quot;)&lt;/code>这两种都能获得extension id。当在CSS文件中无法使用Chrome API获得extension id时，Chrome的开发人员还为我们提供了&lt;code>__MSG_@@extension_id__&lt;/code>让Web可访问的CSS资源能够动态生成ID。我们在网页中引入Web可访问的CSS样式表&lt;code>test.css&lt;/code>中就是用了&lt;code>__MSG_@@extension_id__&lt;/code>作为第三个方框的背景图：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="ln">1&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">test3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;chrome-extension://__MSG_@@extension_id__/images/test3.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们就能够载入所有Web可访问资源了：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_web_accessible_resources_demo3.png" alt="chrome_extension_web_accessible_resources_demo3.png">&lt;/p>
&lt;h3 id="再谈content-script与网页上下文">再谈content script与网页上下文&lt;/h3>
&lt;p>前面我们已经知道页面的js和扩展content script注入的js运行在两个不同的上下文中。只有同一个上下文中的js是具有互操作性的。比如，同一个网页中无论是内联js还是外部链接引入的js，他们可以共享全局变量、函数等（但是要注意载入顺序，否则会出现前面的js引用后面还未载入的js内容而导致的引用为null的错误）。&lt;/p>
&lt;p>虽然页面的js和扩展content script注入的js二者的运行上下文是隔离的，但是它们都可以操作页面DOM，这也是content script的特殊之处。&lt;/p>
&lt;p>但是在Web可访问资源的场景下，还有一种特殊的javacript文件，它本身属于Chrome扩展，但是通过&lt;code>manifest.json&lt;/code>中的Web可访问资源配置项暴露给了外面的网站，从而被外面网站所引用，这种特殊的js脚本可以叫做injected scripts through web accessible resources。其实，我们可以将这类js简单地理解成当前Web页面引入了一个跨域的js文件，并在Web页面的上下文中运行，因此injected scripts through web accessible resources与页面其他的js本质是一样的，此不过来源比较特殊，是从扩展引入的。因此，injected scripts through web accessible resources的运行上下文就是Web页面的上下文，可以操作DOM，也可以与页面本身的JS互操作。同时，这类JS也和Chrome扩展的上下文没有了关系，因此无法使用任何Chrome API。&lt;/p>
&lt;p>而扩展本身的js如&lt;code>background.js&lt;/code>、&lt;code>popup.js&lt;/code>等，他们完全与Web页面的js上下文隔离开，只能通过Chrome API、content script间接访问页面的DOM元素。（&lt;code>devtools&lt;/code>的js例外，正常也用不到）&lt;/p>
&lt;p>Javascript可访问性总结如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">JS种类&lt;/th>
&lt;th style="text-align:center">可访问的Chrome API&lt;/th>
&lt;th style="text-align:center">DOM访问情况&lt;/th>
&lt;th style="text-align:center">页面JS访问情况&lt;/th>
&lt;th style="text-align:center">附：调试方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">injected scripts through web accessible resources&lt;/td>
&lt;td style="text-align:center">和普通JS无任何差别，不能访问任何扩展API&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">开发者工具-控制台（和页面JS一样）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">content scripts&lt;/td>
&lt;td style="text-align:center">只能访问 storage、i18n、runtime等部分API&lt;/td>
&lt;td style="text-align:center">可以访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">开发者工具-控制台-javascript上下文-切换为对应扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">popup js&lt;/td>
&lt;td style="text-align:center">可访问绝大部分API，除了devtools系列&lt;/td>
&lt;td style="text-align:center">不可直接访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">扩展按钮-右键-审查元素-DevTools&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">background js&lt;/td>
&lt;td style="text-align:center">可访问绝大部分API，除了devtools系列&lt;/td>
&lt;td style="text-align:center">不可直接访问&lt;/td>
&lt;td style="text-align:center">不可以&lt;/td>
&lt;td style="text-align:center">扩展管理页面-查看视图-DevTools&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">devtools js&lt;/td>
&lt;td style="text-align:center">只能访问 devtools、runtime等部分API&lt;/td>
&lt;td style="text-align:center">可以&lt;/td>
&lt;td style="text-align:center">可以&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="消息传递message-passing">消息传递(Message passing)&lt;/h2>
&lt;p>Chrome扩展不同组件的消息传递模式不同。（Todo）&lt;/p>
&lt;h3 id="消息传递方式总结">消息传递方式总结&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center"> &lt;/th>
&lt;th style="text-align:center">js in Web page (including web accessible resources)&lt;/th>
&lt;th style="text-align:center">content-script&lt;/th>
&lt;th style="text-align:center">popup-js background-js&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">js in Web page (including web accessible resources)&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">window.postMessage&lt;/td>
&lt;td style="text-align:center">externally_connectable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">content-script&lt;/td>
&lt;td style="text-align:center">window.postMessage&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">chrome.runtime.sendMessage chrome.runtime.connect&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">popup-js background-js&lt;/td>
&lt;td style="text-align:center">externally_connectable&lt;/td>
&lt;td style="text-align:center">chrome.tabs.sendMessage chrome.tabs.connect&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="丰富的通知apirich-notifications-api">丰富的通知API(Rich notifications API)&lt;/h2>
&lt;p>Chrome扩展可以通过丰富的通知API和模板给用户推送系统通知。Chrome的通知有四类：&lt;/p>
&lt;ol>
&lt;li>基本通知&lt;/li>
&lt;li>带图片的通知&lt;/li>
&lt;li>列表通知&lt;/li>
&lt;li>进度条通知&lt;/li>
&lt;/ol>
&lt;p>所有种类的通知都包含一个标题、消息、一个小图标以及一个消息摘要。不过需要注意的是不同系统之间的消息接口可能不一样（比如MacOS的消息模式就不同）。需要指出，通知API需要在&lt;code>manifest.json&lt;/code>中授予&lt;code>notifications&lt;/code>权限。&lt;/p>
&lt;p>Chrome扩展的通知主要使用&lt;code>chrome.nitification&lt;/code>接口，典型的创建通知的方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">creationCallback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>options&lt;/code>是一个消息类型模板，依照上面提到的四种类型设置。四种模板使用如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//基本通知模板，这四项是必需的
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;basic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是basic
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//带图片通知模板
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;image&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是image
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nx">imageUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_preview_image&amp;#34;&lt;/span>&lt;span class="c1">//多出来图片url这项
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">//列表通知模板
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;list&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是list
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 1.&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//列表项
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 2.&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Item3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;This is item 3.&amp;#34;&lt;/span>&lt;span class="p">}]&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c1">//进度条通知模板
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;progress&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//类型是progress
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Primary message to display&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;url_to_small_icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nx">progress&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="c1">//进度条进度0-100
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般系统中，通知还可以带至多两个&lt;code>action&lt;/code>选项，并可以添加监听事件来回调函数。例如：&lt;code>chrome.notifications.onButtonClicked.addListener(replyBtnClick);&lt;/code>。&lt;/p>
&lt;p>总体而言，Chrome的&lt;code>notification API&lt;/code>比较简单，下面我们通过一个例子来体验下用法与效果。&lt;/p>
&lt;h3 id="实例按时喝水">实例：按时喝水&lt;/h3>
&lt;p>写在最前面，对于windows或macos系统，通知有可能不好用，因此这部分内容我觉得意义不大，不看也行。&lt;/p>
&lt;p>在真正进入这个例子之前，我们先简要介绍下&lt;code>chrome.alarms&lt;/code> API，其主要作用是安排代码定期运行或在将来的指定时间运行，需要授予&lt;code>alarms&lt;/code>权限。&lt;/p>
&lt;p>我们接下来要写的这个扩展是一个定时通知提醒我们喝水的小程序。其&lt;code>manifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Drink Water Event Popup&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demonstrates usage and features of the event page by reminding user to drink water&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s2">&amp;#34;alarms&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;notifications&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;default_title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Drink Water Event&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;drink_water128.png&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其中需要说明是因为要定时运行，因此我们使用&lt;code>chrome.alarms&lt;/code> API需要&lt;code>alarms&lt;/code>，又因为需要通知用户因此需要&lt;code>notifications&lt;/code>权限。&lt;/p>
&lt;p>我们在&lt;code>popup.html&lt;/code>和&lt;code>popup.js&lt;/code>中设置定时运行程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Water Popup&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">hydrateImage&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#80DEEA&lt;/span> &lt;span class="kc">dotted&lt;/span> &lt;span class="kc">thick&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c">&amp;lt;!--
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c"> - JavaScript and HTML must be in separate files
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="c"> --&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;./stay_hydrated.png&amp;#39;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;hydrateImage&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="c">&amp;lt;!-- An Alarm delay of less than the minimum 1 minute will fire
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c"> in approximately 1 minute increments if released --&amp;gt;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sampleMinute&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Sample minute&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;min15&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;15&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>15 Minutes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;min30&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;30&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>30 Minutes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;cancelAlarm&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Cancel Alarm&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个网页主题很简单，就是一幅图片后面跟了四个按钮。每个按钮在&lt;code>pop.js&lt;/code>中为其添加了一个监听事件。如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">minutes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">parseFloat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">delayInMinutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">minutes&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">minutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">minutes&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="c1">//存储定时时长
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">clearAlarm&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clearAll&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">//An Alarm delay of less than the minimum 1 minute will fire
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">// in approximately 1 minute increments if released
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sampleMinute&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;min15&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;min30&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cancelAlarm&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">clearAlarm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js内容就是给按钮加上点击的监听事件，分别设置不同的定时时间（通过按钮的&lt;code>value&lt;/code>传递参数），最后一个是清除定时运行。设定或清除定时程序时，也会捎带把扩展图标上的badge设置上。&lt;/p>
&lt;p>最后，我们来看下发出通知的&lt;code>background.js&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//定时到时间后的操作发出通知
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onAlarm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;basic&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">iconUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;stay_hydrated.png&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Time to Hydrate&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Everyday I\&amp;#39;m Guzzlin\&amp;#39;!&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nx">buttons&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Keep it Flowing.&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">priority&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">//如果点击通知的按钮则根据上一次的定时时长重置定时程序
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifications&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onButtonClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;minutes&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alarms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">delayInMinutes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">minutes&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据我的实际运行经验，定时程序是能运行的，因为能发现到时间了badge状态会改变，但是由于操作系统原因，通知并没有发送出来。所以这部分内容仅供参考吧。&lt;/p>
&lt;h2 id="匹配模式match-pattern">匹配模式(match pattern)&lt;/h2>
&lt;p>匹配模式内容请参考整合版文档：&lt;a href="../%E7%BD%91%E9%A1%B5%E8%B5%84%E6%96%99/Javascript-Chrome%E6%89%A9%E5%B1%95%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D.html">Chrome扩展模式匹配&lt;/a>&lt;/p>
&lt;h2 id="完成实例复现">完成实例复现&lt;/h2>
&lt;p>经过前面的学习，我们已经拥有了Chrome扩展开发的基础，如果有兴趣的话，我们可以复现下面这个实例：&lt;/p>
&lt;p>素材来源：&lt;a href="https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two">https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two&lt;/a>&lt;/p>
&lt;p>简介：这是要做一个Pomodoro时钟。Pomodoro一词来源于番茄工作法（Pomodoro Technique），是一种时间管理方法，在1980年代由Francesco Cirillo创立。该方法使用一个定时器来分割出一个一般为25分钟的工作时间和5分钟的休息时间，而那些时间段被称为pomodoros，为意大利语单词 pomodoro（中文：番茄）之复数。我们做的这个Pomodoro时钟要有倒计时、设定时间以及任务管理的功能。如果觉得这个工作方法有用，平时工作学习中也可以尝试使用这个扩展^_^。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google Chrome Content Script &lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#files">https://developer.chrome.com/docs/extensions/mv3/content_scripts/#files&lt;/a>&lt;/li>
&lt;li>Manifest - Web Accessible Resources &lt;a href="https://developer.chrome.com/docs/extensions/mv3/manifest/web_accessible_resources/">https://developer.chrome.com/docs/extensions/mv3/manifest/web_accessible_resources/&lt;/a>&lt;/li>
&lt;li>GoogleChrome/chrome-extensions-samples &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples">https://github.com/GoogleChrome/chrome-extensions-samples&lt;/a>&lt;/li>
&lt;li>Message passing &lt;a href="https://developer.chrome.com/docs/extensions/mv3/messaging/">https://developer.chrome.com/docs/extensions/mv3/messaging/&lt;/a>&lt;/li>
&lt;li>Rich notifications API &lt;a href="https://developer.chrome.com/docs/extensions/mv3/richNotifications/">https://developer.chrome.com/docs/extensions/mv3/richNotifications/&lt;/a>&lt;/li>
&lt;li>Match patterns &lt;a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">https://developer.chrome.com/docs/extensions/mv3/match_patterns/&lt;/a>&lt;/li>
&lt;li>番茄时钟扩展 &lt;a href="https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two">https://github.com/KindEni/Chrome-Extension-Series/tree/main/Part%20Two&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展实例（二）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%BA%8C/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%BA%8C/</guid><description>
&lt;h2 id="chrome扩展实例二---omit-in-toc---">Chrome扩展实例（二）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在Chrome扩展实例（一）中我们用一个例子走通了扩展开发的大体流程，实现了简单的换背景颜色功能。其中执行的js函数将上下文设置为浏览的网页页面，用的是&lt;code>chrome.scripting.executeScript&lt;/code> API来改变上下文环境。这其实是Chrome扩展content script的一种，这即是本篇文章介绍的重点。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#content-script">Content Script&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#content-script%E5%8F%AF%E7%94%A8%E6%8E%A5%E5%8F%A3">Content Script可用接口&lt;/a>&lt;/li>
&lt;li>&lt;a href="#content-script%E4%B8%8A%E4%B8%8B%E6%96%87">Content Script上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#inject-scripts">Inject Scripts&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E9%9D%99%E6%80%81%E5%A3%B0%E6%98%8Edeclared-statically%E6%B3%A8%E5%85%A5">静态声明（declared statically）注入&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4%E7%BB%9F%E8%AE%A1">实例：阅读时间统计&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8A%A8%E6%80%81%E5%A3%B0%E6%98%8Edeclared-dynamically%E6%B3%A8%E5%85%A5">动态声明（declared dynamically）注入&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E4%B8%93%E6%B3%A8%E6%A8%A1%E5%BC%8F">实例：专注模式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%A4%AA%E9%80%82%E5%90%88%E6%B3%A8%E5%85%A5javascript">为什么不太适合注入javascript&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%AF%E9%80%89%E4%B8%BA%E6%89%A9%E5%B1%95%E6%B7%BB%E5%8A%A0%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">（可选）为扩展添加键盘快捷方式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BB%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5programmatically-injected">以编程方式注入（programmatically injected）&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%9E%E4%BE%8B%E6%97%A0%E5%9B%BE%E6%A8%A1%E5%BC%8F">实例：无图模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="content-script">Content Script&lt;/h2>
&lt;p>Content script是扩展中运行在网页上下文中的typescript/javascript/css文件，它直接作用于网页的DOM，能够直接访问、修改网页元素。但是由于content script的上下文与扩展不同，因此扩展本身交互时需要消息传递机制。同时，content script并不能像service worker或popup那样可以使用几乎所有的Chrome API，它能够使用的Chrome API很有限。&lt;/p>
&lt;h3 id="content-script可用接口">Content Script可用接口&lt;/h3>
&lt;p>Content Script能够&lt;strong>直接使用&lt;/strong>的Chrome API如下：&lt;/p>
&lt;ul>
&lt;li>i18n （语言国际化接口）&lt;/li>
&lt;li>storage （存储接口）&lt;/li>
&lt;li>runtime （运行时接口）
&lt;ul>
&lt;li>connect&lt;/li>
&lt;li>getManifest&lt;/li>
&lt;li>getURL&lt;/li>
&lt;li>id&lt;/li>
&lt;li>onConnect&lt;/li>
&lt;li>onMessage&lt;/li>
&lt;li>sendMessage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>虽然content script无法直接调用其他Chrome API，但是可以利用消息传递机制，通过service worker或popup等间接地调用其他Chrome API。&lt;/p>
&lt;h3 id="content-script上下文">Content Script上下文&lt;/h3>
&lt;p>上下文可以说是Content Script最核心的内容。默认情况下，content script运行的上下文是一个独立的环境。这个独立环境是所在扩展所独享的，因此content script默认情况下只能操作所在扩展中的内容。扩展独立的空间保证content script的内容不会与网页页面内容、其他扩展的内容不会产生冲突。&lt;/p>
&lt;p>但是，如果content script只能在扩展独立的空间中发挥作用，那么它就没法访问、修改网页元素，从而实现目标功能了。因此，Chrome提供一种&lt;strong>叫做“Inject scripts”的技术，来修改content script执行时的上下文&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Inject scripts&lt;/strong>改变上下问的方式有三种：&lt;/p>
&lt;ol>
&lt;li>静态声明（declared statically）注入&lt;/li>
&lt;li>动态声明（declared dynamically）注入&lt;/li>
&lt;li>以编程方式注入（programmatically injected）&lt;/li>
&lt;/ol>
&lt;h2 id="inject-scripts">Inject Scripts&lt;/h2>
&lt;p>直观地说，Inject Scripts就是将扩展中typescript/javascript/css文件注入到特定的运行环境中，这样就能够&lt;strong>用目标环境的上下文覆盖原来文件的上下文&lt;/strong>。而inject script的三种模式，可以根据开发需求，酌情选择。&lt;/p>
&lt;h3 id="静态声明declared-statically注入">静态声明（declared statically）注入&lt;/h3>
&lt;p>静态声明注入是inject script最常用的模式。这种模式需要在&lt;code>manifest.json&lt;/code>文件中提前写入。优点是方便简洁，缺点是缺乏灵活性，需要提前对&lt;code>manifest.json&lt;/code>内容进行规划。静态声明注入使用的&lt;code>manifest.json&lt;/code>中的&lt;code>content_scripts&lt;/code>字段，基本模式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;扩展名称&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;https://*.github/*&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;css&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;my-styles.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;content-script.js&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;run_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;document_idle&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;match_about_blank&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;match_origin_as_fallback&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单来说，&lt;code>content_script&lt;/code>在匹配成功&lt;code>matches&lt;/code>字段的网页中，注入&lt;code>js&lt;/code>指定的javascript文件和&lt;code>css&lt;/code>指定的css文件，其中&lt;code>js&lt;/code>和&lt;code>css&lt;/code>都可以指定一组文件。&lt;code>maches&lt;/code>，&lt;code>js&lt;/code>，&lt;code>css&lt;/code>此三个字段是&lt;code>content_script&lt;/code>的核心字段，后面三个字段都是功能配置字段。&lt;code>matches&lt;/code>字段的使用详情可参见文章&lt;a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">https://developer.chrome.com/docs/extensions/mv3/match_patterns/&lt;/a>以及补充内容&lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#matchAndGlob">https://developer.chrome.com/docs/extensions/mv3/content_scripts/#matchAndGlob&lt;/a>。三种功能字段介绍如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>run_at&lt;/code>:在什么时候注入内容文件，有三个选项&lt;code>document_start&lt;/code>、&lt;code>document_end&lt;/code>、&lt;code>document_idle&lt;/code>，默认选项是&lt;code>document_idle&lt;/code>。
&lt;ul>
&lt;li>&lt;code>document_start&lt;/code>：DOM开始载入。&lt;/li>
&lt;li>&lt;code>document_end&lt;/code>：DOM主体部分载入完毕，资源文件（如图像、脚本）可能尚在载入中。&lt;/li>
&lt;li>&lt;code>document_idle&lt;/code>：DOM和资源文件全部载入完毕。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>match_about_blank&lt;/code>：如果&lt;code>matches&lt;/code>字段能够匹配空页面&lt;code>about:blank&lt;/code>，注入是否生效，默认&lt;code>false&lt;/code>。常见于通配符匹配场景。&lt;/li>
&lt;li>&lt;code>match_origin_as_fallback&lt;/code>：当页面中包含框架（frame），如果框架的URL不匹配&lt;code>matches&lt;/code>字段，但是框架所在的母网页匹配&lt;code>matches&lt;/code>字段，内容注入是否生效，默认为&lt;code>true&lt;/code>。这个属性适用于manifest V3及以上版本的扩展，同时由于HTML5中框架（frame）字段遭到删除，这条可能主要用于兼容老版本网页或&lt;code>&amp;lt;iframe&amp;gt;&lt;/code>标签。&lt;/li>
&lt;/ul>
&lt;p>下面我们就用一个例子解释静态声明注入的用法。&lt;/p>
&lt;h4 id="实例阅读时间统计">实例：阅读时间统计&lt;/h4>
&lt;p>有了《chrome扩展入门》《chrome扩展实例（一）》两篇文章，我们对扩展的基本开发流程已有了基本的了解。现在我们就省略已知的步骤，快速实现一个新的扩展。首先,依旧是&lt;code>manifest.json&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Reading time&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;估计阅读文章所需要的时间&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;content_scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;js&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="s2">&amp;#34;scripts/content.js&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;matches&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/studynotes/*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="s2">&amp;#34;https://surprisedcat.github.io/projectnotes/*&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>manifest.json&lt;/code>文件前面几项都没什么再需要解释的了，&lt;code>icons&lt;/code>的素材来自URL&lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/tutorial.reading-time/images">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/tutorial.reading-time/images&lt;/a>（如果链接失效，可以随自己喜好找合适的图片）。新增的内容&lt;code>content_scripts&lt;/code>字段即为静态声明注入&lt;code>content_scripts&lt;/code>，注入的js脚本来自扩展根目录下的&lt;code>scripts/content.js&lt;/code>，扩展可用的网页是匹配&lt;code>matches&lt;/code>字段的本人博客网页^_^。该扩展运行时，Chrome浏览器会给扩展提供网页URL，当&lt;code>matches&lt;/code>字段匹配成功时，注入js脚本的功能生效（默认在网页完全载入的&lt;code>document_idle&lt;/code>阶段启动注入）。&lt;/p>
&lt;p>接下来，新建目录&lt;code>scripts&lt;/code>并在其下新建js文件&lt;code>content.js&lt;/code>，并添加如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//content_script.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//获取网页中的文章&amp;lt;article&amp;gt;标签（并不是所有网页都有，我的博客中有这个标签）
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">article&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;article&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//判断是否成功，不成功则返回null，也可能返回多个，为了方便我们先不考虑
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">article&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">article&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//获取标签中文本
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//分中英文统计字符
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//中文，/\p{Unified_Ideograph}/ug 匹配所有中文
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">chineseChar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">matchAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\p{Unified_Ideograph}/ug&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">chineseNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">chineseChar&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//计算文本长度
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//英文，去除中文后再匹配
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">englishChar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[^\w-]/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">matchAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[^\s]+/g&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">englishNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">englishChar&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//计算文本长度
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//假设我们每分钟阅读中文400个字，英文300单词，计算阅读时长
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">readingTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chineseNum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">englishNum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//创建&amp;lt;p&amp;gt;元素存放结果
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">badge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">badge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`⏱️ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">readingTime&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> min read`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//在&amp;lt;h1&amp;gt;标题后面添加阅读时间的&amp;lt;p&amp;gt;元素
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">heading&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">article&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;h1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nx">heading&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertAdjacentElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;afterend&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">badge&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要指出，这个&lt;code>content.js&lt;/code>文件中的DOM操作针对的是本人博客网页的操作，并不能无缝移植到其他网页上。接下来，我们载入这个扩展。当我们打开一般网页时，这个扩展由于匹配字段并不成功，不会生效，只有当我们访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>https://surprisedcat.github.io/studynotes/*
&lt;span class="ln">2&lt;/span>https://surprisedcat.github.io/projectnotes/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两组网页时，扩展才会生效。那么，我们就访问上一篇文章《javascript-chrome扩展实例（一）》的URL&lt;a href="https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/">https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/&lt;/a>，显然时能够匹配的，注意看大标题“javascript-Chrome扩展实例（一）”下面确实多出了一行阅读时间。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_readingtime.png" alt="chrome_extension_readingtime.png">&lt;/p>
&lt;p>静态声明注入实验成功！附：reading_time文件结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>reading_time
&lt;span class="ln">2&lt;/span> ├─manifest.json
&lt;span class="ln">3&lt;/span> ├─images
&lt;span class="ln">4&lt;/span> │ ├─icon-128.png
&lt;span class="ln">5&lt;/span> │ ├─icon-16.png
&lt;span class="ln">6&lt;/span> │ ├─icon-32.png
&lt;span class="ln">7&lt;/span> │ └─icon-48.png
&lt;span class="ln">8&lt;/span> └─scripts
&lt;span class="ln">9&lt;/span> └─content.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态声明declared-dynamically注入">动态声明（declared dynamically）注入&lt;/h3>
&lt;p>如果某些网站不是那么知名，扩展无法在&lt;code>manifest.json&lt;/code>设计时就预见到或者对于某个匹配到的网站，并不是要总是注入内容脚本，需要在运行时再决定。对于这两种情况，静态声明注入就无法胜任，我们需要一种更灵活的内容注入方式，这就需要&lt;strong>动态声明（declared dynamically）注入&lt;/strong>。&lt;/p>
&lt;p>从Chrome 96开始，我们可以调用&lt;code>chrome.scripting&lt;/code> API进行动态声明注入，其主要方法包括：&lt;/p>
&lt;ol>
&lt;li>注册content script：&lt;code>chrome.scripting.registerContentScripts&lt;/code>，&lt;code>chrome.scripting.insertCSS&lt;/code>。&lt;/li>
&lt;li>查看当前所有动态注册的content script：&lt;code>chrome.scripting.getRegisteredContentScripts&lt;/code>。&lt;/li>
&lt;li>更新content script：&lt;code>chrome.scripting.updateContentScripts&lt;/code>。&lt;/li>
&lt;li>删除已注册的content script：&lt;code>chrome.scripting.unregisterContentScripts&lt;/code>，&lt;code>chrome.scripting.removeCSS&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>动态声明注入通常至少需要两个权限：&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>，其他权限根据所需的功能额外再提供。&lt;/p>
&lt;p>区别与静态声明注入使用&lt;code>matches&lt;/code>字段来决定哪些URL执行内容注入，动态声明注入使用&lt;strong>注入目标&lt;/strong>（Injection targets）来决定内容注入对象。注入目标使用&lt;code>tabID&lt;/code>来唯一决定。&lt;/p>
&lt;blockquote>
&lt;p>tabID是Chrome标签页面window对象的ID，当我们打开多个tab页面时，每个tab页面都是一个独立的window对象，它们通过不同tabId区分，默认内容注入只在页面的主框架中有效。&lt;/p>
&lt;/blockquote>
&lt;h4 id="实例专注模式">实例：专注模式&lt;/h4>
&lt;p>现在网页上面有很多杂七杂八的元素，当我们阅读时很容易被这些元素分心，因此我们想做一个扩展，能够暂时性地让这些杂七杂八的元素消失，是我们能够更专心地阅读文章。本例使用的素材修改自官方教程&lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/">https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/&lt;/a>。&lt;/p>
&lt;p>我们整体思路如下：先选CSDN网站为例，上面有很多妨碍阅读的元素，我们点击该扩展后，能将这些元素的CSS的&lt;code>display&lt;/code>属性修改为&lt;code>none&lt;/code>。假设我们已经提前写好了一个CSS文件，只要注入此文件就能实现（而非一个个地设置哪些元素应该不可见）。此外，我们还需要设置一个键盘快捷键，能够方便地在一般模式和专注模式中切换。&lt;/p>
&lt;p>我们首先设计&lt;code>manifest.json&lt;/code>文件，因为不需要静态声明注入，所以不需要&lt;code>content_scripts&lt;/code>字段，取而代之的是动态声明注入所需要的&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>两个权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Focus Mode&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Enable reading mode on Chrome&amp;#39;s official Extensions and Chrome Web Store documentation.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>manifest&lt;/code>其他部分之前都应该讲解过了，现阶段唯一需要指出的是我们会在service worker的&lt;code>background.js&lt;/code>中动态声明注入内容。&lt;/p>
&lt;p>为了区分当前网页是一般模式还是专注模式，我们给扩展的图标添加一个小徽章（badge），当开启专注模式时显示“ON”，否则显示“OFF”。所谓“badge”就是在扩展图标上显示一些文本，可以用来更新一些小的扩展状态提示信息。因为“badge”空间有限，所以只支持4个以下的字符（英文4个，中文2个）。“badge”无法通过配置文件来指定，必须通过代码实现，设置badge文字和颜色可以分别使用&lt;code>chrome.action.setBadgeText({text: 'WORD'})&lt;/code>和&lt;code>chrome.action.setBadgeBackgroundColor({color:[255, 0, 0, 255]})&lt;/code>。&lt;/p>
&lt;p>每次点击扩展图标，就换切换网页状态，同时badge状态也会跟着改变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//初始状态下，状态为OFF
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//添加监听事件，点击扩展action图标
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">//tab默认指当前的tab页面
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//获取当前badge状态
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">//点击后的状态总是和之前相反
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;OFF&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//更改badge状态的文字
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/chrome_extension_badge.png" alt="chrome_extension_badge.png">&lt;/p>
&lt;p>以上代码实现了Badge状态文字的切换。我们希望在CSDN的网页上实现开启专注模式时，杂乱元素不可见，因此我们要添加CSDN的URL作为判别条件，同时根据Badge状态文字，决定注入还是取消注入CSS文件。因此，完善后的&lt;code>background.js&lt;/code>代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//初始状态下，状态为OFF
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//目标URL
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">CSDN_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;https://blog.csdn.net/&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">//添加监听事件，点击扩展action图标
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//tab默认指当前的tab页面
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">//如果以CSDN_URL开头则执行内容脚本
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CSDN_url&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//获取当前badge状态
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//点击后的状态总是和之前相反
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">prevState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;OFF&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//更改badge状态的文字
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBadgeText&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1">//根据Badge状态文字执行注入CSS和取消注入CSS
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;ON&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertCSS&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="c1">//注入CSS
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css/csdn.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">nextState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;OFF&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeCSS&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="c1">//取消注入CSS
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css/csdn.css&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就以动态声明注入实现了两种模式CSS的切换。&lt;code>csdn.css&lt;/code>的内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="ln"> 1&lt;/span>&lt;span class="c">/*CSDN 专注模式样式表*/&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c">/*URL: *blog.csdn.net/* */&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">csdn-toolbar&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">aside&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">recommend-right&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">toolBarBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">first-recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">second-recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">csdn-side-toolbar&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">pcCommentBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">insert-baidu-box&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">recommend-box-style&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">template-box&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">blog-footer-bottom&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogHuaweiyunAdvert&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogColumnPayAdvert&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nt">body&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">main_father&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">clearfix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">d-flex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">justify-content-center&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">mainBox&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">main&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">aliceblue&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">blogExtensionBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">js_content&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">pre&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c">/*使用内联样式表以及!important的顽固分子*/&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c">/*一般情况不要再扩展中使用!important*/&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">treeSkill&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">pcCommentBox&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="nn">recommendNps&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">nodata&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">aliceblue&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="cp">!important&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们可以重新载入扩展，选择CSDN的博客来测试下效果。示例URL:&lt;a href="https://blog.csdn.net/wuyxinu/article/details/115839575">https://blog.csdn.net/wuyxinu/article/details/115839575&lt;/a>。&lt;/p>
&lt;p>一般模式：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_focus_mode_before.png" alt="chrome_extension_focus_mode_before.png">&lt;/p>
&lt;p>专注模式：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_focus_mode_after.png" alt="chrome_extension_focus_mode_after.png">&lt;/p>
&lt;p>动态声明注入试验成功！附：focus_mode文件结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>focus_mode
&lt;span class="ln"> 2&lt;/span>├─background.js
&lt;span class="ln"> 3&lt;/span>├─manifest.json
&lt;span class="ln"> 4&lt;/span>├─css
&lt;span class="ln"> 5&lt;/span>│ └─ csdn.css
&lt;span class="ln"> 6&lt;/span>└─images
&lt;span class="ln"> 7&lt;/span> ├─icon-128.png
&lt;span class="ln"> 8&lt;/span> ├─icon-16.png
&lt;span class="ln"> 9&lt;/span> ├─icon-32.png
&lt;span class="ln">10&lt;/span> └─icon-48.png
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="为什么不太适合注入javascript">为什么不太适合注入javascript&lt;/h4>
&lt;p>上面的例子我们动态注入的是CSS样式表，那么是否可以注入javascript文件呢？可以的。事实上，最开始我对官方示例改造时就用的是动态注入javascript。但是动态注入javascript时需要指定&lt;code>runAt&lt;/code>，而之前我们说明&lt;code>runAt&lt;/code>只有三个时刻，这三个时刻都需要重新载入网页，对于扩展来说实在不方便，因此我们采用了不需要重载网页的CSS样式表来做示例。&lt;/p>
&lt;p>那么，有没有一种不需要重载网页就能运行javascript的内容注入模式呢？当然有的，就是下一节介绍的&lt;strong>以编程方式注入&lt;/strong>。&lt;/p>
&lt;h4 id="可选为扩展添加键盘快捷方式">（可选）为扩展添加键盘快捷方式&lt;/h4>
&lt;p>为了使用方便，我们还可以给扩展添加键盘快捷方式。比如可以通过快捷键启用/关闭专注模式。我们只需要在&lt;code>manifest.json&lt;/code>最后添加如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//...
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;commands&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;_execute_action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;suggested_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ctrl+B&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;mac&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Command+B&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>command&lt;/code>字段代表监听的键盘事件。&lt;code>_execute_action&lt;/code>等同于点击扩展图标事件&lt;code>action.onClicked()&lt;/code>，因此我们不需要额外添加任何代码。&lt;code>suggested_key&lt;/code>则是指定的快捷键，对于不同的操作系统（win、mac）快捷键有所区别。&lt;/p>
&lt;p>更多关于键盘快捷键的内容可参考&lt;a href="https://developer.chrome.com/docs/extensions/reference/commands/">https://developer.chrome.com/docs/extensions/reference/commands/&lt;/a>。&lt;/p>
&lt;h3 id="以编程方式注入programmatically-injected">以编程方式注入（programmatically injected）&lt;/h3>
&lt;p>我们前来介绍的两种内容注入方式都或多或少有些缺点。静态声明注入需要开发者极富远见，在&lt;code>manifest.json&lt;/code>设计阶段就能够决定未来各种情况，否则就得频繁地更新插件；动态声明注入后又得重载网页让javascript生效，十分麻烦。能否可以让注入的js内容实时生效呢？此时就可以使用以编程方式注入（programmatically injected）。它允许扩展使用&lt;code>chrome.scripting.executeScript&lt;/code> API在特定事件或特殊场景执行内容注入。&lt;/p>
&lt;p>以编程方式注入是最灵活多变的注入方法，它不仅可以像前两种方式那样选择Javascript或CSS文件进行注入，还可以选择可用的Javascript函数进行注入，例如在《javascript-chrome扩展实例（一）》中的修改背景颜色的实例，就是采用了Javascript函数注入的方式。但是如果该模式运用的不合理就会使得代码变得杂乱而无条理。其一般形式代码框架如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//使用js/css文件注入方式
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="c1">//注入的目标tab页面
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;content-script.js&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">//注入的文件
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">//使用js函数注入方式
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//注入的目标tab页面
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">func&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">injectedFunction&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//注入的函数，这个函数必须当前脚本可调用的
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;arg1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;arg2&amp;#34;&lt;/span> &lt;span class="p">]&lt;/span>&lt;span class="c1">//函数的参数
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">injectedFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;orange&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，在使用函数注入的方式时，注入的函数是&lt;code>chrome.scripting.executeScript&lt;/code>调用中引用的函数的&lt;strong>副本&lt;/strong>，而不是原始函数本身。因此，函数的主体必须是自包含的(self-contained)，即不能使用函数以外的上下文内容；对函数外部变量的引用将导致内容脚本引发引用错误（ReferenceError）。&lt;/p>
&lt;p>以编程方式注入通常至少需要两个权限：&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>，其他权限根据所需的功能额外再提供。&lt;/p>
&lt;h4 id="实例无图模式">实例：无图模式&lt;/h4>
&lt;p>这个实例将使用以编程方式注入删除当前激活tab页面的所以图像元素&lt;code>&amp;lt;img&amp;gt;&lt;/code>，这个简单的扩展只包含三种文件：&lt;code>manifest.json&lt;/code>、&lt;code>background.js&lt;/code>和&lt;code>images&lt;/code>文件夹中的图标。&lt;/p>
&lt;p>&lt;code>manifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;No Images&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Remove all the images in the web pages&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/icon-128.png&amp;#34;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里没有什么新的知识。只需要注意以编程方式注入需要两种权限&lt;code>activeTab&lt;/code>和&lt;code>scripting&lt;/code>。我们在&lt;code>background.js&lt;/code>中实现删除图片元素的js功能代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClicked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">includes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;chrome://&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//chrome设置页面不生效
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//以编程方式注入
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="c1">//tabId默认是当前激活tab页面的ID
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">removeImages&lt;/span>&lt;span class="c1">//调用函数
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeImages&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//选出所有&amp;lt;img&amp;gt;元素
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">elememts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;img&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elememts&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">elememts&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1">//元素删除的模式，并非直接删除，而是通过父元素删除
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parentNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们载入扩展，用百度主页来做测试：&lt;/p>
&lt;p>之前，下图中百度图标是存在的：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_no_images_before.png" alt="chrome_extension_no_images_before.png">&lt;/p>
&lt;p>点击扩展后，百度主页的图标被删除了：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_no_images_after.png" alt="chrome_extension_no_images_after.png">&lt;/p>
&lt;p>以编程方式注入内容实验成功！&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文以三种方式实现了CSS/Javascript内容的注入，分别是静态声明注入、动态声明注入和以编程方式注入。首先需要注意注入的内容所在上下文与扩展所在上下文的区别。注入内容的上下文需要与目标tab网页一致。其次，我们需要根据不同的场景选择合理的注入方式，还需要给予注入操作权限。内容注入是Chrome扩展实现其功能多样性的灵活。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;li>Content Script &lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/">https://developer.chrome.com/docs/extensions/mv3/content_scripts/&lt;/a>&lt;/li>
&lt;li>Focus Mode &lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/">https://developer.chrome.com/docs/extensions/mv3/getstarted/tut-focus-mode/&lt;/a>&lt;/li>
&lt;li>Page redder &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/sample.page-redder">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/sample.page-redder&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展实例（一）</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%AE%9E%E4%BE%8B%E4%B8%80/</guid><description>
&lt;h2 id="chrome扩展实例一---omit-in-toc---">Chrome扩展实例（一）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在Chrome扩展入门中，我们写了一个最简单的形式化Hello插件，这个插件除了点击之后显示写字符外，没有任何实际作用，在这一章节中我们将写一些具备简单功能的扩展。这些扩展需要通过后台、前台或二者配合实现，主要编程语言是JavaScript，使用Chrome浏览器提供的API。我们更希望在开发实例中逐步学习Chrome扩展的内容。&lt;/p>
&lt;p>Chrome API文档：&lt;a href="https://developer.chrome.com/docs/extensions/reference/">https://developer.chrome.com/docs/extensions/reference/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#service-worker%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1">Service Worker后台服务&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B%E5%B0%86%E6%BF%80%E6%B4%BB%E7%9A%84tab%E9%A1%B5%E9%9D%A2%E7%A7%BB%E8%87%B3%E9%A6%96%E4%BD%8D">后台服务实例：将激活的Tab页面移至首位&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">扩展的权限管理&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8permission%E7%9A%84%E5%AE%9E%E4%BE%8B">自定义扩展使用permission的实例&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E4%BF%AE%E6%94%B9%E5%8E%9F%E7%BD%91%E9%A1%B5">使用扩展修改原网页&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%88%86%E7%A6%BB%E7%BD%91%E9%A1%B5%E5%85%83%E7%B4%A0%E5%92%8C%E8%84%9A%E6%9C%AC">分离网页元素和脚本&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87">扩展的上下文&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2">选项设置页面&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="service-worker后台服务">Service Worker后台服务&lt;/h2>
&lt;p>Service Worker是Chrome扩展在后台运行并监听和响应事件的服务程序，具有相当大的权限，几乎可以使用所有的Chrome API，作为扩展的支柱存在，稍微复杂一些的扩展都会需要service worker。在过去的版本中，service worker原名叫background算是非常贴切的名称了。&lt;/p>
&lt;p>Service Worker是&lt;strong>事件驱动的服务&lt;/strong>，平时处于后台静默或休眠状态，当注册在Chrome的API&lt;strong>监听到相应事件&lt;/strong>时才会启动。Service worker注册并安装成功后，运行于浏览器后台，不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的Web请求。&lt;/p>
&lt;h3 id="后台服务实例将激活的tab页面移至首位">后台服务实例：将激活的Tab页面移至首位&lt;/h3>
&lt;p>我们下面用一个例子了解下插件的后台service worker是如何工作的。该例子的作用是将处于激活状态的tab页面移至首位，例如当我们点击某个页面时，该页面的标签页就会被移到首位。为了方便，该例子不会用到&lt;code>popup&lt;/code>，&lt;code>conetent&lt;/code>等其他页面，只用后台的service worker。&lt;/p>
&lt;p>首先必然是写配置清单&lt;code>manifest.json&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MoveToFisrt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to move the activated tab to the first place&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>清单中多出的配置项“background”就是用来指定service worker。&lt;code>manifes.json&lt;/code>中使用的都是相对路径，因此我们在&lt;code>manifest.json&lt;/code>同级目录添加&lt;code>background.js&lt;/code>文件。其主要功能就是将激活的标签页移至首位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//background.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//添加tab激活的事件监听器，事件触发后调用回调函数moveToFirstPosition
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">//该addListener的回调函数形式：(activeInfo: object) =&amp;gt; void
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//activeInfo {tabID:tabID , windowId:windowId}
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onActivated&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//定义回调函数moveToFirstPosition
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// 将当前的tab移到首位即index:0。
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Success.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Error: Tabs cannot be edited right now (user may be dragging a tab).&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">//如果标签无法移动，那么等50ms再尝试
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">moveToFirstPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">activeInfo&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段js代码难度并不大，但是Chrome API有一个默认规则需要注意：&lt;/p>
&lt;blockquote>
&lt;p>除非特殊说明，&lt;code>chrome.*&lt;/code>的API都是异步的。因此调用后会立即返回，而不会等待异步的操作完成。如果需要对异步操作的结果进行处理，需要使用回调函数、&lt;code>Promise&lt;/code>或&lt;code>async...await...&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>所以，在使用Chrome API开发时，我们会经常见到&lt;code>async ... await..&lt;/code>的形式。关于这种语法，可以参考ES 8中新增的规范。&lt;/p>
&lt;p>现在我们可以在Chrome浏览器中载入这个扩展并尝试了！&lt;/p>
&lt;p>这个例子中我们只是用了后台的service worker(&lt;code>background.js&lt;/code>)，该js脚本向Chrome的tab接口添加了一个事件监听器，当一个tab标签被激活后，会触发该事件监听器从而执行后台功能（&lt;code>moveToFirstPosition&lt;/code>函数）。Chrome的后台脚本基本都是使用事件驱动的模式，这样可以降低扩展对内存的消耗。&lt;/p>
&lt;h2 id="扩展的权限管理">扩展的权限管理&lt;/h2>
&lt;p>在网络安全与数据隐私重要性日益凸显的当下，Chrome在&lt;code>V3&lt;/code>版本的&lt;code>manifest.json&lt;/code>中，着重考虑了安全与隐私，甚至到了不进行权限授予就不能使用大部分Chrome API的程度。当我们需要操作浏览器或用户的相关数据等Chrome API时，需要给予扩展相对应的权限（Permissions），从而帮助扩展程序或应用程序受到攻击时尽可能减小损失。扩展有四种类型的权限：&lt;/p>
&lt;ol>
&lt;li>&lt;code>permissions&lt;/code>：包含API文档中特点的权限字段如（&lt;code>storage&lt;/code>,&lt;code>geolocation&lt;/code>）&lt;/li>
&lt;li>&lt;code>optional_permissions&lt;/code>：类似&lt;code>permissions&lt;/code>。但是在运行时由用户决定是否给予权限，而非事先决定。&lt;/li>
&lt;li>&lt;code>host_permissions&lt;/code>：通过匹配字段来匹配是否有相应权限。&lt;/li>
&lt;li>&lt;code>optional_host_permissions&lt;/code>：类似&lt;code>host_permissions&lt;/code>使用匹配字段。但是在运行时由用户决定是否给予权限，而非事先决定。&lt;/li>
&lt;/ol>
&lt;p>扩展程序或应用程序必须在清单文件&lt;code>manifest.json&lt;/code>中的 &lt;code>permissions&lt;/code>字段中声明所需要的权限，否则Chrome API会拒绝被调用。关于那些API需要什么权限的细节，可以参考&lt;a href="https://developer.chrome.com/docs/extensions/mv3/declare_permissions/">Chrome扩展的权限的文档&lt;/a>。&lt;/p>
&lt;h3 id="自定义扩展使用permission的实例">自定义扩展使用permission的实例&lt;/h3>
&lt;p>下面我们要开发一个Chrome扩展，让用户可以改变当前网页的背景色，其中需要使用到存储权限。首先在该扩展的目录下创建&lt;code>manifest.json&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：此时我们未向其添加权限&lt;code>permission&lt;/code>信息。目前为止，这个&lt;code>manifest.json&lt;/code>文件和上个例子“将激活的Tab页面移至首位”并无太大区别。接下来，我们编写该扩展的&lt;code>background.js&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;#3aa757&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//绿色
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onInstalled&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">(()=&amp;gt;{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="c1">//调用存储API，存储color变量。
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`[Coloring] default background color is set to: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们载入这个扩展，发现这个简单的脚本报错了：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_permission_error.png" alt="chrome_extension_permission_error">&lt;/p>
&lt;p>错误原因是&lt;code>chrome.storage.sync&lt;/code>是&lt;code>undefined&lt;/code>，这是因为Chrome还没将&lt;code>storage&lt;/code>接口授权给扩展，因此扩展无法获得&lt;code>chrome.storage.sync.*&lt;/code>的API。我们要做就是在&lt;code>manifest.json&lt;/code>中添加&lt;code>permissions&lt;/code>字段，并在其中添加&lt;code>storage&lt;/code>权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新加载扩展，可以看到&lt;code>background.js&lt;/code>执行无误，并如预期那样在DevTools页面中输出日志。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>Coloring&lt;span class="o">]&lt;/span> default background color is &lt;span class="nb">set&lt;/span> to: &lt;span class="c1">#3aa757 background.js:6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们就能在浏览器中存储了一个颜色数据，不过暂时也只是存储下，并没有实际的用途。&lt;/p>
&lt;blockquote>
&lt;p>Tips：在重新载入扩展后，&lt;a href="chrome://extensions/">chrome://extensions/&lt;/a>页面下的扩展依旧会显示有个错误按钮，那是因为扩展会保留之前的错误，而非重载之后依然有错，我们需要手动清除之前的错误信息。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用扩展修改原网页">使用扩展修改原网页&lt;/h2>
&lt;p>现在，我们需要将存储的背景颜色数据拿出来真正利用上。为了降低学习曲线，我们先只是用扩展工具栏上的&lt;code>popup&lt;/code>页面来修改网页。结合上一篇文章《javascript-Chrome扩展入门》中&lt;code>popup&lt;/code>页面的内容，我们增加&lt;code>popup&lt;/code>页面与相关&lt;code>icon&lt;/code>图标。首先，在&lt;code>manifest.json&lt;/code>文件添加&lt;code>action&lt;/code>和&lt;code>icon&lt;/code>字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，正如前一篇文章介绍的，&lt;code>action&lt;/code>字段用于代表点击扩展工具栏中扩展图标的响应动作，&lt;code>default_popup&lt;/code>是指点击图标后弹出的页面，本例中是&lt;code>popup.html&lt;/code>这个页面。&lt;code>default_icon&lt;/code>和&lt;code>icon&lt;/code>下都是不同尺寸的图标图片，这个例子是借用了谷歌Chrome&lt;code>manifest V2&lt;/code>版本的素材，链接：&lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started&lt;/a>。（如果链接失效了，自己找一些图片换上去也行）&lt;/p>
&lt;blockquote>
&lt;p>关于扩展的图标。最好使用PNG格式，兼容性最好，BMP、GIF、ICO和JPEG格式也可以使用，不过写本文时(2023年1月)尚不支持WebP和SVG格式。图标的尺寸最好分别提供16×16像素、32×32像素、48×48像素和128×128像素四种，如果尺寸不合适，Chrome浏览器将会尽力选用合适的尺寸（不保证效果）。&lt;/p>
&lt;/blockquote>
&lt;p>接下来就是编写&lt;code>popup.html&lt;/code>页面。我们希望&lt;code>popup.html&lt;/code>这个页面能够提供一个按钮，当我们点击按钮时，就能够将网页背景颜色替换成我们之前在&lt;code>background.js&lt;/code>存储的绿色。显然，仅仅靠HTML是不可能的，还要借助javascript来实现。基础的HTML代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c">/*按钮的样式*/&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">current&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">box-shadow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">white&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>B&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Add some codes here&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">// 可以在这里添加JS代码吗？？？ &lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分离网页元素和脚本">分离网页元素和脚本&lt;/h3>
&lt;p>上面的HTML代码很简单，就只有一个&lt;code>button&lt;/code>按钮。如果开发者觉得一个简单的js脚本，直接在上面的&lt;code>&amp;lt;script&amp;gt; ... &amp;lt;/script&amp;gt;&lt;/code>里添加就行，那么这个&lt;strong>扩展必然是运行不起来&lt;/strong>的。因为根据Chrome extension的Content Security Policy（CSP），&lt;strong>不允许我们使用内联javascript脚本(inline script)&lt;/strong>。我们可以试试，跑这个代码会报什么错误。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_CSP.png" alt="chrome_extension_CSP.png">&lt;/p>
&lt;blockquote>
&lt;p>在网页中，inline script是恶意注入的重灾区，因此处于安全考虑，Chrome extension在开发时禁止使用inline script。即使原生的CSP是可以添加&lt;code>unsafe-inline&lt;/code>字段来允许inline script的运行，但是Chrome extension开发组还是完全禁止了&lt;code>unsafe-inline&lt;/code>、&lt;code>unsafe-eval&lt;/code>这些存在安全隐患方法的使用。如果应要开发者坚持要使用inline script，必须要添加&lt;code>nonce&lt;/code>或&lt;code>hash&lt;/code>这种额外的安全验证手段，其带来的代码复杂度往往还要超过单独把inline script改成独立的js文件。因此，除非是实在没法改，都不鼓励使用inline script。&lt;/p>
&lt;/blockquote>
&lt;p>因此，我们需要再单独建一个javascript文件&lt;code>popup.js&lt;/code>来放脚本程序，同时修改&lt;code>popup.html&lt;/code>中inline script为External JavaScript文件链接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="c">&amp;lt;!-- no inline script
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c">&amp;lt;script&amp;gt; alert(&amp;#39;Add some codes here&amp;#39;);// 可以在这里添加JS代码吗？？？ &amp;lt;/script&amp;gt;
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c">--&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那在&lt;code>popup.js&lt;/code>添加什么样的Javascript代码呢？第一，解析&lt;code>popup.html&lt;/code>的dom树，得到&lt;code>button&lt;/code>表单元素。第二，给&lt;code>button&lt;/code>注册监听按钮点击（&lt;code>click&lt;/code>）事件。第三，当发生&lt;code>click&lt;/code>事件时，需要从浏览器的本地存储中取出&lt;code>background.js&lt;/code>存储的颜色数据。第四，解析&lt;code>DOM&lt;/code>树修改页面背景的CSS属性。接下来，我们在上面的&lt;code>popup.html&lt;/code>中着手添加js代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//popup.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//第一，解析dom树，得到button表单元素。
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//注意由于Chrome API都是异步的，因此这里用async函数
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//调用Chrome接口取出当前标签页
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">active&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentWindow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// 以当前标签页为上下文，执行setPageBackgroundColor函数
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//第三，从浏览器的本地存储中取出存储的颜色数据。
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//第四，修改页面背景的CSS属性。
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面的js代码中，我们使用到了另外两个Chrome API：&lt;code>chrome.tabs.query&lt;/code>和&lt;code>chrome.scripting.executeScript&lt;/code>。它们分别来获取当前活动的tab页面和执行脚本命令，需要&lt;code>activeTab&lt;/code>, &lt;code>scripting&lt;/code>两种权限，因此我们再修改上述&lt;code>manifest.json&lt;/code>的&lt;code>permissions&lt;/code>字段，添加这两种权限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后重新载入扩展，点击扩展工具栏中的插件，弹出了一个带字母“B”（Button）按钮的小页面，点击该按钮，则会将网页背景颜色改成我们之前存储的绿色&lt;code>#3aa757&lt;/code>。我们以常见的百度首页为例：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_changeColor.png" alt="chrome_extension_changeColor.png">&lt;/p>
&lt;blockquote>
&lt;p>Tips: 请注意，插件通过给&lt;code>body&lt;/code>标签设置样式来修改网页背景色。因此，如果网页背景色是由其他标签决定的，便无法生效。&lt;/p>
&lt;/blockquote>
&lt;h3 id="扩展的上下文">扩展的上下文&lt;/h3>
&lt;p>说实话，第一次看到例子中&lt;code>popup.js&lt;/code>代码有点迷糊，尤其是中间&lt;code>async function onClickFunction()&lt;/code>函数，不知道为什么要有这一步操作，还得用&lt;code>chrome.tabs.query&lt;/code>先找当前的tab页面，然后在麻烦地用&lt;code>chrome.scripting.executeScript&lt;/code>来执行&lt;code>setPageBackgroundColor&lt;/code>函数。如此大费周章，为什么不能直接在注册监听事件的时候就将回调函数设置为&lt;code>setPageBackgroundColor&lt;/code>呢？&lt;/p>
&lt;p>我们可以尝试下看看直接这么做有什么效果，修改&lt;code>popup.js&lt;/code>中的时间监听代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//直接执行修改背景的函数
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">//....
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新载入后，Chrome没有报错，点击工具栏扩展弹出的按钮，得到的效果如下图所示：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_changebg_error_context.png" alt="chrome_extension_changebg_error_context">&lt;/p>
&lt;p>哈，网页页面本身的背景颜色没变，改变的只有扩展&lt;code>popup.html&lt;/code>那个小页面的背景颜色！这是因为：要考虑扩展执行时候的上下文啊。&lt;/p>
&lt;p>首先，点击按钮&amp;quot;B&amp;quot;所执行的&lt;code>popup.js&lt;/code>脚本是在&lt;code>popup.html&lt;/code>中引入的，因此&lt;code>popup.js&lt;/code>执行的上下文是&lt;code>popup.html&lt;/code>页面，因此此时的&lt;code>setPageBackgroundColor&lt;/code>函数中DOM解析的&lt;code>document.body.style.backgroundColor&lt;/code>是指&lt;code>popup.html&lt;/code>的背景色，而非原网页&lt;code>www.baidu.com&lt;/code>的背景色。所以要改变js函数执行的上下文，我们要先用&lt;code>chrome.tabs.query({active: true, currentWindow: true});&lt;/code>找到当前页面的上下文环境，然后用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1">// 指定函数执行的上下为tabID所代表的环境
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>来重定向函数&lt;code>function: setPageBackgroundColor&lt;/code>执行时的上下文环境为&lt;code>target: {tabId: tab.id}&lt;/code>所指代的上下文。这样修改背景颜色的效果才会作用到原网页中。&lt;/p>
&lt;p>不过，我们也可以通过上下文的区别来提供更好的用户体验。比如修饰原有的按钮。为了让用户更直观的感受背景将要变换的颜色，我们可以提前将背景色放到按钮上，让用户感觉我点击该颜色的按钮，就可以将背景改成和按钮一样的颜色。其修改的&lt;code>popup.js&lt;/code>代码如下，读者可借助下面的代码体会两种上下文的区别。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//popup.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//第一，解析dom树，得到button表单元素。
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;changeColor&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">// 从storage取背景色并设到按钮上，以popup.html为上下文
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">//第二，注册监听按钮点击事件。
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;click&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">onClickFunction&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//注意由于Chrome API都是异步的，因此这里用async函数
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//调用Chrome接口取出当前标签页
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">tab&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">active&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentWindow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">// 以当前标签页为上下文，执行setPageBackgroundColor函数
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scripting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">executeScript&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1">//指定访问的网页为上下文
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">setPageBackgroundColor&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">//第三，从浏览器的本地存储中取出存储的颜色数据。
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1">//第四，修改页面背景的CSS属性。
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果如下:&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_context.png" alt="chrome_extension_context">&lt;/p>
&lt;h2 id="选项设置页面">选项设置页面&lt;/h2>
&lt;p>目前改背景颜色这个扩展只支持将背景色设为绿色，这样很不灵活。我们可以给插件添加&lt;strong>选项设置页面&lt;/strong>，实现更加丰富的功能，比如提供不同的背景色。&lt;/p>
&lt;p>选项设置页面也可以看作是扩展的配置页面，是扩展灵活性的体现。在&lt;code>manifest.json&lt;/code>中，需要添加&lt;code>option_page&lt;/code>字段指定选项页面，我们在目录中新建&lt;code>options.html&lt;/code>作为选项页面的HTML文件。完整的&lt;code>mamifest.json&lt;/code>文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Coloring&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Demo Extension to change background color!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;scripting&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;popup.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nt">&amp;#34;icons&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nt">&amp;#34;16&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started16.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;32&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started32.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;48&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started48.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nt">&amp;#34;128&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;images/get_started128.png&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nt">&amp;#34;options_page&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;options.html&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时重新加载插件，如果扩展在扩展工具栏可见，则右键点击扩展图标，可以看到右键菜单中的&lt;code>选项&lt;/code>菜单，点它就会打开我们添加的选项页&lt;code>options.html&lt;/code>。如果扩展被收纳进扩展程序图标里，那么点击扩展程序图标，找到对应扩展右侧的三个竖点图标 $\vdots$，在下拉菜单中也可以找到&lt;code>选项&lt;/code>入口。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_options.png" alt="chrome_extension_options">&lt;/p>
&lt;p>现在我们还没给&lt;code>options.html&lt;/code>添加任何内容，因此现在打开选项页是一个空白页。我们给其添加上相应的Html代码（体会个意思就不搞太复杂了^_^）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">outline&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;buttonDiv&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Choose a different background color!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;options.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>和&lt;code>popup.html&lt;/code>类似，其主要功能也得依托Javascript实现，同时受限于CSP规则，js代码应该与Html代码分写在两个文件中，所以我们还要建立&lt;code>options.js&lt;/code>实现具体功能。&lt;/p>
&lt;p>为了方便示例，我们在选项页面中提供四种可选的背景色，用四个按钮表示。当我们点击选中的颜色的按钮时，会将对应的颜色存储到Chrome浏览器的存储空间&lt;code>chrome.storage.sync&lt;/code>中。这样&lt;code>popup.html&lt;/code>页面运行时就会从浏览器中选出选项页确定的颜色。其代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//options.js
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//设置四种颜色：绿、红、黄、蓝
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">kButtonColors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;#3aa757&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#e8453c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#f9bb2d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;#4688f1&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">//根据给定的颜色创建颜色按钮并注册监听事件
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">constructOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">//找到添加按钮的div
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;buttonDiv&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">//根据给定的颜色创建颜色按钮
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//设置按钮背景色
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">//为按钮注册监听事件，点击按钮则存储该颜色
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">()=&amp;gt;{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;color is &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">//添加元素
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c1">//运行创建按钮函数
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">constructOptions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kButtonColors&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开选项页面，就是四个不同颜色的按钮。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_optionpage.png" alt="chrome_extension_optionpage.png">&lt;/p>
&lt;p>当我们点击蓝色按钮后，&lt;code>popup.html&lt;/code>的按钮也会变成蓝色，点击后，网页的背景色也是蓝色。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_optionpage_blue.png" alt="chrome_extension_optionpage_blue.png">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这篇文章中，我们相对完整的实现了一个改背景颜色的Chrome扩展，包含了清单文件&lt;code>manifest.json&lt;/code>，后台脚本&lt;code>background.js&lt;/code>，功能页面&lt;code>popup.html&lt;/code>和配置页面&lt;code>options.html&lt;/code>。基本走通了Chrome扩展开发的普遍流程，其他扩展开发的步骤也是大同小异。同时文章中也介绍了常见权限问题、上下文问题、CSP问题等常见坑，也算是经验的积累。改颜色扩展完整的目录结构如下：&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_my_color.png" alt="chrome_extension_my_color.png">&lt;/p>
&lt;p>该扩展主要参考了Chrome官方Manifest V2的一个教程，针对V3版本做了修改。&lt;/p>
&lt;p>如果想把自己的扩展给更多人使用，可以将其打包上传的Chrome商店，发布自己的扩展，其步骤可参考Chrome教程&lt;a href="https://developer.chrome.com/docs/webstore/publish/">https://developer.chrome.com/docs/webstore/publish/&lt;/a>。如果只是小范围使用，可以直接把文件拷给别人就可以了。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;li>MV2 教程老例子 &lt;a href="https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started">https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/_archive/mv2/tutorials/get_started&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-Chrome扩展入门</title><link>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-chrome%E6%89%A9%E5%B1%95%E5%85%A5%E9%97%A8/</guid><description>
&lt;h2 id="chrome扩展入门---omit-in-toc---">Chrome扩展入门&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Chrome扩展能为Chrome浏览器增加新的功能和特性，为用户提供定制化的浏览体验，如果有一些自己需要的功能，也可以尝试自己写一些扩展来实现。开发Chrome扩展所需要的技术和WEB前端开发并无不同，都是需要&lt;/p>
&lt;ol>
&lt;li>HTML&lt;/li>
&lt;li>CSS&lt;/li>
&lt;li>JavaScript&lt;/li>
&lt;/ol>
&lt;p>本质上来时，Chrome扩展就是工作在客户端浏览器上的JavaScript程序。如果说写Chrome扩展有什么需要新学的东西，那就是Chrome浏览器的Javascript APIs，通过浏览器的API，我们可以&lt;/p>
&lt;ol>
&lt;li>修改Chrome浏览器原有的功能和行为；&lt;/li>
&lt;li>允许用户收集和组织（重新组织）网上的信息；&lt;/li>
&lt;li>给Chrome的DevTools添加新的特性。&lt;/li>
&lt;/ol>
&lt;p>正是Google提供的扩展开发功能，为Chrome浏览器带来了源源不断的创新动力。&lt;/p>
&lt;p>目前Chrome建议使用的是Manifest V3，本文以此为环境写作。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">扩展的设计原则&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%89%A9%E5%B1%95%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">扩展的文件结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90hello-world-extension">入门例子：Hello World Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B0%83%E8%AF%95%E6%89%A9%E5%B1%95">调试扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%B3%E4%BA%8E%E6%89%A9%E5%B1%95extensions%E6%8F%92%E4%BB%B6plugins%E4%B8%8E%E5%BA%94%E7%94%A8apps">关于扩展（extensions），插件（plugins）与应用（Apps）&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="扩展的设计原则">扩展的设计原则&lt;/h2>
&lt;p>Chrome的扩展设计要求遵循“单一目的”原则，该原则包含两个方面：&lt;/p>
&lt;ol>
&lt;li>扩展的主题或关注领域集中，例如“新闻头条”，“天气”，“购物比价”。千万不要像国内很多软件那样做得那么大而全。&lt;/li>
&lt;li>扩展的功能集中，例如“标签管理”，“搜索功能”，“新标签页面”。&lt;/li>
&lt;/ol>
&lt;h2 id="扩展的文件结构">扩展的文件结构&lt;/h2>
&lt;p>扩展根据所需的功能，包含的文件千差万别，其中最常用的如下。&lt;/p>
&lt;ol>
&lt;li>（必需）manifest文件。此文件翻译为“清单文件”，是唯一必需的文件，且名字必须为&lt;code>manifest.json&lt;/code>（显然是个&lt;code>json&lt;/code>文件），放在扩展的根目录文件夹下。Chrome浏览器通过该文件找到扩展配置并载入，&lt;code>manifest.json&lt;/code>中记录了扩展重要的元信息、定义资源、声明权限同时指定哪些文件在后台运行，哪些在前台显示，可以说是扩展的指导手册。&lt;/li>
&lt;li>service worker。通常是Javascript文件，监听并处理浏览器事件，例如跳转到新的页面、删除书签、关闭标签（tabs）等等。service worker可以使用所有的Chrome APIs，但是不能直接和页面的内容进行交互，那是Content scripts的工作。service worker一般运行在后台。&lt;/li>
&lt;li>content scripts。一般也是Javascript文件，content scripts在页面上下文中执行Javascript脚本，能够读取和修改DOM节点，并向指定页面注入JS和CSS。content scripts只能直接使用部分Chrome APIs，不过，如果需要的话，可以与service worker交互来间接地使用其余的Chrome APIs。&lt;/li>
&lt;li>UI元素。扩展的页面部分也是由HTML文件组成，包括图标、popup页面，配置页面等等，这些页面并不是必需的，开发者可以按需添加，这些页面也可以使用Chrome APIs。&lt;/li>
&lt;/ol>
&lt;p>一般常用目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">|&lt;/span>-- my-extension/
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">|&lt;/span>-- manifest.json // 清单文件。必需
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">|&lt;/span>-- background.js // service worker文件，后台
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">|&lt;/span>-- scripts/
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">|&lt;/span> ﹂ content.js // 前端内容处理
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">|&lt;/span> ﹂ others.js // 其他库，支持文件，按需命名
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">|&lt;/span>-- popup/ //扩展按钮
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.html
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.js
&lt;span class="ln">10&lt;/span> &lt;span class="p">|&lt;/span> ﹂ popup.css
&lt;span class="ln">11&lt;/span> ﹂ images/ //所需图片
&lt;span class="ln">12&lt;/span> ﹂ icon-16.png // 各种尺寸的图标
&lt;span class="ln">13&lt;/span> ﹂ icon-32.png
&lt;span class="ln">14&lt;/span> ﹂ icon-48.png
&lt;span class="ln">15&lt;/span> ﹂ icon-128.png
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要指出的是，上述文件结构除了&lt;code>manifest.json&lt;/code>文件的名字和位置固定，其他文件的名字和位置都可以通过&lt;code>manifet.json&lt;/code>中进行指定和配置，文件中的路径都使用&lt;strong>相对路径&lt;/strong>。&lt;/p>
&lt;h2 id="入门例子hello-world-extension">入门例子：Hello World Extension&lt;/h2>
&lt;p>在了解了Chrome扩展大体结构后，我们用一个简单的“Hello”例子来展示下扩展的简要开发流程。这个“Hello”扩展的效果是当我们点击工具栏上的扩展图标，就会弹出“Hello Extensions 我的第一个扩展”。&lt;/p>
&lt;p>第一步，我们需要在跟目录建立一个&lt;code>manifest.json&lt;/code>文件。&lt;code>manifest.json&lt;/code>内容可以分为三类，Required，Recommended和Optional。&lt;/p>
&lt;ul>
&lt;li>Required: 必需的，3个
&lt;ul>
&lt;li>&amp;quot;manifest_version&amp;quot;：当前版本为3，现在推荐就写3。&lt;/li>
&lt;li>&amp;quot;name&amp;quot;：开发者定义的扩展名称。&lt;/li>
&lt;li>&amp;quot;version&amp;quot;：开发者扩展的版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Recommended：推荐要有的，4个
&lt;ul>
&lt;li>&amp;quot;action&amp;quot;：使用&lt;code>chrome.action&lt;/code>接口控制Chrome工具栏的扩展动作。工具栏的扩展图标是一定存在的，无论是否有可用的操作。&lt;/li>
&lt;li>&amp;quot;default_locale&amp;quot;：默认语言环境，在有本地化的扩展中是必需的（带&lt;code>_locales&lt;/code>文件夹），如果没有&lt;code>_locales&lt;/code>文件夹，则一定不要写。&lt;/li>
&lt;li>&amp;quot;description&amp;quot;：扩展的简要描述。&lt;/li>
&lt;li>&amp;quot;icons&amp;quot;：&lt;code>{...}&lt;/code>。扩展的图标，总是要求提供128*128的图标，同时最好提供48*48的图标（用于管理页）和16*16的图标。为了保证通用性，最好用&lt;code>png&lt;/code>格式。实际上，即使没有图标，Chome也会给弄个默认的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Optional：可选的，剩余的都是。常用的有：
&lt;ul>
&lt;li>&amp;quot;author&amp;quot;：开发者名称&lt;/li>
&lt;li>&amp;quot;background&amp;quot;：&lt;code>{...}&lt;/code>设置&amp;quot;service_worker&amp;quot;的条目；&lt;/li>
&lt;li>&amp;quot;content_script&amp;quot;：&lt;code>[{...}]&lt;/code>设置&amp;quot;content script&amp;quot;脚本；&lt;/li>
&lt;li>&amp;quot;permissions&amp;quot;：&lt;code>[&amp;quot;...&amp;quot;]&lt;/code>允许的权限；&lt;/li>
&lt;li>&amp;quot;short_name&amp;quot;：扩展的简称（短名）；&lt;/li>
&lt;li>&amp;quot;update_url&amp;quot;: Chrome商店以外的更新地址，在国内很有用；&lt;/li>
&lt;li>&amp;quot;version_name&amp;quot;：扩展版本的名称。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>根据上面的介绍，我们可以写出&amp;quot;hello&amp;quot;扩展的&lt;code>manifest.json&lt;/code>文件。需要指出的是，json文件在JSON5标准之前都&lt;strong>不支持注释&lt;/strong>，因此在真正使用时，需要将注释内容去除。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//Required
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello Extensions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//注意这里是字符，不是数字
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">//Recommended
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;default_popup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;hello.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//点击工具栏扩展图标后显示的弹窗
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;default_icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;hello_extensions.png&amp;#34;&lt;/span>&lt;span class="c1">//默认图标地址
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c1">// &amp;#34;default_locale&amp;#34; 没有本地化文件，一定不要写
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;My first new extension.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">//&amp;#34;icon&amp;#34;先不写，看看Chrome给的默认的长什么样
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">//Optional
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nt">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SurprisedCat&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二步，根据&lt;code>manifest.json&lt;/code>中的配置，我们在根目录下创建&lt;code>hello_extensions.png&lt;/code>图片（图片大家可以根据自己喜好选一个）和&lt;code>hello.html&lt;/code>文件，该文件就是点击工具栏扩展图片后显示的页面文件，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello Extensions&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>我的第一个扩展&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们的文件结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>﹂- hello/
&lt;span class="ln">2&lt;/span> &lt;span class="p">|&lt;/span>-- manifest.json
&lt;span class="ln">3&lt;/span> &lt;span class="p">|&lt;/span>-- hello_extensions.png
&lt;span class="ln">4&lt;/span> ﹂- hello.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存好现有的3个文件，我们先来尝试本地载入扩展看看效果。&lt;/p>
&lt;p>第三步，载入未打包的扩展。&lt;/p>
&lt;ol>
&lt;li>在浏览器URL中输入&lt;code>chrome://extensions&lt;/code>打开扩展设置页面。&lt;/li>
&lt;li>打开页面右上角的“开发者模式”。&lt;/li>
&lt;li>点击页面左上角的“加载已解压的扩展程序”，并在找到刚刚存放三个文件的&lt;code>hello&lt;/code>文件夹。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../images/chrome_extension_hello_load.png" alt="chrome_extension_hello_load">&lt;/p>
&lt;p>这样我们就载入了自己编写的第一个扩展！我们点击工具栏就可以发现自己编写的扩展已经运行了，单击&amp;quot;hello&amp;quot;扩展，就弹出了&lt;code>hello.html&lt;/code>中设置的内容。效果如下：&lt;/p>
&lt;p>&lt;img src="../images/chrome_hello_extensions_demo.png" alt="hello extensions">&lt;/p>
&lt;p>当我们对&lt;code>manifest.json&lt;/code>中的内容进行修改后，比如将其中的名称项&lt;code>&amp;quot;name&amp;quot;: &amp;quot;Hello Extensions of the world!&amp;quot;,&lt;/code>换个名字，还需要重新载入扩展，点击下图圆圈箭头按钮。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_hello_reload.png" alt="chrome_extension_hello_reload">&lt;/p>
&lt;p>可以发现扩展名称已经被修改了。不过，并不是所有的修改都需要重新载入扩展，下表显示了哪些文件修改后需要重载扩展。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">扩展组成部件&lt;/th>
&lt;th style="text-align:center">是否需要重载&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">The manifest&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Service worker&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Content Scripts&lt;/td>
&lt;td style="text-align:center">是 (包括原页面)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">The popup&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Options page&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Other extension HTML pages&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="调试扩展">调试扩展&lt;/h2>
&lt;p>在开发期时，我们一般可以通过两种方式调试代码，一种是自己在代码中添加&lt;code>console.log()&lt;/code>提示错误，另一种使用Chrome的开发者工具来调试。&lt;/p>
&lt;p>我们还用上面&amp;quot;hello extension&amp;quot;的例子，简要介绍两种方式的使用。首先，我们对&lt;code>hello.html&lt;/code>进行修改如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello Extensions&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>我的第一个扩展&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popup.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--引入一个新的js文件--&amp;gt;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>引入的&lt;code>popup.js&lt;/code>文件同样放在根目录下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;This is a popup!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存文件后，重载扩展。&lt;/p>
&lt;p>第一个，使用&lt;code>console.log()&lt;/code>。现在的问题就是哪里能到看它的输出结果。我们右键点击工具栏的&amp;quot;hello&amp;quot;扩展，在菜单中点击“审查弹出内容”。在弹出的开发者工具中，选择“console”控制面板，就可以看&lt;code>console.log()&lt;/code>输出的内容了。&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_debug_consolelog.png" alt="chrome_extension_debug_consolelog">&lt;/p>
&lt;p>第二个，如果我们的扩展出现了一些无法运行的错误，就无法使用&lt;code>console.log&lt;/code>调试了，我们可以借助Chrome开发者工具的错误信息，比如在&lt;code>popup.js&lt;/code>中，我们出现了语法错误，少打了一个引号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="nx">This&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">popup&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// ❌ broken code
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们重新载入扩展时，会发现扩展页面多了一个“错误”按钮，点击后出现:&lt;/p>
&lt;p>&lt;img src="../images/chrome_extension_debug_error.png" alt="chrome_extension_debug_error.png">&lt;/p>
&lt;p>这样就能够根据提示调试代码。注意，这里的错误信息是不会自动删除的，即使后面改对了，之前的错误信息也会保留下来，必需自行手动清除。&lt;/p>
&lt;p>此外，在开发者工具中，也会有错误代码位置的提示。&lt;/p>
&lt;h2 id="关于扩展extensions插件plugins与应用apps">关于扩展（extensions），插件（plugins）与应用（Apps）&lt;/h2>
&lt;p>在Chrome浏览器的发展中，扩展（extensions），插件（plugins）与应用（Apps）三个词都曾出现过。&lt;/p>
&lt;p>不过现在Chrome目前不再提插件这种讲法，而广大用户也常常把插件和扩展当成一回事。严格来讲，扩展是利用浏览器已有的API，进行二次开发，提供新功能，新特性的代码，开发者只是将浏览器已潜在具备但尚未提供的功能组合出来。插件则是由于浏览器本身缺乏相应功能，使用底层内核API开发的新功能，例如过去Chrome不支持Flash，因此有Flash插件。从开发者角度来看，插件的开发难度是远大于扩展的。从用户角度看，二者都是提供了新功能，因此常常认为两者差不多。随着Google公司在互联网领域的话语权逐步增强和Chrome浏览器的逐渐完善，目前我们可以说Chrome已经不缺重要的功能，因此插件这个东西就逐渐不需要了。现在更多的是根据用户自身需求所定制化的扩展，目前用户所说的Chrome浏览器插件，实际上都是指Chrome的扩展，或者连在一起称为Chrome扩展插件。Chrome商店里提供的也都是Chrome扩展。&lt;/p>
&lt;p>而Chrome应用（App）则是Google竞争失败的产物。2010年左右，Google公司提出了一个非常有魄力的想法，将Chrome浏览器做成一个像操作系统一样的大平台（实际上Google确实做到了），其他应用都跑在Chrome这个平台上，就是Chrome Apps。但是，用户们显然对这个想法不买账，而且随着网络前端能力的增强，Chrome应用变得很鸡肋。于是在2016 年，Google宣布会逐渐抛弃Chrome App，进一步拥抱网页平台。最终2022年6月，谷歌所有客户终止了Chrome App的支持。Chrome App已经陷入历史的尘埃中。&lt;/p>
&lt;p>最终，只有轻量级的Chrome扩展留存下来，并且得到了越来越多用户的喜爱。后来，微软的IE和后续的Edge都被Chrome打的溃不成军，不得已放弃了自己的浏览器内核，在2018年采用了Chromium的Blink内核，这使得Chrome扩展也能够运行在Edge浏览器上，可以说是Chrome扩展的高光时刻了。至于以后，微软会不会反水，再弄一个自己的内核分庭抗礼，让我们拭目以待。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ol>
&lt;li>Google官方文档&lt;a href="https://developer.chrome.com/docs/extensions/mv3/">https://developer.chrome.com/docs/extensions/mv3/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>javascript-js高阶解析</title><link>https://surprisedcat.github.io/projectnotes/javascript-js%E9%AB%98%E9%98%B6%E8%A7%A3%E6%9E%90/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/javascript-js%E9%AB%98%E9%98%B6%E8%A7%A3%E6%9E%90/</guid><description>
&lt;h2 id="js高阶解析---omit-in-toc---">js高阶解析&lt;!-- omit in toc -->&lt;/h2>
&lt;p>关于JavaScript的一些高阶问题，建议在入门之后当作Q&amp;amp;A查看。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E8%AF%AD%E6%B3%95%E5%BD%A2%E5%BC%8F">语法形式&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F">变量与作用域&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87">变量提升&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E8%A6%86%E7%9B%96">作用域的覆盖&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#null%E4%B8%8Eundefined">&lt;code>null&lt;/code>与&lt;code>undefined&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8E">&lt;code>==&lt;/code>与&lt;code>===&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#for--of-%E5%92%8C-for--in-%E9%81%8D%E5%8E%86">&lt;code>for ... of&lt;/code> 和 &lt;code>for ... in&lt;/code> 遍历&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95">类中的方法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98">&lt;code>this&lt;/code>的指向问题&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%B1%BB%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B">类中属性的类型&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1prototype">原型对象prototype&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="语法形式">语法形式&lt;/h2>
&lt;p>JavaScript的语法与C/C++，Java类似，通过&lt;code>;、{...}&lt;/code>来分割语句，区分大小写，而非像Python一样通过缩进。Javascript解析器对缩进没有讲究。但是，JavaScript并不强制要求在每个语句的结尾加&lt;code>;&lt;/code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上&lt;code>;&lt;/code>，但是自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。因此在实际编程中，&lt;strong>强烈建议&lt;/strong>像C/C++，Java一样严谨使用等号。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">test1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>两个函数&lt;code>test1(par),test2(par)&lt;/code>的区别就是&lt;code>return&lt;/code>语句是否分成了两行写。但是执行结果却不一样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>test1: &lt;span class="nb">true&lt;/span>
&lt;span class="ln">2&lt;/span>test2: undefined
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因就在在引擎执行时，在&lt;code>test2&lt;/code>函数的&lt;code>return&lt;/code>后面自动加了&lt;code>;&lt;/code>，在执行时就成了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">test2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">//自动加了分号，函数到此处直接返回
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此&lt;code>test2&lt;/code>的返回结果就是&lt;code>undefined&lt;/code>。&lt;/p>
&lt;h2 id="变量与作用域">变量与作用域&lt;/h2>
&lt;p>JavaScript提供了三类变量声明方法。&lt;/p>
&lt;ol>
&lt;li>直接赋值使用，&lt;code>x=100&lt;/code>；&lt;/li>
&lt;li>&lt;code>var&lt;/code>声明，&lt;code>var x = 100&lt;/code>；&lt;/li>
&lt;li>&lt;code>let, const&lt;/code>声明，&lt;code>let x = 100; const y = 3.14;&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>它们三者各有区别。&lt;/p>
&lt;p>首先，当我们使用方式1，直接给未声明变量赋值时，所产生的变量都是&lt;strong>全局变量&lt;/strong>！无论是在函数体内，还是函数体外，只要使用这种声明方式的都是全局变量。&lt;/p>
&lt;p>当我们使用方式2中&lt;code>var&lt;/code>声明时，在函数外部声明就是全局变量；在函数内部声明就是局部变量。&lt;code>var&lt;/code>变量可以重新声明和修改。需要注意的是，&lt;code>var&lt;/code>的局部变量范围是整个函数体，不像C/C++，Java那样作用域是代码块。&lt;/p>
&lt;p>为了实现更细&lt;strong>代码块级别&lt;/strong>的作用域划分，在ES6中引入了&lt;code>let&lt;/code>和&lt;code>const&lt;/code>。块是由&lt;code>{}&lt;/code>界定的代码块，匹配的大括号中就是一个块，代码块可以嵌套定义。大括号内的任何内容都包含在一个块级作用域中，而&lt;code>let&lt;/code>和&lt;code>const&lt;/code>声明的变量都只在对应的代码块中有效。如果在全局中使用&lt;code>let&lt;/code>那么定义的就是全局变量。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">times&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;say Hello&amp;#34;
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// hello is not defined
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到在其代码块（定义它的花括号）之外使用&lt;code>hello&lt;/code>会返回错误。这是因为&lt;code>let&lt;/code>变量是块范围的。&lt;/p>
&lt;p>就像&lt;code>var&lt;/code>一样，用&lt;code>let&lt;/code>声明的变量可以在其范围内被修改。但与&lt;code>var&lt;/code>不同的是，&lt;code>let&lt;/code>变量无法在其作用域内被重新声明。 来看下面的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//正常执行
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是重新给&lt;code>greeting&lt;/code>变量赋值，修改时允许的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// SyntaxError: Identifier &amp;#39;greeting&amp;#39; has already been declared
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两个&lt;code>let&lt;/code>相当于重新声明&lt;code>greeting&lt;/code>，会报错：变量已经被声明。但是，如果在不同的作用域中定义了相同的变量，则不会有错误，这属于作用域的覆盖。这个事实说明：使用&lt;code>let&lt;/code>，是比&lt;code>var&lt;/code>更好的选择。当使用&lt;code>let&lt;/code>时，你不必费心思考变量的名称，因为变量仅在其块级作用域内存在。现在推荐使用&lt;code>let&lt;/code>来声明变量。&lt;/p>
&lt;p>&lt;code>const&lt;/code>声明的变量保持常量值，和&lt;code>let&lt;/code>一样也是在对应代码块内有效。&lt;code>const&lt;/code>不能被修改并且不能被重新声明，因此每个&lt;code>const&lt;/code>声明都必须在声明时进行初始化。虽然&lt;code>const&lt;/code>声明的变量不可以修改，但是可以修改&lt;code>const&lt;/code>对象的属性，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;say Hi&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">times&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="c1">//声明const对象
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">words&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">number&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;five&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// error: Assignment to constant variable.
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nx">greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say Hello instead&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//可以修改其属性
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="变量提升">变量提升&lt;/h3>
&lt;p>变量提升是JavaScript的一种机制：在执行代码之前，&lt;strong>变量和函数声明&lt;/strong>会移至其作用域的顶部。注意，仅仅是声明，赋值操作并不会提升。这意味着如果我们这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">greeter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生面的代码会被解释为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">greeter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">greeter&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// greeter is undefined
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">greeter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;say hello&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>var&lt;/code>,&lt;code>let&lt;/code>,&lt;code>const&lt;/code>都会被提升，区别是&lt;code>var&lt;/code>提升到顶部后使用&lt;code>undefined&lt;/code>值对其进行初始化。用&lt;code>let&lt;/code>声明的变量被提升到作用域的顶部时不会对值进行初始化，因此，如果你尝试在声明前使用&lt;code>let&lt;/code>变量，则会收到&lt;code>Reference Error&lt;/code>。&lt;code>const&lt;/code>声明也会被提升到顶部，但是没有初始化，最好将&lt;code>const&lt;/code>声明都放到代码顶部。&lt;/p>
&lt;h3 id="作用域的覆盖">作用域的覆盖&lt;/h3>
&lt;p>当全局变量跟局部变量重名时，局部变量的作用域会覆盖掉全局变量的作用域，当离开局部变量的作用域后，又重回到全局变量的作用域。如果代码块内的局部变量与外部局部变量重名，代码块内局部变量作用域优先级最高。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是全局变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是局部变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是局部变量
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是块内局部变量&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是块内局部变量
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果：我是局部变量
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//结果：我是全局变
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>我是局部变量
&lt;span class="ln">2&lt;/span>我是块内局部变量
&lt;span class="ln">3&lt;/span>我是局部变量
&lt;span class="ln">4&lt;/span>我是全局变量
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="null与undefined">&lt;code>null&lt;/code>与&lt;code>undefined&lt;/code>&lt;/h2>
&lt;p>目前，&lt;code>null&lt;/code>和&lt;code>undefined&lt;/code>基本是同义的，只有一些细微的差别。&lt;/p>
&lt;p>&lt;code>null&lt;/code>表示&lt;strong>没有对象，即该处不应该有值&lt;/strong>。典型用法是：&lt;/p>
&lt;ol>
&lt;li>作为函数的参数，表示该函数的参数不是对象。&lt;/li>
&lt;li>作为对象原型链的终点。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getPrototypeOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1">// null
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>undefined&lt;/code>表示&lt;strong>缺少值，就是此处应该有一个值，但是还没有定义&lt;/strong>。典型用法是：&lt;/p>
&lt;ol>
&lt;li>变量被声明了，但没有赋值时，就等于&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>调用函数时，应该提供的参数没有提供，该参数等于&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>对象没有赋值的属性，该属性的值为&lt;code>undefined&lt;/code>。&lt;/li>
&lt;li>函数没有返回值时，默认返回&lt;code>undefined&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="与">&lt;code>==&lt;/code>与&lt;code>===&lt;/code>&lt;/h2>
&lt;p>JavaScript在设计时，有两种比较运算符：&lt;/p>
&lt;p>第一种是&lt;code>==&lt;/code>比较，它会&lt;strong>自动转换数据类型再比较&lt;/strong>，很多时候，会得到非常诡异的结果；&lt;/p>
&lt;p>第二种是&lt;code>===&lt;/code>比较，它不会自动转换数据类型，如果数据类型不一致，返回&lt;code>false&lt;/code>，如果一致，再比较。&lt;/p>
&lt;p>由于JavaScript这个设计缺陷，不要使用&lt;code>==&lt;/code>比较，始终坚持使用&lt;code>===&lt;/code>比较。&lt;/p>
&lt;p>另一个例外是&lt;code>Na&lt;/code>N这个特殊的Number与所有其他值都不相等，包括它自己：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kc">NaN&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">NaN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>唯一能判断NaN的方法是通过&lt;code>isNaN()&lt;/code>函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">isNaN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">NaN&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意浮点数的相等比较：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">0.0000001&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// true`
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于&lt;code>Array&lt;/code>,&lt;code>Object&lt;/code>等高级类型，&lt;code>==&lt;/code>和&lt;code>===&lt;/code>是没有区别的进行 &amp;quot;指针地址&amp;quot; 比较。&lt;/p>
&lt;h2 id="for--of-和-for--in-遍历">&lt;code>for ... of&lt;/code> 和 &lt;code>for ... in&lt;/code> 遍历&lt;/h2>
&lt;p>&lt;code>for ... in&lt;/code>是ES5标准引入的语法，用于&lt;strong>遍历键值对对象&lt;/strong>（可遍历对象，数组，字符串，&lt;code>map&lt;/code>等），输出的是键（key）。此外，其不仅可以遍历数字键名，还会遍历原型（prototype）和用户手动添加的其他键。&lt;/p>
&lt;p>&lt;code>for ... of&lt;/code>是ES6标准引入的语法，用于拥有&lt;strong>迭代器对象的集合遍历&lt;/strong>（可遍历对象，数组，字符串，&lt;code>map&lt;/code>，&lt;code>set&lt;/code>，&lt;code>arguments&lt;/code>对象，&lt;strong>普通对象没有迭代器无法遍历&lt;/strong>）输出的是值（value）。&lt;/p>
&lt;p>此外，还可以使用可迭代对象内置的&lt;code>forEach&lt;/code>方法（ES5.1标准引入），它接收一个函数，每次迭代就自动回调该函数。&lt;/p>
&lt;h2 id="类中的方法">类中的方法&lt;/h2>
&lt;p>在一个对象中绑定函数，称为这个对象的方法。绑定到对象上的函数称为方法，和普通函数也没啥区别。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">xiaoming&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;小明&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nx">birth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1990&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">birth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，&lt;code>age()&lt;/code>就是对象&lt;code>xiaoming&lt;/code>的方法，使用时直接调用即可&lt;code>xiaoming.age()&lt;/code>。&lt;/p>
&lt;p>它在内部使用了一个&lt;code>this&lt;/code>关键字，这个东东是什么？在一个方法内部，&lt;code>this&lt;/code>是一个特殊变量，&lt;strong>它始终指向当前对象&lt;/strong>，也就是&lt;code>xiaoming&lt;/code>这个变量。所以，&lt;code>this.birth&lt;/code>可以拿到&lt;code>xiaoming&lt;/code>的&lt;code>birth&lt;/code>属性。&lt;/p>
&lt;h3 id="this的指向问题">&lt;code>this&lt;/code>的指向问题&lt;/h3>
&lt;p>总结：一般情况下，&lt;code>this&lt;/code>指向生成实例时的上一级对象。难点就是判断何时生成对象实例。&lt;/p>
&lt;ol>
&lt;li>&lt;code>this&lt;/code>永远指向一个对象；&lt;/li>
&lt;li>&lt;code>this&lt;/code>的指向完全取决于函数调用时的位置，而非声明时的位置；&lt;/li>
&lt;/ol>
&lt;h2 id="箭头函数">箭头函数&lt;/h2>
&lt;p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 像Lambda表达式，是一种语法糖，简化匿名函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的箭头函数相当于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>箭头函数有两种格式，一种像上面的，只包含一个表达式，连大括号&lt;code>{ ... }&lt;/code>和&lt;code>return&lt;/code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略大括号&lt;code>{ ... }&lt;/code>和&lt;code>return&lt;/code>。&lt;/p>
&lt;h2 id="面向对象编程">面向对象编程&lt;/h2>
&lt;p>JavaScript的面向对象编程和大多数其他语言如Java、C#的面向对象编程都不太一样。如果你熟悉Java或C#，很好，你一定明白面向对象的两个基本概念：类（对象的类型模板）和实例（根据类创建的对象）。不过，在JavaScript中，这个概念需要改一改。JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="nx">class1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__proto__&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">class2&lt;/span>&lt;span class="c1">//低版本浏览器可能不适用
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表示&lt;code>class1&lt;/code>通过&lt;code>class2&lt;/code>来生成新的对象。对于低版本浏览器不适用的场景，建议使用&lt;code>Object.create()&lt;/code>方法可以传入一个原型对象，并创建一个基于该原型的新对象，但是新对象什么属性都没有。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">class1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">class2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//默认class1的所有值为空
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。&lt;/p>
&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;p>&lt;code>new&lt;/code>一个函数，就可以把这个函数当成构造函数使用。&lt;/p>
&lt;h3 id="类中属性的类型">类中属性的类型&lt;/h3>
&lt;p>由于Javascript在设计之处并不是面向对象的语言，因此在类设计方面没有现在常见的特性例如访问级别修饰符（&lt;code>public&lt;/code>,&lt;code>private&lt;/code>,&lt;code>protected&lt;/code>）,读方法(&lt;code>getter&lt;/code>)和写方法(&lt;code>setter&lt;/code>)，属性的枚举等等。尤其在Java语言中出现的Javabean规范被证明对减少面向对象编程中的BUG具有积极意义，这促使其他编程语言包括Javascript也想方设法实现类似的功能，其中属性类型就是此方面的实践。为了表示方便，标准中一般使用&lt;code>[[Prooerty]]&lt;/code>来表示类中内容的属性，本文中依照标准的表示方法使用。&lt;/p>
&lt;p>JavaScript属性类型分为两种，&lt;strong>数据属性和访问器属性&lt;/strong>。最开始Javascript只有数据属性，基本上一般教程里看到的类属性都是数据属性；在ES5标准中，为了增加数据的封装性和可控性，又增加了访问器属性（Accessor）。访问器属性更类似于面向对象编程中成员属性的&lt;code>get()&lt;/code>,&lt;code>set()&lt;/code>函数，在这些函数中，我们能够对数据的读写进行一定控制。&lt;/p>
&lt;p>我们先看&lt;strong>数据属性&lt;/strong>，其包含四个特性：&lt;/p>
&lt;ol>
&lt;li>&lt;code>[[Configurable]]&lt;/code>：可配置性。表示属性是否可以通过&lt;code>delete&lt;/code>删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。
&lt;ul>
&lt;li>例外，当&lt;code>[[Configurable]]&lt;/code>为&lt;code>false&lt;/code>时，若&lt;code>[[Writable]]&lt;/code>为&lt;code>true&lt;/code>，我们可以修改&lt;code>[[value]]&lt;/code>的值或将&lt;code>[[Writable]]&lt;/code>改为&lt;code>false&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>[[Enumerable]]&lt;/code>：可遍历性。表示属性是否可以通过&lt;code>for-in&lt;/code>循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。
&lt;ul>
&lt;li>由于Javascript中&lt;code>Array&lt;/code>也是对象，因此我们给&lt;code>Array&lt;/code>自定义的属性也会在&lt;code>for-in&lt;/code>循环中带出来。目前建议数组&lt;code>Array&lt;/code>的数据遍历用&lt;code>for-of&lt;/code>循环。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>[[Writable]]&lt;/code>：是否可写。表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是&lt;code>true&lt;/code>。&lt;/li>
&lt;li>&lt;code>[[Value]]&lt;/code>：包含属性实际的值。未初始化的默认值为 &lt;code>undefined&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>在上面四个数据属性中，最容易理解的是&lt;code>[[value]]&lt;/code>，我们用各种方法初始化对象就是设置属性的&lt;code>[[value]]&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 数据属性name的[[value]]是Alice
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">person2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 数据属性name的[[value]]是Bob
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后对这个值的任何修改都会保存在&lt;code>[[value]]&lt;/code>这个特性。相对于 &lt;code>[[value]]&lt;/code>可以方便地修改，剩下三个数据属性的特性并不能直接修改，就必须使用&lt;code>Object.defineProperty()&lt;/code>方法。这个方法接收 3 个参数：&lt;strong>要给其添加属性的对象、属性的名称和一个特性描述符对象&lt;/strong>。最后一个参数，即描述符对象上的属性可以包含：&lt;code>configurable&lt;/code>、&lt;code>enumerable&lt;/code>、&lt;code>writable&lt;/code>和&lt;code>value&lt;/code>，跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。&lt;/p>
&lt;p>需要指出，区别于特性初始化默认为&lt;code>true&lt;/code>的情形，在调用&lt;code>Object.defineProperty()&lt;/code>时，&lt;code>configurable&lt;/code>、&lt;code>enumerable&lt;/code>和&lt;code>writable&lt;/code>的值如果不指定，则都默认为&lt;code>false&lt;/code>。多数情况下，可能都不需要&lt;code>Object.defineProperty()&lt;/code>提供的这些强大的设置，但要理解 JavaScript对象，就要理解这些概念。&lt;/p>
&lt;p>例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">//数值上等同于 person.name = &amp;#34;Bill&amp;#34;;person.income=10000;person.tax=2000;person.gender=&amp;#34;male&amp;#34;。但是属性特性不同
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;income&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;tax&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">writable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;gender&amp;#39;&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;male&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//for-in 遍历
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">par&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">par&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Tax: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tax&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1">//尝试修改gender属性与income属性
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;尝试修改gender属性与income属性&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">income&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Income: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">income&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;female&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gender: &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gender&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显示结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>name:Bill
&lt;span class="ln">2&lt;/span>income:10000
&lt;span class="ln">3&lt;/span>gender:male
&lt;span class="ln">4&lt;/span>Tax: &lt;span class="m">2000&lt;/span>
&lt;span class="ln">5&lt;/span>尝试修改gender属性与income属性
&lt;span class="ln">6&lt;/span>Income: &lt;span class="m">20000&lt;/span>
&lt;span class="ln">7&lt;/span>Gender: male
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于没有将&lt;code>person.tax&lt;/code>的可遍历&lt;code>[[enumerable]]&lt;/code>设置为&lt;code>true&lt;/code>，因此js采用默认值&lt;code>false&lt;/code>，在使用&lt;code>for-in&lt;/code>遍历时，不会显示&lt;code>person.tax&lt;/code>。不过我们依旧可以使用&lt;code>person.tax&lt;/code>来访问。由于&lt;code>person.income&lt;/code>的&lt;code>[[writable]]&lt;/code>是&lt;code>true&lt;/code>，我们可以顺利地修改其值。然而&lt;code>person.gender&lt;/code>的&lt;code>[[writable]]&lt;/code>是&lt;code>false&lt;/code>，这个属性的值就不能再修改了，在非严格模式下尝试给这个属性重新赋值会被忽略。在严格模式下，尝试修改只读属性的值会抛出错误。&lt;/p>
&lt;h3 id="原型对象prototype">原型对象prototype&lt;/h3>
&lt;p>在ES6中新增了面向对象编程的模式，支持了&lt;code>Class&lt;/code>,&lt;code>extends&lt;/code>等面向对象关键字。不过在ES6之前，JavaScript也是能够实现面向对象编程的，用的就是&lt;strong>原型对象protptype&lt;/strong>，新增的功能不过是对既有功能的封装，让其更符合现代编程模式。&lt;/p>
&lt;p>javascript中的&lt;code>prototype&lt;/code>更像是面向对象设计中的类，&lt;code>prototype&lt;/code>属性指向的是原型类，构造函数的原型&lt;code>prototype&lt;/code>是这个&lt;code>prototype&lt;/code>对象，原型对象的&lt;code>constructor&lt;/code>指向构造函数。所以说&lt;code>prototype&lt;/code>扮演了js中类&lt;code>class&lt;/code>的角色，对象与类直接有关系，构造函数也和类直接有关系，实例对象与构造函数通过类间接联系在一起。&lt;/p>
&lt;p>构造函数通过&lt;code>prototype&lt;/code>属性指向原型对象，实例通过&lt;code>__proto__&lt;/code>属性指向原型对象。关系如下图：&lt;/p>
&lt;p>&lt;img src="../images/js%E5%8E%9F%E5%9E%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B%E7%B1%BB%E6%AF%94.png" alt="js原型构造函数实例类比">&lt;/p>
&lt;p>上图展示了&lt;code>Person&lt;/code>构造函数、&lt;code>Person&lt;/code>的原型对象和&lt;code>Person&lt;/code>现有两个实例之间的关系。注意，&lt;code>Person.prototype&lt;/code>指向原型对象，而&lt;code>Person.prototype.contructor&lt;/code>指回&lt;code>Person&lt;/code>构造函数。原型对象包含&lt;code>constructor&lt;/code>属性和其他后来添加的属性。&lt;code>Person&lt;/code>的两个实例&lt;code>person1&lt;/code>和&lt;code>person2&lt;/code>都只有一个内部属性指回&lt;code>Person.prototype&lt;/code>，而且两者都与构造函数没有直接联系。另外要注意，虽然这两个实例都没有属性和方法，但&lt;code>person1.sayName()&lt;/code>、&lt;code>person2.sayName()&lt;/code>可以正常调用。这是由于对象属性查找机制的原因。&lt;/p></description></item><item><title>shell-骨干流程4——命令执行与job控制</title><link>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B4%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8Ejob%E6%8E%A7%E5%88%B6/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B4%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8Ejob%E6%8E%A7%E5%88%B6/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE">命令查找&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">命令执行&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%94%A8%E6%88%B7%E6%89%8B%E5%8A%A8%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1">用户手动管理任务&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E4%B8%8Etrap">信号机制与trap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%9C%E4%B8%9A%E6%8E%A7%E5%88%B6">作业控制&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#linux%E4%BF%A1%E5%8F%B7%E8%A1%A8">Linux信号表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>总体流程图镇楼：&lt;/p>
&lt;p>&lt;img src="../images/shell%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.drawio.svg" alt="shell执行流程">&lt;/p>
&lt;h2 id="命令执行与job控制---omit-in-toc---">命令执行与job控制&lt;!-- omit in toc -->&lt;/h2>
&lt;p>经过前面12个步骤的处理，shell命令中引号引用、保留字、别名、展开、替换、重定向等内容都已经设置完成，到了真正来执行命令的阶段。前面所有的步骤都是为了能够顺利执行命令而存在的，可以说命令执行是shell流程的&lt;strong>核心&lt;/strong>。命令执行的流程只有两步（如图中蓝色部分所示），包括寻找可执行命令的第13步和执行该命令的第14步。&lt;/p>
&lt;p>第13步中，&lt;strong>我们要明确哪些地方能够查找到所需要的可执行命令，以及查找这些地方的顺序&lt;/strong>。在非复合命令中，&lt;strong>首个单词&lt;/strong>（word）通常指的是需要执行的命令，后面的部分都是该命令的参数。如果找到了可执行命令，那么最终在第14步执行命令（首个单词）+参数（后面所有的单词），并返回结果，命令执行的过程中，还会涉及到执行环境的问题，不同的执行环境会对执行的过程结果有不同影响。如果存在未执行命令则读取下一条命令从第一步再开始处理，若遇到文件结束符（EOF）则完成shell流程。&lt;/p>
&lt;p>到这里，shell的骨干流程算是结束了。&lt;/p>
&lt;p>然而，对于一个多任务操作系统，bash shell可能启动了多个任务同时运行，因此还需要进行作业的管理和监控。除了Linux内核自动运行的任务/作业管理机制，bash shell也提供了手动调整任务/作业执行流程、方式的机制，主要包括两个机制：作业控制机制和信号机制。&lt;strong>作业控制&lt;/strong>（job control）是针对即将执行和正在执行命令的一套控制机制，也是shell流程中不可缺少的一部分。此外，还可以通过&lt;strong>信号&lt;/strong>的捕获与处理，来与正在运行的任务/作业进行通信，从而实现特定的控制功能。这一部分内容严格来说并不是shell命令处理的骨干流程，但是能够让我们更深刻地理解bash shell的运行方式。&lt;/p>
&lt;h2 id="命令查找">命令查找&lt;/h2>
&lt;p>根据shell分词的结果，shell会产生**一个简单的命令（首个单词）和一个可选的参数列表。首个单词将会被认为是shell需要执行的命令名称。**这里需要在强调下，shell中的单词和一般语言中的单词是不一样的：单词，word，可以被shell认为是一个单元的一串字符，单词不能包括不带引号的元字符。也就是说，一个字符串只要不能被元字符分割，那就是shell中所谓的单词。&lt;/p>
&lt;p>根据《shell骨干流程1——形成初始命令》一文中的说明，shell的分割元字符包括&lt;code>()&amp;lt;&amp;gt;;&amp;amp;| \t\n&lt;/code>这几个，因此我们来举几个shell中的单词例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>./exec
&lt;span class="ln">2&lt;/span>/bin/more
&lt;span class="ln">3&lt;/span>../../test.sh
&lt;span class="ln">4&lt;/span>&lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span> &lt;span class="c1"># 必须要在引号中&lt;/span>
&lt;span class="ln">5&lt;/span>cat
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子都可以称为一个单词来作为简单命令。&lt;/p>
&lt;p>那么bash如何来查找这个命令呢？&lt;/p>
&lt;p>首先如果这个命令以&lt;code>.&lt;/code>或者&lt;code>/&lt;/code>开头，则说明用户指定了命令的路径，bash必须&lt;strong>根据用户指定的路径去查找是否存在该命令&lt;/strong>。其中，如果以&lt;code>.&lt;/code>开头，则以当前文件夹为基准使用相对路径；如果以&lt;code>/&lt;/code>开头，则使用绝对路径。&lt;/p>
&lt;p>如果命令中不以&lt;code>.&lt;/code>或者&lt;code>/&lt;/code>开头，则依以下顺序来查找命令：&lt;/p>
&lt;ol>
&lt;li>查看命令名称是否为shell函数，如果这个名称是shell函数，那么命令将按照Shell函数中的描述被调用。（可以用&lt;code>set&lt;/code>命令查看当前所有定义的函数）&lt;/li>
&lt;li>查看命令是否为内建命令（&lt;code>builtins&lt;/code>），如果找到匹配，则调用该内建命令。&lt;/li>
&lt;li>查看&lt;code>$PATH&lt;/code>路径，按顺序从左到右依次查找&lt;code>$PATH&lt;/code>路径中的每一项，查看该元素下所有可执行文件，直到匹配到命令。&lt;/li>
&lt;li>如果&lt;code>$PATH&lt;/code>中没有找到匹配的路径，那么shell会抛出&lt;code>command_not_found&lt;/code>错误。&lt;/li>
&lt;/ol>
&lt;p>在shell实现时，bash使用哈希表来记住可执行文件的完整路径名，以避免频繁的&lt;code>$PATH&lt;/code>搜索。只有在哈希表中找不到该命令时，才会执行&lt;code>$PATH&lt;/code>目录中的完整搜索，这通常发生在修改了&lt;code>$PATH&lt;/code>变量之后。&lt;/p>
&lt;h2 id="命令执行">命令执行&lt;/h2>
&lt;p>如果我们在第13步中找到了可行性文件，那么将来到最后一步，执行该命令。&lt;strong>这一步是shell运行的最终目的&lt;/strong>，但也是bash管的最少的一步，因为接下来如何执行该命令就完全交由可执行文件自己决定。&lt;/p>
&lt;p>bash要做的只是将执行的命令为位置参数0，并把后面的所有单词作为位置参数传递给可执行文件，之后就等待可执行文件运行结束并收集其退出状态。当然如果该命令是异步执行的，shell就不必等待其结束。&lt;/p>
&lt;p>最核心的一步也是shell最简单的一步，颇有一种功成身退，翩然而去的风味。&lt;/p>
&lt;p>如果我们在深入的了解一下执行流程，会发现shell在执行命令之前还做了一些环境设置的工作，这些环境设置工作虽然不显山不露水，但是若是不了解，就会产生不少奇怪的问题。&lt;/p>
&lt;p>此外，当执行一个简单的命令，而不是一个内建函数或shell函数时，它将在一个&lt;strong>独立的执行环境中调用&lt;/strong>，该环境由以下几部分组成。 除非另有说明，否则这些值是从原shell继承而来的。&lt;/p>
&lt;p>我们先来看看shell有哪些命令执行环境：&lt;/p>
&lt;ol>
&lt;li>打开的文件信息。Linux中一切皆文件，因此这个打开的“文件”是一个广义概念，目前正在使用的设备、socket等都是文件的范畴，最常见的文件信息就是标准输入输出文件，它们记录了文件输入输出的位置。&lt;/li>
&lt;li>当前的工作目录。这个环境可通过&lt;code>cd, pushd, popd&lt;/code>修改也可继承自启动该bash的程序。&lt;/li>
&lt;li>umask信息和文件的读写执行权限有关。&lt;/li>
&lt;li>trap(后面会提，常用于信号的处理)&lt;/li>
&lt;li>通过set设置或从父shell继承的shell参数&lt;/li>
&lt;li>在执行期间定义的shell函数或从环境中的shell父项继承的函数&lt;/li>
&lt;li>在调用时启用的选项（默认或通过命令行参数或set设置）&lt;/li>
&lt;li>由shopt启用的选项&lt;/li>
&lt;li>使用alias定义的shell别名&lt;/li>
&lt;li>各种进程ID，包括包括后台作业信息，$$和$PPID的值&lt;/li>
&lt;/ol>
&lt;p>当执行一个&lt;code>$PATH&lt;/code>中的命令，而不是一个内建函数或shell函数时，它将在一个&lt;strong>独立的执行环境中&lt;/strong>调用，该环境由以下几部分组成。&lt;/p>
&lt;ol>
&lt;li>打开的文件信息。&lt;/li>
&lt;li>当前的工作目录。&lt;/li>
&lt;li>umask信息&lt;/li>
&lt;li>trap&lt;/li>
&lt;li>在环境中传递的标记为&lt;code>export&lt;/code>的shell变量和函数以及为命令导出的变量&lt;/li>
&lt;/ol>
&lt;p>在这个单独的环境中调用的命令不会影响shell的执行环境。&lt;/p>
&lt;h2 id="用户手动管理任务">用户手动管理任务&lt;/h2>
&lt;p>shell每执行一个命令，Linux就相当于启动了一个任务。任务之间未必是一个接一个顺序执行的，bash shell可能启动了多个任务同时运行，因此还需要进行任务管理和调度。对于大多数小型计算机系统来说，任务（进程）都是由内核自动进行调度的，用户几乎无法直接控制任务的执行顺序，至多给他们设置任务优先级，进行间接调控。&lt;strong>Unix系统是第一个让用户能够直接控制多个进程的小型操作系统&lt;/strong>，这个做法评价不一，Linux也继承这个功能，被称为&lt;strong>用户控制的多任务&lt;/strong>。&lt;/p>
&lt;p>首先，要区别的进程ID（Process ID）和作业号（Job Number）。当shell开始执行一个命令时，Linux会创建对应的进程并给进程标号，这个标号就是&lt;strong>进程ID&lt;/strong>。进程执行时，默认情况下让bash等待其运行完，如果命令后面加个&lt;code>&amp;amp;&lt;/code>符号，进程会被放到后台执行，bash仍能够和用户交互。示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ which ls &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">7091&lt;/span>
&lt;span class="ln">3&lt;/span>/usr/bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，7091是Linux系统分配的&lt;strong>进程ID&lt;/strong>，[1]是当前shell给它分配的&lt;strong>作业号&lt;/strong>。作业号只是当前shell给它所启动的任务分配的编号，而进程ID是整个系统中，所有用户正在执行任务的编号。&lt;/p>
&lt;h3 id="信号机制与trap">信号机制与trap&lt;/h3>
&lt;p>信号（Signal）是在软件层次上对中断机制的一种&lt;strong>模拟&lt;/strong>，一个进程通过给另一个进程发送信号，使其执行相应的处理函数，属于一种进程间通信（Interprocess Communication, IPC）。在shell语境下，bash通常使用&lt;code>kill&lt;/code>命令发送信号命令给某一进程（常用进程ID指定），而收到信号的进程使用&lt;code>trap&lt;/code>命令处理信号。当然，bash也支持从键盘快捷键直接输入信号，如ctrl+c, ctrl+z等。Linux支持的信号用1-64的数字表示，分为非实时信号(不可靠信号)和实时信号(可靠信号)两种类型，对应于 Linux 的信号值为 1-31 和 34-64。非实时信号，不支持队列，信号可能会丢失，比如发送多次相同的信号，进程只能收到一次，如果第一个信号没有处理完，第二个信号将会丢弃。实时信号支持队列，发多少次进程就可以收到多少次。&lt;/p>
&lt;p>我们先看看&lt;code>kill&lt;/code>命令格式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">kill&lt;/span> &lt;span class="o">[&lt;/span>-s sigspec &lt;span class="p">|&lt;/span> -n signum &lt;span class="p">|&lt;/span> -sigspec&lt;span class="o">]&lt;/span> pid &lt;span class="p">|&lt;/span> jobspec ... &lt;span class="c1"># 给特定进程发送信号&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 默认发送信号为 TERM （15）&lt;/span>
&lt;span class="ln">3&lt;/span>-l &lt;span class="o">[&lt;/span>sigspec/signum&lt;span class="o">]&lt;/span> &lt;span class="c1"># 打印名称/编号对应的特定信号编号/名称&lt;/span>
&lt;span class="ln">4&lt;/span>-s  &lt;span class="c1"># 使用信号名称&lt;/span>
&lt;span class="ln">5&lt;/span>-n  &lt;span class="c1"># 使用信号编号&lt;/span>
&lt;span class="ln">6&lt;/span>-l  &lt;span class="c1"># 打印编号1-31信号名称&lt;/span>
&lt;span class="ln">7&lt;/span>pid &lt;span class="c1"># 进程ID&lt;/span>
&lt;span class="ln">8&lt;/span>jobapec &lt;span class="c1"># 作业号，使用的时候前面加%，例如作业号为1的作业为%1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>kill&lt;/code>虽然名字叫&lt;code>杀&lt;/code>，却是发送任意信号的命令。之所以叫杀，是因为默认发送的是杀死进程的命令（SIGTERM）。举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 我们在后台启动一个cat程序&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ cat &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">31930&lt;/span> &lt;span class="c1"># [1]是作业号，属于当前shell，31930是进程ID，属于系统&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 我们用kill 发送一个信号终止cat进程&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">kill&lt;/span> -n &lt;span class="m">15&lt;/span> &lt;span class="m">31930&lt;/span> &lt;span class="c1"># 或者 kill -s SINTERM 31930&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Stopped cat
&lt;span class="ln"> 7&lt;/span>$ cat &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span> &lt;span class="m">31931&lt;/span>
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">kill&lt;/span> -s SIGTERM %2 &lt;span class="c1"># 使用作业号&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>+ Stopped cat
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果SIGTERM（15）信号无法终止，可以再尝试SIGKILL（9）信号，该信号要求立即停止进程，不能捕获，不能忽略。&lt;/p>
&lt;p>&lt;strong>Linux支持的信号见&lt;/strong>&lt;a href="#linux%E4%BF%A1%E5%8F%B7%E8%A1%A8">Linux信号表&lt;/a>。&lt;/p>
&lt;p>如果一个进程收到了信号，可以通过三种方式来响应一个信号：&lt;/p>
&lt;ol>
&lt;li>忽略信号，即对信号不做任何处理，其中有两个信号不能忽略：SIGKILL及SIGSTOP。&lt;/li>
&lt;li>执行缺省操作，Linux对每种信号都规定了默认操作。&lt;/li>
&lt;li>捕捉信号。&lt;/li>
&lt;/ol>
&lt;p>默认情况下，当一个进程接收到信号之后，会根据&lt;a href="#linux%E4%BF%A1%E5%8F%B7%E8%A1%A8">Linux信号表&lt;/a>的默认（缺省）操作行事，或者根据系统情况直接忽略信号。然后，bash给我们提供了一个能够按需要自行处理信号的功能，&lt;code>trap&lt;/code>。&lt;code>trap&lt;/code>命令定义shell脚本在运行时根据接收的信号做相应的处理，该命令对于编写较复杂shell程序有很大意义，提供了类似其他编程语言中异常处理的功能。其使用如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="o">[&lt;/span>-lp&lt;span class="o">]&lt;/span> &lt;span class="o">[[&lt;/span>arg&lt;span class="o">]&lt;/span> sigspec ...&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>-l &lt;span class="c1"># 打印编号1-64编号信号名称&lt;/span>
&lt;span class="ln">3&lt;/span>-p &lt;span class="c1"># 查看当前已经设置的trap内容&lt;/span>
&lt;span class="ln">4&lt;/span>arg &lt;span class="c1"># 捕获信号后执行的命令或者函数&lt;/span>
&lt;span class="ln">5&lt;/span>signal_spec &lt;span class="c1"># 信号名或编号，可以是一个或多个&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当接收到特定信号后，&lt;code>trap&lt;/code>检查是否是自己需要处理的信号，如果是则执行&lt;code>arg&lt;/code>指定的命令或函数，执行完后，从刚刚程序中断的地方继续执行。如果命令参数&lt;code>arg&lt;/code>为空字符串或者&lt;code>-&lt;/code>，这时shell进程和shell进程内的子进程都会&lt;strong>忽略&lt;/strong>该信号（相当于什么都不执行）。我们新建一个有执行权限的&lt;code>loop.sh&lt;/code>的文件来举例，其内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1"># 无限循环睡眠60s的操作&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">4&lt;/span> sleep &lt;span class="m">60&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们直接执行上述shell脚本时，bash会处于一直等待状态，直到我们使用键盘的键入中断命令ctrl+c。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ./loop.sh
&lt;span class="ln">2&lt;/span>^C
&lt;span class="ln">3&lt;/span>$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Bash所有脚本都自带默认的处理信号的机制&lt;/strong>，当我们输入ctrl+c之后，相当于向正在执行的&lt;code>loop.sh&lt;/code>进程发送了&lt;code>SIGINT(2)&lt;/code>，并触发了默认处理即中断正在运行的任务。&lt;/p>
&lt;p>如果我们希望接收到信号之后，由&lt;code>trap&lt;/code>捕获并按照自己的需求处理信号，而非默认方式，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;You hit control-C!&amp;#39;&amp;#34;&lt;/span> INT &lt;span class="c1"># 使用自定义的命令处理SIGINT信号&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 无限循环睡眠60s的操作&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">5&lt;/span> sleep &lt;span class="m">60&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们再次执行&lt;code>loop.sh&lt;/code>脚本时有:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ./loop.sh
&lt;span class="ln">2&lt;/span>^CYou hit control-C
&lt;span class="ln">3&lt;/span>^CYou hit control-C
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们发现，当我们输入ctrl+c之后（即向进程发送&lt;code>SIGINT(2)&lt;/code>），脚本并没有停止运行，只是返回了'You hit control-C'。在脚本中，&lt;code>trap&lt;/code>捕获了&lt;code>SIGINT(2)&lt;/code>信号，并通过用户自定义的&lt;code>echo 'You hit control-C!'&lt;/code>命令来实现对信号的处理，覆盖了默认的终止操作。我们还可以给脚本添加其他信号处理的&lt;code>trap&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;You tried to kill me!&amp;#39;&amp;#34;&lt;/span> TERM &lt;span class="c1"># 使用自定义的命令处理SIGTERM信号(kill的默认信号) &lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;You hit control-C!&amp;#39;&amp;#34;&lt;/span> INT &lt;span class="c1"># 使用自定义的命令处理SIGINT信号&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 无限循环睡眠60s的操作&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">6&lt;/span> sleep &lt;span class="m">60&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在执行&lt;code>loop.sh&lt;/code>后，不管是使用默认的&lt;code>kill&lt;/code>还是直接键盘输入ctrl+c，都不会终止程序，反而会给我们返回信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ./loop.sh
&lt;span class="ln">2&lt;/span>^CYou hit control-C!
&lt;span class="ln">3&lt;/span>^Z &lt;span class="c1"># ctrl+z 放到后台并终止&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Stopped ./loop.sh
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">kill&lt;/span> %1
&lt;span class="ln">6&lt;/span>Terminated &lt;span class="c1"># 接收到终止信号，并没有实际终止loop.sh&lt;/span>
&lt;span class="ln">7&lt;/span>You tried to &lt;span class="nb">kill&lt;/span> me!
&lt;span class="ln">8&lt;/span>$ &lt;span class="nb">jobs&lt;/span> &lt;span class="c1"># 表明loop.sh还在运行&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Running ./loop.sh &lt;span class="p">&amp;amp;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们希望杀死该运行中的脚本，需要使用其他信号，例如SIGKILL（9）.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">kill&lt;/span> -9 %1
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">jobs&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Killed ./loop.sh
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">jobs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，还有一点需要说明，如果脚本中针对同一个信号设置了多个&lt;code>trap&lt;/code>，那么后一个&lt;strong>执行的&lt;/strong>&lt;code>trap&lt;/code>会覆盖之前的&lt;code>trap&lt;/code>，即&lt;strong>对于同一个信号，只有最后一次&lt;code>trap&lt;/code>生效&lt;/strong>。另外，&lt;code>trap&lt;/code>只在本进程内有效，它的子进程不会继承&lt;code>trap&lt;/code>的设置。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;Frist trap: You hit control-C!&amp;#39;&amp;#34;&lt;/span> INT
&lt;span class="ln">3&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;Second trap: You hit control-C!&amp;#39;&amp;#34;&lt;/span> INT
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 无限循环睡眠60s的操作&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">6&lt;/span> sleep &lt;span class="m">60&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="k">done&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39;Third trap: You hit control-C!&amp;#39;&amp;#34;&lt;/span> INT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在执行此脚本后，键盘使用&lt;code>ctrl+c&lt;/code>结果是&lt;code>^CSecond trap: You hit control-C!&lt;/code>。因为shell在顺序执行时，第二个&lt;code>trap&lt;/code>覆盖了第一个&lt;code>trap&lt;/code>的操作，同时由于陷入了&lt;code>while true&lt;/code>死循环，第三个&lt;code>trap&lt;/code>一直没有执行到，因此第三个&lt;code>trap&lt;/code>也一直没有生效。最后结果就是第二个&lt;code>trap&lt;/code>生效。&lt;/p>
&lt;h3 id="作业控制">作业控制&lt;/h3>
&lt;p>我们前一节已经了解了基于信号的任务控制管理机制，例如&lt;code>kill, trap&lt;/code>等，而bash为了方便进程管理，也有自己一套作业控制系统，包括&lt;code>&amp;amp;, bg, fg, disown, suspend&lt;/code>等。作业控制系统不仅支持使用进程ID来指定要管理的进程，也支持通过作业号(&lt;code>%&lt;/code>符号, jobspec)指定。&lt;/p>
&lt;p>最常见的作业控制符号就是&lt;code>&amp;amp;&lt;/code>，当一个命令以&lt;code>&amp;amp;&lt;/code>结尾时，意味着这条命令放到后台执行。现在我们打开三个后台执行的命令:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ less /etc/cron.d/anacron &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">17357&lt;/span>
&lt;span class="ln"> 3&lt;/span>$ vim &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span> &lt;span class="m">18781&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Stopped less /etc/cron.d/anacron
&lt;span class="ln"> 7&lt;/span>$ cat &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">[&lt;/span>3&lt;span class="o">]&lt;/span> &lt;span class="m">20137&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>+ Stopped vim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这三个命令分别形成了当前bash的三个作业，如果我们要查看当前bash的作业情况，可使用&lt;code>jobs&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">jobs&lt;/span> &lt;span class="o">[&lt;/span>-lnprs&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span> jobspec ... &lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span> -l 列出当前作业信息（包括进程ID）
&lt;span class="ln">3&lt;/span> -n 仅显示有关自上次通知用户以来，状态已更的作业信息。
&lt;span class="ln">4&lt;/span> -p 仅列出作业进程组组长的进程ID。
&lt;span class="ln">5&lt;/span> -r 仅显示running状态的作业。
&lt;span class="ln">6&lt;/span> -s 仅显示stopped状态的作业
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当前shell执行&lt;code>jobs&lt;/code>效果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">jobs&lt;/span> -l
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">17357&lt;/span> Stopped &lt;span class="o">(&lt;/span>tty output&lt;span class="o">)&lt;/span> less /etc/cron.d/anacron
&lt;span class="ln">3&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>- &lt;span class="m">18781&lt;/span> Stopped &lt;span class="o">(&lt;/span>tty output&lt;span class="o">)&lt;/span> vim
&lt;span class="ln">4&lt;/span>&lt;span class="o">[&lt;/span>3&lt;span class="o">]&lt;/span>+ &lt;span class="m">20137&lt;/span> Stopped &lt;span class="o">(&lt;/span>tty input&lt;span class="o">)&lt;/span> cat
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一行表示的就是作业号(jobspec)，后面的&lt;code>+&lt;/code>表示最近添加到作业列表中的作业，&lt;code>-&lt;/code>表示倒数第二最近添加到作业列表中的作业。第二组数字表示进程号，第三组表示状态，当前三个作业都是停止状态。目前此shell中，有三个处于后台的作业，即我们刚才启动的作业。如果我们希望把后台的作业调到前台来继续执行，可以使用&lt;code>fg&lt;/code>命令，其使用方式为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nb">fg&lt;/span> &lt;span class="o">[&lt;/span>%&lt;span class="o">][&lt;/span>jobspec&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 在指定作业号时，加不加%符号没有区别。如果不加任何参数，那么会将最近添加到作业列表中的作业（带+号）放到前台&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nb">fg&lt;/span> %1
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># /etc/cron.d/anacron: crontab entries for the anacron package&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">SHELL&lt;/span>&lt;span class="o">=&lt;/span>/bin/sh
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="m">30&lt;/span> &lt;span class="m">7&lt;/span> * * * root &lt;span class="nb">test&lt;/span> -x /etc/init.d/anacron &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> /usr/sbin/invoke-rc.d anacron start &amp;gt;/dev/null
&lt;span class="ln">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们恢复作业号为1的任务时，效果如上，将&lt;code>less /etc/cron.d/anacron&lt;/code>命令调到了前台。如果我们想在把它放回后台，可以使用&lt;code>ctrl+z&lt;/code>，即可挂起该进程变放入后台。&lt;/p>
&lt;p>若我们仅仅是想让一个任务在后台执行起来而不用调到前台，可以使用&lt;code>bg&lt;/code>命令直接在后台恢复执行，用法和&lt;code>fg&lt;/code>相似。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">bg&lt;/span> &lt;span class="o">[&lt;/span>jobspec …&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 在后台恢复每个挂起的作业jobspec，就好像它已经以‘&amp;amp;’开始。 如果不加任何参数，那么启动最近添加到作业列表中的作业（带+号）&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，还有两个常用的作业控制命令&lt;code>disown&lt;/code>和&lt;code>suspend&lt;/code>，简要介绍下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 从当前shell的作业列表中移除作业&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nb">disown&lt;/span> &lt;span class="o">[&lt;/span>-ar&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-h&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>jobspec … &lt;span class="p">|&lt;/span> pid … &lt;span class="o">]&lt;/span>
&lt;span class="ln"> 3&lt;/span> -h 标记每个作业标识符，这些作业将不会在shell接收到sighup信号时接收到sighup信号。
&lt;span class="ln"> 4&lt;/span> -a 移除所有的作业。
&lt;span class="ln"> 5&lt;/span> -r 移除运行的作业。
&lt;span class="ln"> 6&lt;/span> jobspec（可选）：要移除的作业标识符，可以是一到多个。
&lt;span class="ln"> 7&lt;/span> pid（可选）：要移除的作业对应的进程ID，可以是一到多个。
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 暂停目前正在执行的shell。若要恢复，则必须使用SIGCONT信息。&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">suspend&lt;/span> &lt;span class="o">[&lt;/span>-f&lt;span class="o">]&lt;/span>
&lt;span class="ln">11&lt;/span>-f 　若目前执行的shell为登入的shell，则suspend预设无法暂停此shell。若要强迫暂停登入的shell，则必须使用-f参数。
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此，我们完成了对shell骨干流程的梳理。这个笔记涵盖了shell执行流程中的大部分问题，还有一些小的方面比如进程协同、多进程、进程替换等并未说明，这是由于用的比较少，等到用到的时候再去学习吧。Keep going!&lt;/p>
&lt;h2 id="linux信号表">Linux信号表&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">编号&lt;/th>
&lt;th style="text-align:center">信号名称&lt;/th>
&lt;th style="text-align:center">缺省动作&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">SIGHUP&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">终止进程，挂起&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">SIGINT&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">键盘输入中断命令，一般是CTRL+C&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">SIGQUIT&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">键盘输入退出命令，一般是CTRL+\&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">SIGILL&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">非法指令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">SIGTRAP&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">trap指令发出，一般调试用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">SIGABRT&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">abort(3)发出的终止信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">SIGBUS&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">非法地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">SIGFPE&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">浮点数异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">9&lt;/td>
&lt;td style="text-align:center">SIGKILL&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">立即停止进程，不能捕获，不能忽略&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">SIGUSR&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">用户自定义信号1，像Nginx就支持USR1信号，用于重载配置，重新打开日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">11&lt;/td>
&lt;td style="text-align:center">SIGSEGV&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">无效内存引用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">12&lt;/td>
&lt;td style="text-align:center">SIGUSR&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">用户自定义信号2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">13&lt;/td>
&lt;td style="text-align:center">SIGPIPE&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">管道不能访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">14&lt;/td>
&lt;td style="text-align:center">SIGALRM&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">时钟信号，alrm(2)发出的终止信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">15&lt;/td>
&lt;td style="text-align:center">SIGTERM&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">终止信号，进程会先关闭正在运行的任务或打开的文件再终止，有时间进程在有运行的任务而忽略此信号。不能捕捉&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">SIGSTKFLT&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">处理器栈错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">17&lt;/td>
&lt;td style="text-align:center">SIGCHLD&lt;/td>
&lt;td style="text-align:center">可忽略&lt;/td>
&lt;td style="text-align:center">子进程结束时，父进程收到的信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">18&lt;/td>
&lt;td style="text-align:center">SIGCONT&lt;/td>
&lt;td style="text-align:center">可忽略&lt;/td>
&lt;td style="text-align:center">让终止的进程继续执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">19&lt;/td>
&lt;td style="text-align:center">SIGSTOP&lt;/td>
&lt;td style="text-align:center">停止&lt;/td>
&lt;td style="text-align:center">停止进程，不能忽略，不能捕获&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">SIGSTP&lt;/td>
&lt;td style="text-align:center">停止&lt;/td>
&lt;td style="text-align:center">停止进程，一般是CTRL+Z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">21&lt;/td>
&lt;td style="text-align:center">SIGTTIN&lt;/td>
&lt;td style="text-align:center">停止&lt;/td>
&lt;td style="text-align:center">后台进程从终端读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">22&lt;/td>
&lt;td style="text-align:center">SIGTTOU&lt;/td>
&lt;td style="text-align:center">停止&lt;/td>
&lt;td style="text-align:center">后台进程从终端写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">23&lt;/td>
&lt;td style="text-align:center">SIGURG&lt;/td>
&lt;td style="text-align:center">可忽略&lt;/td>
&lt;td style="text-align:center">紧急数组是否到达socket&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">24&lt;/td>
&lt;td style="text-align:center">SIGXCPU&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">超出CPU占用资源限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">25&lt;/td>
&lt;td style="text-align:center">SIGXFSZ&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">超出文件大小资源限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">26&lt;/td>
&lt;td style="text-align:center">SIGVTALRM&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">虚拟时钟信号，类似于SIGALRM，但计算的是进程占用的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">27&lt;/td>
&lt;td style="text-align:center">SIGPROF&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">类似与SIGALRM，但计算的是进程占用CPU的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">28&lt;/td>
&lt;td style="text-align:center">SIGWINCH&lt;/td>
&lt;td style="text-align:center">可忽略&lt;/td>
&lt;td style="text-align:center">窗口大小改变发出的信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">29&lt;/td>
&lt;td style="text-align:center">SIGIO&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">文件描述符准备就绪，可以输入/输出操作了&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">30&lt;/td>
&lt;td style="text-align:center">SIGPWR&lt;/td>
&lt;td style="text-align:center">终止&lt;/td>
&lt;td style="text-align:center">电源失败&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">31&lt;/td>
&lt;td style="text-align:center">SIGSYS&lt;/td>
&lt;td style="text-align:center">CoreDump&lt;/td>
&lt;td style="text-align:center">非法系统调用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>CoreDump（核心转储）：当程序运行过程中异常退出时，内核把当前程序在内存状况存储在一个core文件中，以便调试。&lt;/p>
&lt;/blockquote></description></item><item><title>shell-骨干流程3——命令展开</title><link>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B3%E5%91%BD%E4%BB%A4%E5%B1%95%E5%BC%80/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B3%E5%91%BD%E4%BB%A4%E5%B1%95%E5%BC%80/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#shell%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D">shell的模式匹配&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%B1%95%E5%BC%80">大括号展开&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B3%A2%E6%B5%AA%E7%AC%A6%E5%8F%B7%E5%B1%95%E5%BC%80">波浪符号展开&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#shell%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%A0%86%E6%A0%88">shell文件目录堆栈&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F%E5%B1%95%E5%BC%80">参数与变量展开&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E9%97%B4%E6%8E%A5%E6%89%A9%E5%B1%95">参数间接扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D%E6%89%A9%E5%B1%95">参数匹配扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%A9%BA%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86">空参数处理&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AD%90%E4%B8%B2%E6%89%A9%E5%B1%95">子串扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E9%95%BF%E5%BA%A6%E8%AE%A1%E7%AE%97">参数长度计算&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D%E5%88%A0%E9%99%A4">参数匹配删除&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D%E6%9B%BF%E6%8D%A2">参数匹配替换&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%A7%E5%B0%8F%E5%86%99%E4%BF%AE%E6%94%B9">大小写修改&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F%E6%93%8D%E4%BD%9C">变量操作&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2">命令替换&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A9%E5%B1%95">算术表达式扩展&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%8D%E6%AC%A1%E5%8D%95%E8%AF%8D%E5%88%86%E5%89%B2">再次单词分割&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B7%AF%E5%BE%84%E4%B8%8E%E6%96%87%E4%BB%B6%E5%90%8D%E5%B1%95%E5%BC%80">路径与文件名展开&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>总体流程图镇楼：&lt;/p>
&lt;p>&lt;img src="../images/shell%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.drawio.svg" alt="shell执行流程">&lt;/p>
&lt;h2 id="命令展开---omit-in-toc---">命令展开&lt;!-- omit in toc -->&lt;/h2>
&lt;p>命令展开是shell变成语言灵活性的最佳体现，如图中绿色部分所示，包含5-11步。展开是对每一个标记(token)分别进行的，共有以下7步，对应总体流程的5-11步。&lt;/p>
&lt;p>第5-7步都是各式各样的命令展开。基本的命令展开包括3种，分别为：大括号展开、波浪符号展开、参数与变量展开。这三种命令展开本质上是shell语法糖的展开。&lt;/p>
&lt;p>第8，9两步实际上是子命令执行，并非语法糖，原始命令将启动子进程（子shell）来执行子命令，执行的结果作为标记，嵌入到原命令中。5-7步和8-9步的区别在于，5-7步本质是查找语法糖对应的内容进行展开，无需使用子进程；8-9步本质是采纳子进程执行的结果，而非简单的查找替换。&lt;/p>
&lt;p>经过5-9步的处理，原始命令已经能够被shell直接执行，因此我们需要第10步将这些替换过后的内容重组起来，根据系统分隔符（Internal Field Seperator，IFS）再次分割（因为命令展开过程中会带来新的内容）。&lt;/p>
&lt;p>最后我们还需要第11步，展开路径和文件名，这一步和之前5-7步展开又是不同的，之前是语法糖替换，而这次是使用shell模式匹配方式（通配符）替换。第11步的shell模式匹配是正则表达式简化版，主要是利用通配符，并非完整的正则表达式规则。&lt;/p>
&lt;p>当命令展开完成后，造成展开的引号将会被全部移除。作为单词整体引用的引号保持原样。例如，&lt;code>hello &amp;quot;$USER&amp;quot;&lt;/code>的引号在变量展开后会移除，而&lt;code>&amp;quot;hello&amp;quot;&lt;/code>的引号则不会。（&lt;strong>这里理解存疑&lt;/strong>）&lt;/p>
&lt;h2 id="shell的模式匹配">shell的模式匹配&lt;/h2>
&lt;p>在介绍shell中各种各样的展开之前，先说下shell的模式匹配。它是标准正则匹配的简化版，尽量保证了正则匹配中的精华，兼顾了匹配的速度。可用于shell流程中的大括号展开和路径与文件名展开。为了方便说明，我们在&lt;code>/tmp/&lt;/code>文件夹下新建&lt;code>patternMatching&lt;/code>文件夹，并在其中新建&lt;code>a.txt aaa.txt abc.txt a.md b.md c.html cd.html ddd.html 001.txt&lt;/code>这9个文件，作为演示示例。&lt;/p>
&lt;p>&lt;strong>注意，shell中默认使用自带的模式匹配，而非正则匹配。模式匹配将在命令展开的各方面的到应用&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /tmp/ &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> mkdir patternMatching &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> patternMatching
&lt;span class="ln">2&lt;/span>$ touch a.txt aaa.txt abc.txt a.md b.md c.html cd.html ddd.html 001.txt
&lt;span class="ln">3&lt;/span>$ ls
&lt;span class="ln">4&lt;/span>001.txt aaa.txt abc.txt a.md a.txt b.md cd.html c.html ddd.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>shell的模式匹配主要是使用了&lt;strong>通配符&lt;/strong>，通用的有3种，当启用“extglob” shell选项时，则可以使用另外5个扩展模式匹配运算符。除了通配符，模式匹配中的其他内容都保留其字面意思，如果要匹配通配符的字面意思，则需要使用反斜杠&lt;code>\&lt;/code>进行转义。另外，&lt;code>NULL&lt;/code>字符不允许出现在模式匹配中。&lt;/p>
&lt;p>通用的三种通配符有&lt;code>*, ?, [ ]&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>“*”：匹配&lt;strong>任意&lt;/strong>字符串，包括空字符。&lt;/li>
&lt;li>“?”：匹配任何&lt;strong>单个&lt;/strong>字符，必须是一个字符，不匹配空字符。&lt;/li>
&lt;li>“&lt;input disabled="" type="checkbox"> ”：匹配中括号中给定的&lt;strong>一个字符&lt;/strong>。例如&lt;code>[abdgAD134]&lt;/code>就是匹配中括号中的六个字母和三个数字。如果是连续的字符，可以使用连字符分隔的一对字符，来表示匹配范围内的任一字符。在默认环境中，&lt;code>[a-dx-z]&lt;/code>相当于&lt;code>[abcdxyz]&lt;/code>。如果是不想匹配中括号中的内容，可以在开头加上&lt;code>!&lt;/code>或&lt;code>^&lt;/code>，表示取反，如&lt;code>[!a-z]&lt;/code>或&lt;code>[^a-z]&lt;/code>则只匹配表示不匹配字母'a-z'。
&lt;ul>
&lt;li>
&lt;blockquote>
&lt;p>在'['和']'中，可以使用语法指定字符类&lt;code>[[:class:]]&lt;/code>, 这里的&lt;code>class&lt;/code>是下列类型之一，在 POSIX 标准中定义的类型:&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">alnum&lt;/th>
&lt;th style="text-align:center">alpha&lt;/th>
&lt;th style="text-align:center">ascii&lt;/th>
&lt;th style="text-align:center">blank&lt;/th>
&lt;th style="text-align:center">cntrl&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">digit&lt;/td>
&lt;td style="text-align:center">graph&lt;/td>
&lt;td style="text-align:center">lower&lt;/td>
&lt;td style="text-align:center">print&lt;/td>
&lt;td style="text-align:center">punct&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">space&lt;/td>
&lt;td style="text-align:center">upper&lt;/td>
&lt;td style="text-align:center">word&lt;/td>
&lt;td style="text-align:center">xdigit&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>用法示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ ls * &lt;span class="c1"># 显示任意内容&lt;/span>
&lt;span class="ln"> 2&lt;/span>001.txt aaa.txt abc.txt a.md a.txt b.md cd.html c.html ddd.html
&lt;span class="ln"> 3&lt;/span>$ ls a* &lt;span class="c1"># a开头的所有文件&lt;/span>
&lt;span class="ln"> 4&lt;/span>aaa.txt abc.txt a.md a.txt
&lt;span class="ln"> 5&lt;/span>$ ls a? &lt;span class="c1"># ?只匹配一个字符，因此那个都无法匹配上&lt;/span>
&lt;span class="ln"> 6&lt;/span>ls: cannot access &lt;span class="s1">&amp;#39;a?&amp;#39;&lt;/span>: No such file or directory
&lt;span class="ln"> 7&lt;/span>$ ls c?.html &lt;span class="c1"># ？匹配一位，所以c.html没有匹配 &lt;/span>
&lt;span class="ln"> 8&lt;/span>cd.html
&lt;span class="ln"> 9&lt;/span>$ ls &lt;span class="o">[&lt;/span>a-z&lt;span class="o">]&lt;/span>.* &lt;span class="c1"># 匹配所有单个字母为名的文件&lt;/span>
&lt;span class="ln">10&lt;/span>a.md a.txt b.md c.html
&lt;span class="ln">11&lt;/span>$ $ ls &lt;span class="o">[[&lt;/span>:digit:&lt;span class="o">]]&lt;/span>* &lt;span class="c1"># 匹配文件名第一位是数字的文件&lt;/span>
&lt;span class="ln">12&lt;/span>001.txt
&lt;span class="ln">13&lt;/span>$ ls &lt;span class="o">[[&lt;/span>:alpha:&lt;span class="o">]]&lt;/span>* &lt;span class="c1"># # 匹配文件名第一位是字母的文件&lt;/span>
&lt;span class="ln">14&lt;/span>aaa.txt abc.txt a.md a.txt b.md cd.html c.html ddd.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在shell选项中开启了&lt;code>extglob&lt;/code>选项(&lt;code>shopt -s extglob&lt;/code>)，那么shell在模式匹配中可以使用五种扩展模式。&lt;/p>
&lt;ul>
&lt;li>&lt;code>?(pattern-list)&lt;/code>：匹配零个或一个的给定模式。&lt;/li>
&lt;li>&lt;code>*(pattern-list)&lt;/code>：匹配零个或多个的给定模式。&lt;/li>
&lt;li>&lt;code>+(pattern-list)&lt;/code>：匹配一个或多个的给定模式。&lt;/li>
&lt;li>&lt;code>@(pattern-list)&lt;/code>：匹配一个给定的模式。&lt;/li>
&lt;li>&lt;code>!(pattern-list)&lt;/code>：匹配除了给定的模式的其他模式。&lt;/li>
&lt;/ul>
&lt;p>根据上述给出的文件，例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ ls c?&lt;span class="o">([&lt;/span>a-z&lt;span class="o">])&lt;/span>.html &lt;span class="c1"># c后面匹配0或1个字母&lt;/span>
&lt;span class="ln"> 2&lt;/span>cd.html c.html
&lt;span class="ln"> 3&lt;/span>$ ls a*&lt;span class="o">([&lt;/span>a-z&lt;span class="o">])&lt;/span>.* &lt;span class="c1"># 匹配以a开头的任意文件（文件后缀由.*匹配）&lt;/span>
&lt;span class="ln"> 4&lt;/span>aaa.txt abc.txt a.md a.txt
&lt;span class="ln"> 5&lt;/span>$ ls a+&lt;span class="o">([&lt;/span>a-z&lt;span class="o">])&lt;/span>.* &lt;span class="c1"># 匹配以a开头，并且不是单个a的文件，也就是说a后面必须有别的字母（文件后缀由.*匹配）&lt;/span>
&lt;span class="ln"> 6&lt;/span>aaa.txt abc.txt
&lt;span class="ln"> 7&lt;/span>$ ls c@&lt;span class="o">([&lt;/span>a-z&lt;span class="o">])&lt;/span>.html &lt;span class="c1"># 严格仅匹配一次&lt;/span>
&lt;span class="ln"> 8&lt;/span>cd.html
&lt;span class="ln"> 9&lt;/span>$ ls !&lt;span class="o">([&lt;/span>a-z&lt;span class="o">])&lt;/span>.* &lt;span class="c1"># 不匹配任何单个字母为名的文件（文件后缀由.*匹配）&lt;/span>
&lt;span class="ln">10&lt;/span>001.txt aaa.txt abc.txt cd.html ddd.html
&lt;span class="ln">11&lt;/span>$ ls +&lt;span class="o">([[&lt;/span>:digit:&lt;span class="o">]])&lt;/span>.* &lt;span class="c1"># 匹配名称全是数字的文件（文件后缀由.*匹配）&lt;/span>
&lt;span class="ln">12&lt;/span>001.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="大括号展开">大括号展开&lt;/h2>
&lt;p>大括号是shell所有展开中的第一步，这意味着在执行大括号展开的时候，其他展开的标识符都存在与其中，这导致大括号展开&lt;strong>相对严格且固定的格式&lt;/strong>，任何不正确的格式都会让shell无法识别大括号展开而原样输出。大括号扩展的语法有两种形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>preamble&lt;span class="o">{&lt;/span>pattern1,pattern2,...&lt;span class="o">}&lt;/span>postscript
&lt;span class="ln">2&lt;/span>或者
&lt;span class="ln">3&lt;/span>preamble&lt;span class="o">{&lt;/span>start..end&lt;span class="o">[&lt;/span>..incr&lt;span class="o">]}&lt;/span>postscript
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，前导&lt;code>preamble&lt;/code>和后缀&lt;code>postscript&lt;/code>都是可选的，表示大括号左右的内容。&lt;/p>
&lt;p>大括号展开本质上是一种生成多个字符串的机制（由一变多），可用于生成路径和文件名称的字符串、参数的字符串甚至用户自定义输入的字符串。先举几个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>a,b&lt;span class="o">}&lt;/span>b &lt;span class="c1"># {a,b}生成两个&lt;/span>
&lt;span class="ln"> 2&lt;/span>aab abb
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>xy,yx,yz&lt;span class="o">}&lt;/span> &lt;span class="c1"># 生成3个字符串，无后缀&lt;/span>
&lt;span class="ln"> 4&lt;/span>axy ayx ayz
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>a..d&lt;span class="o">}&lt;/span>b &lt;span class="c1"># 正向序列，生成a,b,c,d四个&lt;/span>
&lt;span class="ln"> 6&lt;/span>aab abb acb adb
&lt;span class="ln"> 7&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>d..a&lt;span class="o">}&lt;/span>b &lt;span class="c1"># 反向序列，生成d,c,b,a四个&lt;/span>
&lt;span class="ln"> 8&lt;/span>adb acb abb aab
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>d..a..2&lt;span class="o">}&lt;/span>b &lt;span class="c1"># 反向序列，步长为2的方式生成，d,b两个&lt;/span>
&lt;span class="ln">10&lt;/span>adb abb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，大括号的实际效果&lt;strong>是将大括号外的内容和大括号内的每一个内容（用逗号或序列区分）进行组合&lt;/strong>，生成字符串。在使用&lt;strong>逗号&lt;/strong>进行分割的语法中，大括号内至少只要有一个逗号。若没有逗号，shell将不认为是大括号展开，原样输出内容。这同时意味大括号至少会生成两个字符串，如果为大括号内有空内容，生成的时候也是将空内容和大括号左右组合起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>b&lt;span class="o">}&lt;/span> &lt;span class="c1"># 没有逗号则原样输出&lt;/span>
&lt;span class="ln">2&lt;/span>a&lt;span class="o">{&lt;/span>b&lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>$ $ &lt;span class="nb">echo&lt;/span> a&lt;span class="o">{&lt;/span>a,,c&lt;span class="o">}&lt;/span> &lt;span class="c1"># 大括号展开对空内容的处理&lt;/span>
&lt;span class="ln">4&lt;/span>aa a ac
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而使用序列进行大括号展开，一定要使用&lt;code>..&lt;/code>符号，其左边是起始字符，右边是终止字符，默认包括起始和终止字符。如果需要指定步长（INCR），则使用两次&lt;code>..&lt;/code>符号，步长必须是一个整数。。如果不给定步长，shell会根据起始、终止内容自动判断步长为+1或-1。&lt;/p>
&lt;p>大括号展开可以复合，即大括号展开可以内嵌到另一个大括号开展中，并且展开顺序是由外向内。《Bash参考手册》上有一个很有借鉴意义的例子，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>chown root /usr/&lt;span class="o">{&lt;/span>ucb/&lt;span class="o">{&lt;/span>ex,edit&lt;span class="o">}&lt;/span>,lib/&lt;span class="o">{&lt;/span>ex?.?*,how_ex&lt;span class="o">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先将最外层的大括号开展，结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>chown root /usr/ucb/&lt;span class="o">{&lt;/span>ex,edit&lt;span class="o">}&lt;/span> /usr/lib/&lt;span class="o">{&lt;/span>ex?.?*,how_ex&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后再次执行大括号展开，最终结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>chown root /usr/ucb/ex /usr/usb/edit /usr/lib/ex?.?* /usr/lib/how_ex
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后需要强调一点：大括号展开又是优先级最高的展开，因此语法结构固定且严格。单、双引号内的大括号不进行展开（参考《Shell 骨干流程1——形成初步命令》的引号章节）；为避免与参数扩展冲突，字符串&lt;code>'${'&lt;/code>亦不被认为是大括号扩展。&lt;/p>
&lt;h2 id="波浪符号展开">波浪符号展开&lt;/h2>
&lt;p>如果一个单词(word)以不带引号的波浪字符（~）开始，那么所有直到第一个非加引号的斜杠（或所有字符，如果没有未加引号的斜杠出现）的字符都被认为是波浪前缀。一般情况下，&lt;strong>波浪字符与shell的环境变量有关&lt;/strong>（如&lt;code>$HOME,$PWD,$OLDPWD&lt;/code>），如果波浪字符与数字组合，那么会涉及到&lt;strong>shell的&lt;code>dirs&lt;/code>内置命令&lt;/strong>，我们将会单独说明。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>波浪字符最常用方法是表示当前用户的HOME目录，即&lt;code>~&lt;/code>等同于&lt;code>$HOME&lt;/code>。如果波浪字符后面加特定用户名，则表示该用户名的HOME目录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~ &lt;span class="c1"># 波浪线单独表示当前用户HOME目录&lt;/span>
&lt;span class="ln">2&lt;/span>/home/lelouch
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~root &lt;span class="c1"># 波浪线后面跟用户名表示该用户名的HOME目录&lt;/span>
&lt;span class="ln">4&lt;/span>/root
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~test
&lt;span class="ln">6&lt;/span>/home/test
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>波浪字符与&lt;code>'+,-'&lt;/code>组合，与当前路径有关，&lt;code>~+&lt;/code>表示当前路径(&lt;code>$PWD&lt;/code>)，&lt;code>~-&lt;/code>表示上个路径。&lt;code>'-'&lt;/code>用在路径名中通常表示上次所在目录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># 原始目录&lt;/span>
&lt;span class="ln">2&lt;/span>/home/lelouch
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">cd&lt;/span> /tmp &lt;span class="c1"># 切换到/tmp目录&lt;/span>
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~+ &lt;span class="c1"># 显示当前目录&lt;/span>
&lt;span class="ln">5&lt;/span>/tmp
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~- &lt;span class="c1"># 显示前一个目录&lt;/span>
&lt;span class="ln">7&lt;/span>/home/lelouch
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>波浪字符、数字N以及可选的&lt;code>'+,-'&lt;/code>组合，则与目录堆栈有关。目录堆栈可用&lt;code>dirs&lt;/code>命令查看。&lt;code>~N&lt;/code>等同于&lt;code>~+N&lt;/code>表示从目录堆栈&lt;strong>顶部&lt;/strong>开始数，&lt;code>~-N&lt;/code>表示从目录堆栈&lt;strong>底部&lt;/strong>开始数。我们单开一个小节来说明。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="shell文件目录堆栈">shell文件目录堆栈&lt;/h3>
&lt;p>shell为了方便用户在多个目录之间直接切换，提供了目录堆栈功能。目录堆栈是将若干个目录放到一起，目录的增删遵循后入先出的规则（和堆栈一样），并且用户可以直接访问到目录堆栈中的任一目录，与目录堆栈相关的命令有：&lt;code>pushd, popd, dirs&lt;/code>。使用&lt;code>dirs&lt;/code>命令可以看到目录堆栈的内容。使用&lt;code>pushd&lt;/code>命令切换到目录同时，会将该目录添加到堆栈顶部，而使用&lt;code>popd&lt;/code>命令会删除堆栈顶部目录。默认情况下，目录堆栈底部总是保留当前目录位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">dirs&lt;/span>
&lt;span class="ln"> 2&lt;/span>~
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># dirs 使用指南&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">dirs&lt;/span> &lt;span class="o">[&lt;/span>-clpv&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>+n&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-n&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 5&lt;/span> 当命令不带任何参数时，显示当前目录堆栈的内容，默认情况下，所有内容显示在一行，并以空格分隔。我们使用 &lt;span class="nb">pushd&lt;/span> 命令向目录堆栈压入新的目录项，使用 &lt;span class="nb">popd&lt;/span> 删除目录项。当前目录项始终放在目录堆栈的底部。
&lt;span class="ln"> 6&lt;/span> -c 清除目录堆栈所有条目。
&lt;span class="ln"> 7&lt;/span> -l 生成一个带有全路径名的列表；默认情况下用波浪线代表用户HOME目录。
&lt;span class="ln"> 8&lt;/span> -p 一个目录一行的方式显示。
&lt;span class="ln"> 9&lt;/span> -v 每行一个目录来显示目录栈的内容，每个目录前加上的编号。
&lt;span class="ln">10&lt;/span> +n 显示从左到右的第n个目录，数字从0开始。
&lt;span class="ln">11&lt;/span> -n 显示从右到左的第n个日录，数字从0开始。
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当前所在目录作为目录堆栈的底部常驻目录，无法将其&lt;code>popd&lt;/code>出来。&lt;/p>
&lt;p>shell通过&lt;code>psuhd&lt;/code>和&lt;code>popd&lt;/code>两个命令操作目录堆栈，不加任何参数的情况下，使用&lt;code>pushd&lt;/code>命令切换到目录同时，会将该目录添加到堆栈顶部，而使用&lt;code>popd&lt;/code>命令会删除堆栈顶部目录。若&lt;code>pushd&lt;/code>命令不加任何参数，则会将位于记录栈最上面的2个目录对换位置。当然，&lt;code>psuhd&lt;/code>和&lt;code>popd&lt;/code>有带参数的使用方式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 注意下面的N是数字，n是字母n参数&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nb">popd&lt;/span> +N &lt;span class="c1"># 删除栈中（从左边数）第N个元素，由0开始计。&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">popd&lt;/span> -N &lt;span class="c1"># 删除栈中（从右边数）第N个元素，由0开始计。&lt;/span>
&lt;span class="ln"> 5&lt;/span>pop -n &lt;span class="c1"># 不改变当前目录（也就是不改变栈顶元素，操作除了栈顶外栈内其他元素）&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># usage: pushd [-n] [+N | -N | dir] &lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nb">pushd&lt;/span> &lt;span class="c1"># 不加参数时，交换栈顶前两个元素&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">pushd&lt;/span> +N &lt;span class="c1"># 将栈内元素循环左移，直到将（从左边数）第N个元素移动到栈顶，由0开始计。&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">pushd&lt;/span> -N &lt;span class="c1"># 将栈内元素循环左移，直到将（从右边数）第N个元素移动到栈顶，由0开始计。&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">pushd&lt;/span> -n dir &lt;span class="c1"># 将目录入栈，但不改变当前元素，即将目录插入栈中作为第二个元素。 注意-n参数要在目录之前。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>借由&lt;code>pushd&lt;/code>和&lt;code>popd&lt;/code>的特性，可以用shell实现目录间的快速定位。&lt;/p>
&lt;p>那么目录堆栈和波浪符号有什么关系呢？答案是&lt;strong>波浪符号与加减号、数字的组合是&lt;code>dirs&lt;/code>与加减号、数字的组合的简写&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>〜N
&lt;span class="ln">2&lt;/span>等同于&lt;span class="s1">&amp;#39;dirs +N&amp;#39;&lt;/span>显示的字符串
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>〜+N
&lt;span class="ln">5&lt;/span>等同于&lt;span class="s1">&amp;#39;dirs +N&amp;#39;&lt;/span>显示的字符串
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>〜-N
&lt;span class="ln">8&lt;/span>等同于&lt;span class="s1">&amp;#39;dirs -N&amp;#39;&lt;/span>显示的字符串
&lt;/code>&lt;/pre>&lt;/div>&lt;p>举个例子，我们先将&lt;code>/home /usr /etc /tmp ~&lt;/code>反向压入目录堆栈。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">dirs&lt;/span>
&lt;span class="ln"> 2&lt;/span>/home /usr /etc /tmp ~
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">dirs&lt;/span> +1
&lt;span class="ln"> 4&lt;/span>/usr
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~1 ~+1 &lt;span class="c1"># 二者效果等同于dirs +1&lt;/span>
&lt;span class="ln"> 6&lt;/span>/usr /usr
&lt;span class="ln"> 7&lt;/span>$ &lt;span class="nb">dirs&lt;/span> -1
&lt;span class="ln"> 8&lt;/span>/tmp
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> ~-1 &lt;span class="c1"># 效果等同于dirs -1&lt;/span>
&lt;span class="ln">10&lt;/span>/tmp
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参数与变量展开">参数与变量展开&lt;/h2>
&lt;p>&lt;code>$&lt;/code>在shell中是一个非常重要的符号，参数与变量展开、命令替换、算术表达式计算都与&lt;code>$&lt;/code>相关。接下来三个小结，我们将逐个进行介绍。&lt;/p>
&lt;p>首先，&lt;code>$&lt;/code>最常见的功能是组成参数/变量名称，标准模式为&lt;code>${...}&lt;/code>，在不会产生误解的情形下，大括号可以省略。在大于等于10的位置参数、特殊模式变量以及名称中带有特殊符号导致变量名称有二义性时，必须要有大括号包裹。shell中的变量和一般编程语言中变量作用类似，但是在设置变量是不需要使用&lt;code>$&lt;/code>符合，只有在引用变量时才需要，例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>hello
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>
&lt;span class="ln">3&lt;/span>hello
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">5&lt;/span>hello
&lt;span class="ln">6&lt;/span>$ &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>world
&lt;span class="ln">7&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>
&lt;span class="ln">8&lt;/span>world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了常规的使用方法，shell还为变量添加了各种各样便利的功能。这些拓展功能都需要使用大括号包裹。&lt;/p>
&lt;h3 id="参数间接扩展">参数间接扩展&lt;/h3>
&lt;p>如果shell变量中，&lt;strong>&lt;code>$&lt;/code>符号后面的第一个字符是感叹号&lt;code>!&lt;/code>，且后面的内容是一个变量的名称&lt;/strong>，那么引用的参数并不是“名称”而是该名称对应的实际的值。这就构成了变量间的间接引用。举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>linux
&lt;span class="ln">2&lt;/span>$ &lt;span class="nv">paramter&lt;/span>&lt;span class="o">=&lt;/span>name
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!parameter&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 这里实际等同于${name}&lt;/span>
&lt;span class="ln">4&lt;/span>linux
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面例子中，&lt;code>${}&lt;/code>中第一个字符是感叹号，而且&lt;code>parameter&lt;/code>是一个变量的名称，其值为&lt;code>name&lt;/code>，因此在执行时shell把&lt;code>!parameter&lt;/code>转换成其变量的值，即为&lt;code>name&lt;/code>，因此扩展后的结果为&lt;code>${name}&lt;/code>，最终显示&lt;code>name&lt;/code>变量的值&lt;code>linux&lt;/code>。当然，如果感叹号后面跟的内容不是变量的名称，那么就会报&lt;code>-bash: parameters: invalid indirect expansion&lt;/code>错误。&lt;/p>
&lt;h3 id="参数匹配扩展">参数匹配扩展&lt;/h3>
&lt;p>参数的匹配扩展与参数间接扩展&lt;strong>外表相似，但是用法完全不同&lt;/strong>。参数匹配扩展的更像是查找变量名前缀相同的变量，因此还引入了通配符&lt;code>*,@&lt;/code>，所以匹配扩展不会涉及变量实际的值。我们在前一个例子基础上增加几个变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">name1&lt;/span>&lt;span class="o">=&lt;/span>ubuntu
&lt;span class="ln">2&lt;/span>$ &lt;span class="nv">name2&lt;/span>&lt;span class="o">=&lt;/span>redhat
&lt;span class="ln">3&lt;/span>$ &lt;span class="nv">name3&lt;/span>&lt;span class="o">=&lt;/span>slackware
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!name*&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">5&lt;/span>name name1 name2 name3
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!name@&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">7&lt;/span>name name1 name2 name3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，参数间接扩展获取的是参数&lt;strong>值&lt;/strong>，参数匹配扩展获取的符合前缀的参数&lt;strong>名&lt;/strong>。如果我们将二者组合起来，就可以获取有相同前缀变量名的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="k">for&lt;/span> var in &lt;span class="si">${&lt;/span>&lt;span class="p">!name*&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$var&lt;/span>&lt;span class="s2">--&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!var&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">done&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>name--linux
&lt;span class="ln">3&lt;/span>name1--ubuntu
&lt;span class="ln">4&lt;/span>name2--redhat
&lt;span class="ln">5&lt;/span>name3--slackware
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子中，&lt;code>${!name*}&lt;/code>使用的是参数匹配扩展，匹配所有以&lt;code>name&lt;/code>为前缀的变量，共找到&lt;code>name, name1, name2, name3&lt;/code>四个，然后在for循环遍历中，再用参数间接扩展&lt;code>${!var}&lt;/code>将&lt;code>var&lt;/code>所指向的变量名称的实际值打印出来。&lt;/p>
&lt;p>我们在上文中提到参数匹配扩展可以用&lt;code>*,@&lt;/code>两种符合，那么使用这两种符号有什么区别吗？区别在于：当表达式被&lt;strong>双引号&lt;/strong>包裹时，&lt;code>@&lt;/code>会扩展成&lt;strong>独立的几个变量&lt;/strong>，而&lt;code>*&lt;/code>则会扩展成&lt;strong>变量组合而成的字符串&lt;/strong>。还是以上面的几个两边为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="k">for&lt;/span> var in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!name@&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$var&lt;/span>&lt;span class="s2">--&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!var&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">done&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>name--linux
&lt;span class="ln">3&lt;/span>name1--ubuntu
&lt;span class="ln">4&lt;/span>name2--redhat
&lt;span class="ln">5&lt;/span>name3--slackware
&lt;span class="ln">6&lt;/span>$ &lt;span class="k">for&lt;/span> var in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!name*&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$var&lt;/span>&lt;span class="s2">--&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!var&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">done&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span>-bash: name name1 name2 name3: invalid variable name
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在双引号中使用&lt;code>@&lt;/code>符号生成的是一个序列，可以通过&lt;code>for&lt;/code>循环遍历；而通过&lt;code>*&lt;/code>符号生成的是一个字符串，&lt;code>for&lt;/code>循环会直接读取整个字符串&lt;code>name name1 name2 name3&lt;/code>作为&lt;code>$var&lt;/code>的值，因此无法找到对应的变量，从而报&lt;code>invalid variable name&lt;/code>错误。&lt;/p>
&lt;h3 id="空参数处理">空参数处理&lt;/h3>
&lt;p>由于shell是一个弱类型且语法较为宽松的编程语言，因此不会对变量是否存在、变量是否为&lt;code>NULL&lt;/code>以及变量类型进行检测。如果使用了一个未设置的变量，shell直接返回空。这让我们在写程序时很容易携程难以查找的bug，因此shell提供了空参数处理的扩展。&lt;/p>
&lt;p>空参数处理的格式为：&lt;code>${变量名[:][-+=?]变量值}&lt;/code>。其中起不起用冒号有区别，后面&lt;code>[-+=?]&lt;/code>四选一。&lt;/p>
&lt;p>我们首先来解释有没有冒号&lt;code>:&lt;/code>的区别。当没有冒号的时候，即&lt;code>${变量名[-+=?]变量值}&lt;/code>时，shell只检测变量是否存在，相当于&lt;code>test -v 变量名&lt;/code>；而使用冒号的时候，即&lt;code>${变量名:[-+=?]变量值}&lt;/code>时，shell不仅检测变量时候存在，&lt;strong>而且检测变量是否为空&lt;/strong>，相当于&lt;code>test -v 变量名 &amp;amp;&amp;amp; test -z 变量名&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>test -v&lt;/code>用于检测变量是否存在，变量存在返回结果0，不存在返回结果1；&lt;code>test -z&lt;/code>用于检测变量长度是否为0，如果为0返回0，否则返回1。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>${parameter:-word}&lt;/code>，如果变量parameter未设置或者值为空，那么给出word的值；否则给出&lt;code>$parameter&lt;/code>的值。&lt;/li>
&lt;li>&lt;code>${parameter:-word}&lt;/code>，如果变量parameter未设置或者值为空，那么给出word的值同时把word的值赋给&lt;code>$parameter&lt;/code>，否则给出&lt;code>$parameter&lt;/code>的值；注意无法给位置参数和特殊参数赋值；&lt;/li>
&lt;li>&lt;code>${parameter:?word}&lt;/code>，&lt;strong>用于交互式shell&lt;/strong>，如果变量parameter未设置或者值为空，那么将word内容作为标准错误返回给shell界面，否则给出&lt;code>$parameter&lt;/code>的值。&lt;/li>
&lt;li>&lt;code>${parameter:+word}&lt;/code>，&lt;code>${parameter:-word}&lt;/code>的相反操作。如果parameter为空或未设置，则不进行任何替换，否则给出word的值。&lt;/li>
&lt;/ul>
&lt;p>下面举几个简单的例子来帮助理解空参数处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>linux
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="nv">name1&lt;/span>&lt;span class="o">=&lt;/span>
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">windows&lt;/span>&lt;span class="si">}&lt;/span> --- &lt;span class="si">${&lt;/span>&lt;span class="nv">name1&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">windows&lt;/span>&lt;span class="si">}&lt;/span> --- &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">-windows&lt;/span>&lt;span class="si">}&lt;/span> --- &lt;span class="si">${&lt;/span>&lt;span class="nv">name1&lt;/span>&lt;span class="p">-windows&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln"> 4&lt;/span>linux --- windows --- linux ---
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># name 存在且不为空，因此${name:-windows}，${name-windows}给出$name的值，&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># name1存在但是为空，因此${name1:-windows}给出替代值windows，&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 而${name1-windows}只检测到$name1存在，因此直接输出$name1，结果为空值&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ &lt;span class="nb">echo&lt;/span> name1
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 无论是${name1:-windows}还是${name1-windows}都不会给$name1赋值。&lt;/span>
&lt;span class="ln">11&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:=windows&lt;/span>&lt;span class="si">}&lt;/span> --- &lt;span class="si">${&lt;/span>&lt;span class="nv">name1&lt;/span>&lt;span class="p">:=windows&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">12&lt;/span>linux --- windows
&lt;span class="ln">13&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$name1&lt;/span>
&lt;span class="ln">14&lt;/span>windows
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># 可以看出使用:=会给原变量赋值。&lt;/span>
&lt;span class="ln">16&lt;/span>$ &lt;span class="nv">name1&lt;/span>&lt;span class="o">=&lt;/span>
&lt;span class="ln">17&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">=windows&lt;/span>&lt;span class="si">}&lt;/span> --- &lt;span class="si">${&lt;/span>&lt;span class="nv">name1&lt;/span>&lt;span class="p">=windows&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">18&lt;/span>linux ---
&lt;span class="ln">19&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$name1&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1"># 这里是空值，因为$name1存在，因此${name1=windows}不进行赋值操作&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="子串扩展">子串扩展&lt;/h3>
&lt;p>shell的子串扩展是从shell变量中切割出一部分（字串）的快捷方法，功能和python的切片类似。格式为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">offset&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">offset&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">length&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>offset&lt;/code>代表偏移值，为开始切割字符的序数，&lt;strong>从0开始算&lt;/strong>，&lt;code>length&lt;/code>为切割的长度，如果不指定，默认截取到最后。例子如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">string&lt;/span>&lt;span class="o">=&lt;/span>01234567890abcdefgh
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 不指定length默认到末尾，第一位索引序数为0&lt;/span>
&lt;span class="ln">3&lt;/span>7890abcdefgh
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># length长度为0，截取长度也为0&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># length长度为2&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="m">78&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果&lt;code>offset&lt;/code>值为负数，那么子串是从最后开始计算起始点，-1表示最后一位，-2表示倒数第二位。&lt;/li>
&lt;li>如果&lt;code>length&lt;/code>值大于剩余的字符数，那么子串只截取到末尾。&lt;/li>
&lt;li>如果&lt;code>length&lt;/code>值为负数，那么&lt;code>length&lt;/code>表示的是原字符串截取到所在位序数，不包括&lt;code>length&lt;/code>所在的那一位。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>需要指出，冒号&lt;code>:&lt;/code>和负号&lt;code>-&lt;/code>之间至少要用一个空格隔开，否在会被当成是空参数处理&lt;code>:-&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>例子如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">string&lt;/span>&lt;span class="o">=&lt;/span>01234567890abcdefgh
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">100&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 当length大于剩余字符串长度时，只截取到末尾&lt;/span>
&lt;span class="ln">3&lt;/span>7890abcdefgh
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">: -7:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 注意中间有个空格&lt;/span>
&lt;span class="ln">5&lt;/span>bc
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">: -5&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># -5(d)是原变量倒数第5个索引，但是不包括-5(d)&lt;/span>
&lt;span class="ln">7&lt;/span>01234567890abc
&lt;span class="ln">8&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">: -2: -1&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 这个例子更明显的表现出只包含开头，不包含结尾&lt;/span>
&lt;span class="ln">9&lt;/span>g
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般情况下，子串扩展都是从0开头，-1结尾，但是有一种例外，&lt;strong>位置参数是按1开始从头计算偏移值&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 设置位置参数&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">set&lt;/span> -- &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">0&lt;/span> a b c d e f g h
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">@:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 位置参数开头从1开始计算&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">0&lt;/span> a b c d e f g h
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">7&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 其他参数都是从0开始计算&lt;/span>
&lt;span class="ln">6&lt;/span>7890abcdefgh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参数长度计算">参数长度计算&lt;/h3>
&lt;p>bash shell在参数扩展中还提供了一种计算参数长度的便捷方式，即为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于一般变量，&lt;code>${#parameter}&lt;/code>会计算字符串长度，对于位置参数，它会计算位置参数的个数，如果parameter是一个数组名，并且下标为*或者@，表达式扩展为数组的元素个数。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">set&lt;/span> -- a b c d
&lt;span class="ln">2&lt;/span>$ &lt;span class="nv">var&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">123456789&lt;/span>
&lt;span class="ln">3&lt;/span>$ &lt;span class="nv">arr&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> 3&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="m">4&lt;/span>
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="m">9&lt;/span>
&lt;span class="ln">8&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[*]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参数匹配删除">参数匹配删除&lt;/h3>
&lt;p>shell可以通过自带的模式匹配来识别特定的“关键字”，并对识别出来的内容进行操作，例如删除、替换等。这一小节，我们先说参数匹配删除，它可以实现一些很常见的操作，如获取文件名、文件后缀、文件路径、数字等。&lt;/p>
&lt;p>匹配删除共有四种模式，分别是从头最短检索、从头最长检索、从尾最短检索、从尾最长检索。从头、从尾比较容易理解，就是匹配的时候是从前往后找还是从后往前找。最长、最短通常是对&lt;code>*&lt;/code>通配符而言，如果遇到连续多个合适的匹配内容，最短匹配是匹配尽量少的字符、最长匹配是尽量多的匹配字符。按照这个分类方式，我们可以列出参数匹配删除的用法表格：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">从头&lt;/th>
&lt;th style="text-align:center">从尾&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">最短&lt;/td>
&lt;td style="text-align:center">&lt;code>${parameter#word}&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>${parameter%word}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">最长&lt;/td>
&lt;td style="text-align:center">&lt;code>${parameter##word}&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>${parameter%%word}&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>最短最长比较好记，使用一个符号&lt;code>#,%&lt;/code>比较短，是最短匹配；使用两个符号&lt;code>##,%%&lt;/code>比较长，是最长匹配。至于从头从尾，我的记忆方法是通常&lt;code>#&lt;/code>符号在bash shell中放在开头比较多（注释），因此是从头匹配。&lt;/p>
&lt;p>下面还是通过几个例子来方便理解参数匹配删除：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 先设置一些位置参数&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="nb">set&lt;/span> -- ab-cd-ef&lt;span class="o">==&lt;/span> uv-wx-yz&lt;span class="o">==&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># 使用从头最短匹配，*-匹配到的是ab- ，然后将其删除&lt;/span>
&lt;span class="ln"> 4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">#*-&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln"> 5&lt;/span>cd-ef&lt;span class="o">==&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 使用从头最长匹配，*-匹配到的是ab-cd- ，然后将其删除&lt;/span>
&lt;span class="ln"> 7&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">##*-&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">ef&lt;/span>&lt;span class="o">==&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 使用从尾最短匹配，-*=匹配到的是-ef== ，然后删除&lt;/span>
&lt;span class="ln">10&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">%-*=&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">11&lt;/span>ab-cd
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># 使用从尾最长匹配，-*=匹配到的是-cd-ef== ，然后删除&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">%%-*=&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">14&lt;/span>ab
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，和计算参数长度的扩展一样，如果是使用&lt;code>@,*&lt;/code>的&lt;strong>位置参数或数组&lt;/strong>，那么参数匹配删除将对其中的&lt;strong>每一个元素&lt;/strong>进行操作。类似于&lt;code>for ... in...&lt;/code>的效果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 在以下几个例子中，表示位置参数或数组的#，@符合可以互换。&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 对于使用@，*的位置参数，将会对其中每一个元素进行匹配删除操作&lt;/span>
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">@#*-&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln"> 4&lt;/span>cd-ef&lt;span class="o">==&lt;/span> wx-yz&lt;span class="o">==&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">*%%-*=&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>ab uv
&lt;span class="ln"> 7&lt;/span>$ &lt;span class="nv">arr&lt;/span>&lt;span class="o">=(&lt;/span>--a --b --c&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># 对数组中每一个元素进行从头最短匹配&lt;/span>
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[*]#-?(-)&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># ?(-)需要启用“extglob” shell选项&lt;/span>
&lt;span class="ln">10&lt;/span>-a -b -c
&lt;span class="ln">11&lt;/span>&lt;span class="c1"># 对数组中每一个元素进行从头最长匹配&lt;/span>
&lt;span class="ln">12&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[@]##-?(-)&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># ?(-)需要启用“extglob” shell选项&lt;/span>
&lt;span class="ln">13&lt;/span>a b c
&lt;span class="ln">14&lt;/span>$ &lt;span class="nv">arr&lt;/span>&lt;span class="o">=(&lt;/span>a-- b-- c--&lt;span class="o">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># 对数组中每一个元素进行从尾最短匹配&lt;/span>
&lt;span class="ln">16&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[*]%-?(-)&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">17&lt;/span>a- b- c-
&lt;span class="ln">18&lt;/span>&lt;span class="c1"># 对数组中每一个元素进行从尾最长匹配&lt;/span>
&lt;span class="ln">19&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[@]%%-?(-)&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">20&lt;/span>a b c
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c1"># 几个实用的例子&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="c1"># 获取文件名，文件后缀&lt;/span>
&lt;span class="ln">24&lt;/span>$ &lt;span class="nv">FILENAME&lt;/span>&lt;span class="o">=&lt;/span>linux_bash.sh
&lt;span class="ln">25&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">FILENAME&lt;/span>&lt;span class="p">%.*&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">26&lt;/span>linux_bash
&lt;span class="ln">27&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">FILENAME&lt;/span>&lt;span class="p">##*.&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">28&lt;/span>sh
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># 判断某字符串是否以某字符开头&lt;/span>
&lt;span class="ln">30&lt;/span>$ &lt;span class="nv">OPT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;-option&amp;#39;&lt;/span>
&lt;span class="ln">31&lt;/span>$ &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">OPT&lt;/span>&lt;span class="p">#-&lt;/span>&lt;span class="si">}&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">OPT&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">32&lt;/span>&amp;gt; &lt;span class="k">then&lt;/span>
&lt;span class="ln">33&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;start with -&amp;#34;&lt;/span>
&lt;span class="ln">34&lt;/span>&amp;gt; &lt;span class="k">else&lt;/span>
&lt;span class="ln">35&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;not start with -&amp;#34;&lt;/span>
&lt;span class="ln">36&lt;/span>&amp;gt; &lt;span class="k">fi&lt;/span>
&lt;span class="ln">37&lt;/span>start with -
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参数匹配替换">参数匹配替换&lt;/h3>
&lt;p>前面介绍了参数的匹配删除，bash还提供了匹配替换的功能，也是通过自带的模式匹配来识别特定的“关键字”再进行替换。其格式为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">/[/#%]pattern/string&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>parameter&lt;/code>是待替换的原变量，&lt;code>pattern&lt;/code>是匹配的模式，即需要匹配的内容，&lt;code>string&lt;/code>是替换的内容。如果&lt;code>pattern&lt;/code>匹配到了符合的字符子串，那么就用&lt;code>string&lt;/code>替换匹配到的内容；如果&lt;code>pattern&lt;/code>未匹配到相关内容，则不做任何操作。需要指出的是，参数匹配替换都是用的是&lt;strong>最长匹配&lt;/strong>。参数匹配替换的详细用法有以下6点：&lt;/p>
&lt;ol>
&lt;li>默认情况下，即&lt;code>${parameter/pattern/string}&lt;/code>，是从头匹配&lt;strong>一个&lt;/strong>&lt;code>pattern&lt;/code>内容并替换。&lt;/li>
&lt;li>当&lt;code>pattern&lt;/code>以&lt;code>/&lt;/code>符号开头时，即&lt;code>${parameter//pattern/string}&lt;/code>，将会匹配&lt;strong>所有&lt;/strong>符合&lt;code>pattern&lt;/code>的内容。&lt;/li>
&lt;li>当&lt;code>pattern&lt;/code>以&lt;code>#&lt;/code>符号开头时，即&lt;code>${parameter/#pattern/string}&lt;/code>，将会匹配以&lt;code>pattern&lt;/code>开头的内容。&lt;/li>
&lt;li>当&lt;code>pattern&lt;/code>以&lt;code>%&lt;/code>符号开头时，即&lt;code>${parameter/%pattern/string}&lt;/code>，将会匹配以&lt;code>pattern&lt;/code>结尾的内容。&lt;/li>
&lt;li>如果启用了&lt;code>nocasematch&lt;/code> shell选项，则不考虑字母的大小写。&lt;/li>
&lt;li>和参数长度计算、参数匹配删除一样，如果是使用&lt;code>@,*&lt;/code>的&lt;strong>位置参数或数组&lt;/strong>，那么参数匹配删除将对其中的&lt;strong>每一个元素&lt;/strong>进行操作。类似于&lt;code>for ... in...&lt;/code>的效果。&lt;/li>
&lt;/ol>
&lt;p>我们以字符串&lt;code>string=abceddabceddabcedd&lt;/code>为例说明参数匹配替换的用法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nv">string&lt;/span>&lt;span class="o">=&lt;/span>abceddabceddabcedd
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">/d?a/+&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 匹配到abce &amp;#34;dda&amp;#34; bceddabcedd&lt;/span>
&lt;span class="ln"> 3&lt;/span>abce+bceddabcedd
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 匹配替换都是使用最长匹配&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">/d*a/+&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 匹配到abce &amp;#34;ddabcedda&amp;#34; bcedd&lt;/span>
&lt;span class="ln"> 6&lt;/span>abce+bcedd
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 替换所有d?a&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">//d?a/f&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 匹配到abce &amp;#34;dda&amp;#34; bce &amp;#34;dda&amp;#34; bcedd&lt;/span>
&lt;span class="ln"> 9&lt;/span>abce+bce+bcedd
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 替换以a开头的内容&lt;/span>
&lt;span class="ln">11&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">/#a??/+&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 匹配到 &amp;#34;abc&amp;#34; eddabceddabcedd&lt;/span>
&lt;span class="ln">12&lt;/span>+eddabceddabcedd
&lt;span class="ln">13&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">/#b??/+&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 没有b开头的内容，因此未匹配到任何内容&lt;/span>
&lt;span class="ln">14&lt;/span>abceddabceddabcedd
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># 替换以b*d结尾的内容&lt;/span>
&lt;span class="ln">16&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">/%b*d/+&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 匹配到a &amp;#34;bceddabceddabcedd&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span>a+
&lt;span class="ln">18&lt;/span>&lt;span class="c1"># 对于位置参数的处理&lt;/span>
&lt;span class="ln">19&lt;/span>$ &lt;span class="nb">set&lt;/span> -- abc abd abe
&lt;span class="ln">20&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">@/a/+&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">21&lt;/span>+bc +bd +be
&lt;span class="ln">22&lt;/span>&lt;span class="c1"># 对于数组的处理&lt;/span>
&lt;span class="ln">23&lt;/span>$ &lt;span class="nv">arr&lt;/span>&lt;span class="o">=(&lt;/span>abc abd abe&lt;span class="o">)&lt;/span>
&lt;span class="ln">24&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">arr&lt;/span>&lt;span class="p">[@]/a/+&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">25&lt;/span>+bc +bd +be
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="大小写修改">大小写修改&lt;/h3>
&lt;p>bash shell在匹配的基础上还提供了一个小功能，就是将匹配出来的内容进行大小写修改，实际上用的不多，可以作为了解。注：此操作仅适用于bash4.0往上版本。&lt;/p>
&lt;p>其基本格式为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 小写转大写: ^会把开头的小写字母转换成大写，^^会转换所有小写成大写&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">^pattern&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">^^pattern&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 大写转小写: ,会把开头的大写转换成小写，,,会把所以大写转换成小写&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">,pattern&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">parameter&lt;/span>&lt;span class="p">,,pattern
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>举几个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 小写转大写&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="nv">par&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">par&lt;/span>&lt;span class="p">^&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 首字母&lt;/span>
&lt;span class="ln"> 4&lt;/span>Abc
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">par&lt;/span>&lt;span class="p">^^&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 全部&lt;/span>
&lt;span class="ln"> 6&lt;/span>ABC
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 大写转小写&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ &lt;span class="nv">par&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ABC&amp;#39;&lt;/span>
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">par&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">10&lt;/span>aBC
&lt;span class="ln">11&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">par&lt;/span>&lt;span class="p">,,&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">12&lt;/span>abc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，如果是使用&lt;code>@,*&lt;/code>的&lt;strong>位置参数或数组&lt;/strong>，那么大小写修改将对其中的&lt;strong>每一个元素&lt;/strong>进行操作。类似于&lt;code>for ... in...&lt;/code>的效果。&lt;/p>
&lt;h3 id="变量操作">变量操作&lt;/h3>
&lt;p>在bash4.0 版本以后，添加了一些方便使用的小功能，这些被统合为变量操作，格式为&lt;code>${parameter@operator}&lt;/code>，作用为根据操作符(operator)执行参数转换或者，操作符如下：&lt;/p>
&lt;ul>
&lt;li>Q：将字符串使用引号包裹。&lt;/li>
&lt;li>E：对于使用反斜线&lt;code>\&lt;/code>后的字符一律按转义处理。&lt;/li>
&lt;li>P：如果&lt;code>parameter&lt;/code>含有&lt;code>prompt string&lt;/code>时，按照prompt解释。&lt;/li>
&lt;li>A：拓展成参数赋值的语句。&lt;/li>
&lt;li>a：由参数属性值组成的字符串。&lt;/li>
&lt;/ul>
&lt;p>参数扩展做为bash中最多样，最灵活的扩展为shell提供了多样和简洁的处理方式，其本质上是多种小工具的聚合体，有的是为了弥补bash shell本身的弱点，有的是为了综合了使用率最高的小工具。同时这也是bash shell中非常容易出错的部分，需要我们谨慎地使用。&lt;/p>
&lt;h2 id="命令替换">命令替换&lt;/h2>
&lt;p>shell通过命令替换能够完成一些运行时的动态变化。命令替换，就是在执行bash shell是用&lt;strong>命令的输出替换命令本身&lt;/strong>。有两种格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 旧版使用反引号&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">command&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 新版使用$()&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">command&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bash通过在子shell环境中执行命令替换的内容来进行扩展，并将命令替换为命令执行后的标准输出，并删除任何结尾的换行符。嵌入的换行符不会被删除，但在后面再次分词过程中可能会被删除。简单的例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="sb">`&lt;/span>whoami&lt;span class="sb">`&lt;/span>
&lt;span class="ln">2&lt;/span>lelouch
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>
&lt;span class="ln">4&lt;/span>lelouch
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello,`whoami`&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>hello,lelouch
&lt;span class="ln">7&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello,&lt;/span>&lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span>hello,lelouch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那为什么用新版的&lt;code>$()&lt;/code>替代旧版的反引号和呢？第一个原因就是反引号&amp;quot;`&amp;quot;太容易和单引号&amp;quot;'&amp;quot;搞混了，二者长得太像不利于排错。第二个原因就是反引号不容易复合，需要使用转义符号&lt;code>\&lt;/code>而使用&lt;code>$()&lt;/code>则直接嵌套就能使用。举个例子，我们要查看当前用户home目录中的一个&lt;code>test.sh&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 使用反引号命令替代，反引号需要转义&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ cat &lt;span class="sb">`&lt;/span>ls /home/&lt;span class="se">\`&lt;/span>whoami&lt;span class="se">\`&lt;/span>/test.sh&lt;span class="sb">`&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">#!/bin/bash&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">read&lt;/span> filename
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">read&lt;/span> url
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="nb">test&lt;/span> -w &lt;span class="nv">$filename&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">test&lt;/span> -n &lt;span class="nv">$url&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$url&lt;/span> &amp;gt; &lt;span class="nv">$filename&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;写入成功&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;写入失败&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># 使用$()命令替代&lt;/span>
&lt;span class="ln">14&lt;/span>$ cat &lt;span class="k">$(&lt;/span>ls /home/&lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>/test.sh&lt;span class="k">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">#!/bin/bash&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nb">read&lt;/span> filename
&lt;span class="ln">17&lt;/span>&lt;span class="nb">read&lt;/span> url
&lt;span class="ln">18&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="nb">test&lt;/span> -w &lt;span class="nv">$filename&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">test&lt;/span> -n &lt;span class="nv">$url&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$url&lt;/span> &amp;gt; &lt;span class="nv">$filename&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;写入成功&amp;#34;&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;写入失败&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令替代在shell自适应编程里非常重要。因为面向不同用户编程时，各个用户的环境变量，配置文件路径都有差异，bash shell可以通过命令替代了解当前用户的上下文，为shell脚本提供灵活处理不同环境的能力。&lt;/p>
&lt;h2 id="算术表达式扩展">算术表达式扩展&lt;/h2>
&lt;p>算术表达式扩展允许计算算术表达式和替换结果，广义上也属于一种命令替换。算术表达式扩展使用&lt;code>$&lt;/code>和两个小括号，格式是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">$((&lt;/span> expression &lt;span class="k">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>特别地，bash shell中的算术表达式扩展只支持固定长度的证书运算，任何浮点数运算都会被认为是一个错误而不做任何替换操作&lt;/strong>。此外，算术表达式扩展也是可以复合的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="k">))&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln"> 3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="k">))&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="k">))&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln"> 7&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="k">))&lt;/span>
&lt;span class="ln"> 8&lt;/span>-9
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 不支持浮点数运算&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">1&lt;/span>.1+3&lt;span class="k">))&lt;/span>
&lt;span class="ln">11&lt;/span>-bash: 1.1+3: syntax error: invalid arithmetic operator &lt;span class="o">(&lt;/span>error token is &lt;span class="s2">&amp;#34;.1+3&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># 复合的算法表达式&lt;/span>
&lt;span class="ln">13&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="k">))&lt;/span> &lt;span class="k">))&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="m">16&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bash shell的计算能力只是辅助作用，虽然除0错误被捕获并标记为错误，但是bash shell没有溢出检查，不支持浮点运算，也没有强大的数学公式库，因此并不推荐使用bash shell做复杂的数学运算。&lt;/p>
&lt;h2 id="再次单词分割">再次单词分割&lt;/h2>
&lt;p>在《shell骨干流程1——形成初步命令》一文中，我们了解到，shell命令处理流程的第一步就是使用元字符把输入内容分割为标记（token），以便bash shell进行保留字识别和流程控制。但是经过大括号展开、波浪符号展开、命令替换、算数运算扩展这些步骤，&lt;strong>会带来新的内容&lt;/strong>。因此，作为shell处理流程的第10步。我们需要将这些替换过后的内容重新整肃，根据系统分隔符（Internal Field Seperator，IFS）再次将命令分割成一个个便于处理的标记（token，包括控制符和单词）。也是说，如果没有前面几步的扩展，也就不需要再次进行分割。&lt;/p>
&lt;p>默认的IFS有&lt;code>space, tab, newline&lt;/code>以及他们的组合，例如连续的空格，&lt;code>tab&lt;/code>或者多个连续的空行。&lt;/p>
&lt;p>在这次处理中，显式的空参数（&amp;quot;&amp;quot; 或 ''）被保留并作为空字符串传递给命令，未加引号的隐式空参数将被删除。&lt;/p>
&lt;h2 id="路径与文件名展开">路径与文件名展开&lt;/h2>
&lt;p>如果bash中没有设置&lt;code>-f&lt;/code>选项，就会支持路径与文件名扩展，其扩展模式也是通过bash shell自带的模式匹配。比如，显示&lt;code>/etc&lt;/code>目录下的所有配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>ls /etc/*.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或是列出所有以字母&lt;code>a&lt;/code>或&lt;code>b&lt;/code>开头的配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>ls /etc/&lt;span class="o">[&lt;/span>ab&lt;span class="o">]&lt;/span>*.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者是显示所有的以&lt;code>image&lt;/code>开头的后面跟着一个字符格式为&lt;code>.jpg&lt;/code>的文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>ls image?.jpg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在路径与文件名扩展中，字符&lt;code>.&lt;/code>在文件名开头或斜线后必须显式匹配，除非设置了shell选项&lt;code>dotglob&lt;/code>。匹配文件名时，斜杠字符必须始终显示匹配。更多文件匹配的例子可以看文章开头&lt;a href="#shell%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D">shell的模式匹配&lt;/a>小节。&lt;/p>
&lt;p>shell命令展开作为四大步骤中最复杂的步骤，是我花时间精力最多的部分，其多样性和灵活性为shell脚本提供了强大的生命力。经过上述11步的操作，shell命令终于可以真正进入执行阶段了。&lt;/p>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/bash.html">https://www.gnu.org/software/bash/manual/bash.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/65599187">https://zhuanlan.zhihu.com/p/65599187&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Shell 骨干流程2——复合命令与控制流程</title><link>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B2%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B2%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#shell%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">shell复合命令——流程控制&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84">循环结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9D%A1%E4%BB%B6%E7%BB%93%E6%9E%84">条件结构&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E4%B8%8E%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7">条件运算符号与算术运算符号&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%BB%84%E5%91%BD%E4%BB%A4">组命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8D%8F%E5%90%8C%E8%BF%9B%E7%A8%8B">协同进程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#shell%E5%87%BD%E6%95%B0">shell函数&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">函数的定义&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8">函数的使用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#shell%E5%8F%82%E6%95%B0">shell参数&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0">位置参数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%89%B9%E6%AE%8A%E5%8F%82%E6%95%B0">特殊参数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="复合命令与控制流程---omit-in-toc---">复合命令与控制流程&lt;!-- omit in toc -->&lt;/h2>
&lt;p>复合命令是通过shell保留字和简单命令组合形成的组合命令，算是shell脚本语言的基本结构。&lt;strong>每一个复合命令结构都由每一个保留字或控制符开始，并以对应的保留字或控制符结束&lt;/strong>，这算是shell编程语言的一个特色，例如以&lt;code>if&lt;/code>开头，&lt;code>fi&lt;/code>结尾；&lt;code>case&lt;/code>开头，&lt;code>esac&lt;/code>结尾等等。对shell复合命令结构的输入、输出重定向将被应用到该结构的每一个简单命令中，除非其中有某个简单命令用显式的重定向覆盖该结构的重定向。写shell语言时，为了保证代码可读性，在复合命令结构之间通常用&lt;code>newline&lt;/code>来分割，而不是用&lt;code>;&lt;/code>来分割，虽然从语法上来讲，二者作用是一样的，但是过长的代码会给后续的维护造成困难。&lt;/p>
&lt;p>The Bourne Again SHell（bash）提供循环、条件、组命令、协同四种复合命令，并用相应的保留字指示bash是哪一种复合命令。bash的保留字如以下表格所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">if&lt;/td>
&lt;td style="text-align:center">then&lt;/td>
&lt;td style="text-align:center">elif&lt;/td>
&lt;td style="text-align:center">else&lt;/td>
&lt;td style="text-align:center">fi&lt;/td>
&lt;td style="text-align:center">time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">for&lt;/td>
&lt;td style="text-align:center">in&lt;/td>
&lt;td style="text-align:center">until&lt;/td>
&lt;td style="text-align:center">while&lt;/td>
&lt;td style="text-align:center">do&lt;/td>
&lt;td style="text-align:center">done&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">case&lt;/td>
&lt;td style="text-align:center">esac&lt;/td>
&lt;td style="text-align:center">coproc&lt;/td>
&lt;td style="text-align:center">select&lt;/td>
&lt;td style="text-align:center">function&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;/td>
&lt;td style="text-align:center">}&lt;/td>
&lt;td style="text-align:center">[[&lt;/td>
&lt;td style="text-align:center">]]&lt;/td>
&lt;td style="text-align:center">!&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>需要注意的是，在其他编程语言中，&lt;code>continue, break&lt;/code>算是关键字，而在shell中&lt;code>continue, break&lt;/code>是内置命令。&lt;/p>
&lt;p>我们将循环、条件、组命令、协同作为四种控制流程。此外，还有一种特殊的复合命令叫做&lt;strong>函数&lt;/strong>，基本上有点编程基础的人对此都不陌生，shell的函数定义、使用方式和其他编程语言大同小异。&lt;/p>
&lt;p>总体处理流程上，shell会先检查第一个标记，如果是可前置保留字(&lt;code>if, for, while, until, case, select, time, function, coproc, {, [[, !&lt;/code>)，则开启复合命令流程；如果是非可前置保留字(&lt;code>then, elif, fi, in, do, done, esac, }, ]]&lt;/code>)，且之前没有与之对应的可前置保留字，则报语法错误；如果不是保留字则当作简单命令，执行下一步骤。&lt;/p>
&lt;h2 id="shell复合命令流程控制">shell复合命令——流程控制&lt;/h2>
&lt;p>基本上所有的变成语言流程控制都包含顺序执行、条件执行、循环执行三种流程控制，shell语言也不例外。此外，shell还有分组命令、协同处理两种特殊的流程控制方法。&lt;/p>
&lt;h3 id="循环结构">循环结构&lt;/h3>
&lt;p>until循环: 循环执行一系列命令直至条件&lt;code>test-commands&lt;/code>为&lt;code>true&lt;/code>时停止。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 单行&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">until&lt;/span> test-commands&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> consequent-commands&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1">#多行&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">until&lt;/span> test-commands
&lt;span class="ln">5&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln">6&lt;/span> consequent-commands
&lt;span class="ln">7&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：输出 0 ~ 9 的数字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">until&lt;/span> &lt;span class="o">[&lt;/span> ! &lt;span class="nv">$a&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="nv">$a&lt;/span> + 1&lt;span class="sb">`&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>while循环：和until循环相反，循环执行一系列命令直至条件&lt;code>test-commands&lt;/code>为&lt;code>false&lt;/code>时停止。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 单行&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">while&lt;/span> test-commands&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> consequent-commands&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 多行&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">while&lt;/span> test-commands
&lt;span class="ln">5&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln">6&lt;/span> consequent-commands
&lt;span class="ln">7&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：输出 0 ~ 9 的数字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$a&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="c1"># 和until相比少了一个取反的&amp;#34;!&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="nv">$a&lt;/span> + 1&lt;span class="sb">`&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>for循环：有两种模式，一种是C风格的条件模式，条件需要用shell算数表达式表示，还有一种python风格的遍历模式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 单行C风格&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> expr1 &lt;span class="p">;&lt;/span> expr2 &lt;span class="p">;&lt;/span> expr3 &lt;span class="o">))&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> commands &lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 多行C风格&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> expr1 &lt;span class="p">;&lt;/span> expr2 &lt;span class="p">;&lt;/span> expr3 &lt;span class="o">))&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln"> 7&lt;/span> commands
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">done&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 单行 遍历风格&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="k">for&lt;/span> name in &lt;span class="o">[&lt;/span>words …&lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> commands&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># 多行 遍历风格&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">for&lt;/span> name in &lt;span class="o">[&lt;/span>words …&lt;span class="o">]&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln">16&lt;/span> commands
&lt;span class="ln">17&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>跳出循环：在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两内置命令来实现该功能：&lt;code>break&lt;/code>和&lt;code>continue&lt;/code>。&lt;code>break&lt;/code>命令允许跳出所有循环（终止执行后面的所有循环）。&lt;code>continue&lt;/code>命令与&lt;code>break&lt;/code>命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环，有时甚至是加速循环。&lt;/p>
&lt;h3 id="条件结构">条件结构&lt;/h3>
&lt;p>首先介绍两个各大语言常见的条件结构if和case。其中的分号都可以用&lt;code>newline&lt;/code>替换，反之亦然。&amp;quot;[]&amp;quot;中的内容表示不是一定需要。&lt;/p>
&lt;p>if条件结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> test-commands&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> consequent-commands&lt;span class="p">;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="k">elif&lt;/span> more-test-commands&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">4&lt;/span> more-consequents&lt;span class="p">;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="k">else&lt;/span> alternate-consequents&lt;span class="p">;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">20&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$b&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;a 等于 b&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$a&lt;/span> -gt &lt;span class="nv">$b&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;a 大于 b&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$a&lt;/span> -lt &lt;span class="nv">$b&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;a 小于 b&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;没有符合的条件&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>case条件结构：&lt;code>case ... esac&lt;/code>为多选择语句，与其他语言中的&lt;code>switch ... case&lt;/code>语句类似，是一种多分支选择结构，每个&lt;code>case&lt;/code>分支用&lt;strong>右圆括号&lt;/strong>开始，用&lt;strong>两个分号;;表示&lt;/strong> break，即执行结束，跳出整个&lt;code>case ... esac&lt;/code>语句，&lt;code>esac&lt;/code>（就是&lt;code>case&lt;/code>反过来）作为结束标记。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="nv">$var&lt;/span> in
&lt;span class="ln">2&lt;/span> pattern1 &lt;span class="p">|&lt;/span> pattern2&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> statements &lt;span class="p">;;&lt;/span>
&lt;span class="ln">4&lt;/span> pattern3 &lt;span class="p">|&lt;/span> pattern4&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span> statements &lt;span class="p">;;&lt;/span>
&lt;span class="ln">6&lt;/span> ...
&lt;span class="ln">7&lt;/span> *&lt;span class="o">)&lt;/span>
&lt;span class="ln">8&lt;/span> statements &lt;span class="p">;;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>case&lt;/code>工作方式如上所示，&lt;code>case&lt;/code>后面跟需要判断的变量&lt;code>$var&lt;/code>，再后面必须为单词&lt;code>in&lt;/code>。该复合语句根据模式匹配&lt;code>case&lt;/code>后面的&lt;code>$var&lt;/code>，模式类似于正则表达式，多个模式之间用“|”分割，最后必须以右括号结束。&lt;code>$var&lt;/code>可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。&lt;/p>
&lt;p>&lt;code>$var&lt;/code>将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后&lt;strong>不再继续其他模式&lt;/strong>。如果无一匹配模式，&lt;strong>使用星号&lt;code>*&lt;/code>捕获该值&lt;/strong>，再执行后面的命令。&lt;/p>
&lt;p>举一个简单的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;输入 1 到 6 之间的数字:&amp;#39;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你输入的数字为:&amp;#39;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nb">read&lt;/span> aNum
&lt;span class="ln"> 4&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="nv">$aNum&lt;/span> in
&lt;span class="ln"> 5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> 2&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你选择了 1或2&amp;#39;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="p">|&lt;/span> 4&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你选择了 3或4&amp;#39;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln"> 9&lt;/span> 5&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你选择了 5&amp;#39;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">11&lt;/span> 6&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你选择了 6&amp;#39;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">13&lt;/span> *&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;你没有输入 1 到 6 之间的数字&amp;#39;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，一些版本的shell还提供了&lt;code>select&lt;/code>结构，&lt;code>select in&lt;/code>结构用来增强交互性，它可以显示出带编号的菜单，用户输入不同的编号就可以选择不同的菜单，并执行不同的功能。但是个人觉得在实践中，这种结果使用较少，用起来也比较鸡肋，所以不做介绍了，有兴趣同读者可以自行搜索。&lt;/p>
&lt;h3 id="条件运算符号与算术运算符号">条件运算符号与算术运算符号&lt;/h3>
&lt;p>我们在之前的循环与条件结构中，都会遇到条件判断语句，例如在&lt;code>if&lt;/code>后面的内容、&lt;code>while, until&lt;/code>后面的内容以及&lt;code>for&lt;/code>在C风格下的&lt;code>((...))&lt;/code>表达式。条件结构会&lt;strong>根据判断语句的返回码&lt;/strong>决定执行哪些后续内容，有趣的是，由于在shell中，返回码&lt;code>0&lt;/code>表示进程正常执行完毕，其他返回码表示进程执行遇到错误。在shell中执行&lt;code>true&lt;/code>的返回码为0，执行&lt;code>false&lt;/code>的返回码为1；算数表达式计算结果不为0时，返回码为0，计算结果等于0时，返回码为1。还是要记住，条件结构看的是返回码，不是执行的输出。&lt;/p>
&lt;p>判断语句一般有三种，一是单中括号&lt;code>[]&lt;/code>，二是双中括号&lt;code>[[]]&lt;/code>，三是双小括号&lt;code>(())&lt;/code>。&lt;/p>
&lt;p>单中括号&lt;code>[ ]&lt;/code>是bash特有的&lt;strong>内置命令&lt;/strong>，等同于&lt;code>test&lt;/code>命令。关于test命令的具体用法，可参考《shell-test命令使用》。&lt;/p>
&lt;p>双中括号&lt;code>[[ ]]&lt;/code>是bash程序语言的&lt;strong>关键字&lt;/strong>，并不是一个命令，双中括号中的&lt;strong>表达式被看作一个单独的元素&lt;/strong>，计算此元素结果并返回一个退出状态码。由于&lt;code>[[ ]]&lt;/code>是关键字，因此，它们&lt;strong>和表达式之间都需要空格分割&lt;/strong>，&lt;code>[[ ]]&lt;/code>结构比&lt;code>[ ]&lt;/code>结构更加通用。在&lt;code>[[&lt;/code>和&lt;code>]]&lt;/code>之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。使用&lt;code>[[ ]]&lt;/code>条件判断结构，而不是&lt;code>[ ]&lt;/code>，能够防止脚本中的许多逻辑错误。比如，&lt;code>&amp;amp;&amp;amp;、||、&amp;lt;&lt;/code>和&lt;code>&amp;gt;&lt;/code>操作符能够正常存在于&lt;code>[[ ]]&lt;/code>条件判断结构中，但是如果出现在&lt;code>[ ]&lt;/code>结构中的话，会报错。比如可以直接使用&lt;code>if [[ $a != 1 &amp;amp;&amp;amp; $a != 2 ]]&lt;/code>, 如果不适用双括号, 则为&lt;code>if [ $a -ne 1] &amp;amp;&amp;amp; [ $a != 2 ]&lt;/code>或者&lt;code>if [ $a -ne 1 -a $a != 2 ]&lt;/code>。此外，&lt;code>[[ ]]&lt;/code>支持字符串的模式匹配，使用&lt;code>==, !=&lt;/code>操作符时甚至支持shell的模式匹配，此时会把&lt;strong>运算符右边的表达式作为一个匹配模式&lt;/strong>，而不仅仅是一个字符串，比如&lt;code>[[ hello == hell? ]]&lt;/code>，&lt;code>[[ hello == h* ]]&lt;/code>结果都为真。&lt;code>[[ ]]&lt;/code>中匹配字符串或通配符，不需要引号。&lt;/p>
&lt;blockquote>
&lt;p>关于双中括号&lt;code>[[ ]]&lt;/code>中的匹配，如果我们使用&lt;code>=~&lt;/code>操作符，支持字符串的shell模式匹配可升级为POSIX的正则匹配，提供更加丰富的匹配功能。&lt;/p>
&lt;/blockquote>
&lt;p>双小括号&lt;code>(( ))&lt;/code>是&lt;strong>整数扩展&lt;/strong>。这种扩展计算是&lt;strong>整数型的计算，不支持浮点型&lt;/strong>。&lt;code>(( ))&lt;/code>结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是&amp;quot;false&amp;quot;，而一个非零值的表达式所返回的退出状态码将为0，或者是&amp;quot;true&amp;quot;。单纯用&lt;code>(( ))&lt;/code> 也可重定义变量值，比如&lt;code>a=5; ((a++))&lt;/code>可将&lt;code>$a&lt;/code>重定义为6。注意由于&lt;code>(( ))&lt;/code>是C风格的，因此双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开，只要括号中的表达式符合C语言运算规则,比如可以直接使用&lt;code>for((i=0;i&amp;lt;5;i++))&lt;/code>。&lt;/p>
&lt;h3 id="组命令">组命令&lt;/h3>
&lt;p>shell提供了两种方式来将一组命令（无论是简单命令还是复合命令）做一个单元来执行，一是单个小括号&lt;code>( command list )&lt;/code>，二是单个大括号&lt;code>{ command list; }&lt;/code>。当组命令存在时，可以改变原有的执行流程，组内的命令看作一个小单元一起执行，就像在数学中使用括号改变运算优先级一样；同时，对组命令的重定向将会生效于组内每一条命令。&lt;/p>
&lt;p>举一个组命令改变原有的执行流程的例子，。示例：&lt;code>echo $a&lt;/code>被执行几次？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 先执行a=1;echo $a，再执行a=1 || echo $a，由于a=1成功执行，||右面的echo $a不会执行了&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 最后再执行最后一个echo $a；共输出两次&lt;/span>
&lt;span class="ln">3&lt;/span>$ &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="c1"># 先执行a=1;echo $a，后面a=1 || (echo $a ;echo $a)做为同优先级的组合命令执行，由于a=1成功执行&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># ||右面的(echo $a ;echo $a)组命令作为一个整体都不会执行，共输出一次&lt;/span>
&lt;span class="ln">8&lt;/span>$ &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么，使用单个小括号&lt;code>( command list )&lt;/code>和单个大括号&lt;code>{ command list; }&lt;/code>到底有什么区别呢？&lt;/p>
&lt;ol>
&lt;li>语法层面。&lt;code>()&lt;/code>是&lt;strong>shell的操作符&lt;/strong>，因此会被shell解释器自动分割，且不用在小括号左右加空格；而&lt;code>{}&lt;/code>是&lt;strong>shell的保留字&lt;/strong>，因此需要在左大括号后面添加空格（开头不需要，后面那个右大括号也不需要），同时&lt;code>{ }&lt;/code>最后一个命令要加&lt;strong>分号分割&lt;/strong>。&lt;/li>
&lt;li>执行层面。当shell执行&lt;code>( )&lt;/code>中的命令时将再创建一个新的子shell，然后这个子shell去执行圆括弧中的命令。&lt;code>( )&lt;/code>所有的改变只对子shell产生影响，而原shell不受任何干扰，比如在&lt;code>( )&lt;/code>内部定义、改变的变量，外面是不受影响的；&lt;code>{ }&lt;/code>是在当前shell中执行，不会衍生子shell，&lt;code>{ }&lt;/code>中操作都是对当前shell有影响的。&lt;/li>
&lt;/ol>
&lt;p>我们据下面这个例子来说明&lt;code>( )&lt;/code>与&lt;code>{ }&lt;/code>的区别。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># {} 内部定义变量。原进程可用&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="o">{&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$b&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 没有空格、分号的话会将{b=2}整体当作一个命令&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ &lt;span class="o">{&lt;/span>&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>2&lt;span class="o">}&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$b&lt;/span>
&lt;span class="ln"> 6&lt;/span>-bash: &lt;span class="o">{&lt;/span>&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>2&lt;span class="o">}&lt;/span>: &lt;span class="nb">command&lt;/span> not found
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 有分号无空格会报语法错误&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ &lt;span class="o">{&lt;/span>&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>2&lt;span class="p">;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$b&lt;/span>
&lt;span class="ln"> 9&lt;/span>-bash: syntax error near unexpected token &lt;span class="sb">`&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># ()中的命令会在子shell执行，不影响原本的shell&lt;/span>
&lt;span class="ln">11&lt;/span>$ &lt;span class="o">(&lt;/span>&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>2&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$b&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="协同进程">协同进程&lt;/h3>
&lt;p>自bash4.0开始，bash引入了一个保留字&lt;code>coproc&lt;/code>, 用来在后台创建一个&lt;strong>异步执行的子协作进程&lt;/strong>(co-process)。使用&lt;code>coproc&lt;/code>的效果就像在命令结尾加上&lt;code>&amp;amp;&lt;/code>符号一样，但是&lt;code>coproc&lt;/code>还会创建一个&lt;strong>双向管道&lt;/strong>，将协作进程的输入和输出通过管道与文件句柄相连，与原进程进行通信。如果我们希望原进程和子进程交互执行，可以考虑使用&lt;code>coproc&lt;/code>。其语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>coproc &lt;span class="o">[&lt;/span>NAME&lt;span class="o">]&lt;/span> &lt;span class="nb">command&lt;/span> &lt;span class="o">[&lt;/span>redirections&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 有没有觉得它跟bash中定义函数的语法 function NAME {cmds} 很类似？&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建的协作子进程被命名为给出的参数&lt;code>NAME&lt;/code>，如果没有给参数&lt;code>NAME&lt;/code>则默认为“COPROC”。但是只有当&lt;code>command&lt;/code>不是简单命令时，才可以给它命名，如果是简单命令，则一定不可以添加&lt;code>NAME&lt;/code>参数，否则&lt;code>NAME&lt;/code>会被当成简单命令的首单词。&lt;/p>
&lt;p>当&lt;code>coproc&lt;/code>命令执行时，shell在当前进程中创建一个名为&lt;code>NAME&lt;/code>的数组变量，命令的&lt;strong>标准输出&lt;/strong>同当前进程的文件描述符&lt;code>NAME[0]&lt;/code>相连，&lt;strong>标准输入&lt;/strong>同&lt;code>NAME[1]&lt;/code>相连（和标准输入输出的默认文件描述符相反）。协作进程的进程号保存在变量&lt;code>NAME_PID&lt;/code>中，我们可以在当前进程使用shell内建命令&lt;code>wait&lt;/code>等待协作进程的结束。&lt;/p>
&lt;p>&lt;code>coproc&lt;/code>的用法和GO语言中的协程有点类似，感觉在shell实际应用中并不太常见。大多数时候，有类似功效的&lt;code>expect&lt;/code>命令更受欢迎。&lt;/p>
&lt;h2 id="shell函数">shell函数&lt;/h2>
&lt;p>shell中函数是另一种复合命令的方式，shell中的函数定义和使用与其他变成语言中函数大同小异。然而，shell的函数设计有一个特点：&lt;strong>函数用起来尽量像个正常的命令&lt;/strong>。这个特点既有有点也有缺点，优点在于函数和命令使用的一致性，可以简化编程语法，二者互相替换会很方便；但是这也让我们无法直接分清哪些是命令哪些是函数，容易产生二义性。&lt;/p>
&lt;h3 id="函数的定义">函数的定义&lt;/h3>
&lt;p>shell函数的定义遵循以下两种方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 方法一&lt;/span>
&lt;span class="ln">2&lt;/span>fname &lt;span class="o">()&lt;/span> compound-command &lt;span class="o">[&lt;/span> redirections &lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 方法二&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">function&lt;/span> fname &lt;span class="o">[()]&lt;/span> compound-command &lt;span class="o">[&lt;/span> redirections &lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>function&lt;/code>是shell关于函数的&lt;strong>保留字&lt;/strong>，&lt;code>fname&lt;/code>是给出的&lt;strong>函数名称&lt;/strong>，后面跟的单小括号&lt;code>( )&lt;/code>也表明定义的是个函数，其中里面什么都不要添加。后面跟的是&lt;strong>函数体&lt;/strong>，注意函数体一定要是&lt;strong>复合命令&lt;/strong>。由于保留字&lt;code>function&lt;/code>和单小括号&lt;code>( )&lt;/code>都表明了是定义函数，因此二者至少有一个存在即可。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>funcName &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> command&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1"># 只存在单小括号( )&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">function&lt;/span> funcName &lt;span class="o">{&lt;/span> command&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1"># 只存在保留字function&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">function&lt;/span> funcName &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> command&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1"># 单小括号( )、保留字function同时存在&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后的&lt;code>[ redirections ]&lt;/code>表示整个函数的重定向。如果，我们想删除定义的函数，可以用&lt;code>unset -f&lt;/code>内置命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 删除名为funcName的函数&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">unset&lt;/span> -f funcName
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么使用&lt;code>function&lt;/code>保留字和不使用该保留字有什么区别呢？使用&lt;code>function&lt;/code>保留字后，后面的单词&lt;code>funcName&lt;/code>一定会被shell当成函数名，&lt;strong>即使使用已经存在的命令作为名称也可以&lt;/strong>，举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="k">function&lt;/span> ls &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> whoami&lt;span class="p">;&lt;/span> pwd&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">2&lt;/span>$ ls
&lt;span class="ln">3&lt;/span>lelouch &lt;span class="c1"># 这是我自己用户的名称&lt;/span>
&lt;span class="ln">4&lt;/span>/home/lelouch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，我作死把原来的&lt;code>ls&lt;/code>命令名称，定义成了一个新的函数，这个函数会执行&lt;code>whoami; pwd;&lt;/code>两个命令，所以执行结果并不是&lt;code>ls&lt;/code>原本的结果，而是显示当前用户和路径。如果我在作死一点，定义一个另一个函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 注意这里的ls已经不是过去显示文件的命令，而是之前定义的函数&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="k">function&lt;/span> &lt;span class="nb">pwd&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> whoami&lt;span class="p">;&lt;/span> ls&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我在函数体中，又添加了&lt;code>ls&lt;/code>，你猜猜现在执行&lt;code>pwd&lt;/code>结果会怎么样~~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">pwd&lt;/span>
&lt;span class="ln"> 2&lt;/span>lelouch
&lt;span class="ln"> 3&lt;/span>lelouch
&lt;span class="ln"> 4&lt;/span>lelouch
&lt;span class="ln"> 5&lt;/span>lelouch
&lt;span class="ln"> 6&lt;/span>lelouch
&lt;span class="ln"> 7&lt;/span>lelouch
&lt;span class="ln"> 8&lt;/span>lelouch
&lt;span class="ln"> 9&lt;/span>lelouch
&lt;span class="ln">10&lt;/span>lelouch
&lt;span class="ln">11&lt;/span>lelouch
&lt;span class="ln">12&lt;/span>lelouch
&lt;span class="ln">13&lt;/span>lelouch
&lt;span class="ln">14&lt;/span>lelouch
&lt;span class="ln">15&lt;/span>lelouch
&lt;span class="ln">16&lt;/span>lelouch
&lt;span class="ln">17&lt;/span>....
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果会无限地执行&lt;code>whoami&lt;/code>。因为&lt;code>pwd&lt;/code>函数会调用函数&lt;code>ls&lt;/code>（不是&lt;code>ls&lt;/code>命令），函数&lt;code>ls&lt;/code>又会调用函数&lt;code>pwd&lt;/code>，……，产生循环调用，命令体中的&lt;code>whoami&lt;/code>会被反复执行。这也说明了shell语言并不是一个很严谨的语言，很容易产生能让系统崩溃的错误。&lt;code>function&lt;/code>保留字就是能让后面的单词强制变成函数名，覆盖原来的含义。&lt;/p>
&lt;blockquote>
&lt;p>我们可以设置FUNCNEST环境变量来限制函数嵌套调用的次数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">FUNCNEST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">pwd&lt;/span>
&lt;span class="ln">3&lt;/span>lelouch
&lt;span class="ln">4&lt;/span>lelouch
&lt;span class="ln">5&lt;/span>lelouch
&lt;span class="ln">6&lt;/span>lelouch
&lt;span class="ln">7&lt;/span>-bash: pwd: maximum &lt;span class="k">function&lt;/span> nesting level exceeded &lt;span class="o">(&lt;/span>4&lt;span class="o">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="c1"># 让我们结束作死，释放ls,pwd两个函数&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="nv">$unset&lt;/span> -f &lt;span class="nb">pwd&lt;/span> ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当函数被嵌套到达4次后，shell会自动停止，防止出现循环调用。&lt;/p>
&lt;/blockquote>
&lt;p>如果不使用&lt;code>function&lt;/code>保留字，那么第一个单词就不能某个命令的名称，因为一个单词会被当成要执行的命令名，后面的内容会被当成命令的参数。&lt;code>( )&lt;/code>显然会因为不符合参数规范而报错。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> whoami&lt;span class="p">;&lt;/span> pwd&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">2&lt;/span>-bash: syntax error near unexpected token &lt;span class="sb">`&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于函数名称的规范，shell的要求很松，除了使用&lt;code>function&lt;/code>保留字造成的区别外，只要求是&lt;strong>不含有&lt;code>$&lt;/code>符号的单词(word)就可以（单词中默认不应含有元字符，但是非元字符的符号可以，比如func^@Name）&lt;/strong>。&lt;/p>
&lt;p>关于函数体，只要是复合命令都可以。shell在习惯上，会像C语言一样用&lt;strong>大括号&lt;/strong>包裹函数体，需要注意的是由于大括号&lt;code>{ }&lt;/code>是shell的保留字，所以左边的大括号后面必须要用空格或者&lt;code>newline&lt;/code>分割后面的命令，同时大括号内部的命令也要用分号、&lt;code>&amp;amp;&lt;/code>符号或&lt;code>newline&lt;/code>分割。本质上这些就是使用大括号的组命令的规范啊。&lt;/p>
&lt;p>如果在函数体中定义了局部变量，也是和其他函数一样，函数内定义的局部变量会覆盖外部定义的变量，举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ func1&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 2&lt;/span>&amp;gt;&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span>&amp;gt; &lt;span class="nb">local&lt;/span> &lt;span class="nv">var&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;func1 local&amp;#39;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&amp;gt; func2
&lt;span class="ln"> 5&lt;/span>&amp;gt;&lt;span class="o">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>$ func2&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 8&lt;/span>&amp;gt;&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;In func2, var = &lt;/span>&lt;span class="nv">$var&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&amp;gt;&lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>$ &lt;span class="nv">var&lt;/span>&lt;span class="o">=&lt;/span>global
&lt;span class="ln">12&lt;/span>$ func1
&lt;span class="ln">13&lt;/span>In func2, &lt;span class="nv">var&lt;/span> &lt;span class="o">=&lt;/span> func1 &lt;span class="nb">local&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数的使用">函数的使用&lt;/h3>
&lt;p>shell函数的使用和命令、脚本的使用没有区别，都是&lt;code>命令/函数/脚本名称 参数1 参数2 ...&lt;/code>的形式。之前说过这也是shell语言的特色。&lt;/p>
&lt;p>由于shell也是解释型语言，当函数执行时，会根据控制流程依次一步步执行，如果遇到错误就自动终止执行。&lt;/p>
&lt;p>函数执行完成后的返回值，当函数定义时，如果未检查到语法错误，则定义语句返回状态0。当函数执行时，和其他编程语言一样，shell也用&lt;code>return&lt;/code>来返回状态值。只不过shell的&lt;code>return&lt;/code>后面只能跟一个数字，而非其他东西。如果&lt;code>return&lt;/code>后面什么都没加或者函数体中没有&lt;code>return&lt;/code>，则返回函数体最后执行的简单命令的返回值。&lt;/p>
&lt;p>我们可以使用&lt;code>declare -f&lt;/code>查看当前环境所有的函数名称和定义，&lt;code>declare -F&lt;/code>仅查看当前环境所有的函数名称。此外，shell的函数也支持递归，但是递归的层数也受到FUNCNEST环境变量的限制。&lt;/p>
&lt;p>说到这里，很多读者会发现，我们没有提到函数&lt;strong>最关键的功能——传参执行&lt;/strong>，即根据传入的参数变量执行函数。在Shell中，调用函数时确实可以向其传递参数。但是，传参的方式是shell语言特有的。在函数体内部，传入的参数通过位置参数&lt;code>$n&lt;/code>的形式来代表，例如，&lt;code>$1&lt;/code>表示第一个参数，&lt;code>$2&lt;/code>表示第二个参数...&lt;/p>
&lt;p>下一节，我们将具体说说shell中的参数传递。&lt;/p>
&lt;h2 id="shell参数">shell参数&lt;/h2>
&lt;p>参数是一种存储值的实体，可以是名称、数字或是特殊字符。参数中用&lt;strong>名称&lt;/strong>存储值的叫&lt;strong>变量&lt;/strong>。变量由一个值和0-N个属性。变量值由赋值语句指定；属性由&lt;code>declare&lt;/code>命令指定。赋值语句格式如下，如果要删除变量则用&lt;code>unset&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 给名为name的变量赋值为value&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nv">name&lt;/span>&lt;span class="o">=[&lt;/span>value&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 删除变量&lt;/span>
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">unset&lt;/span> name
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于shell把空字符串也认为是合理的变量值，因此value值可以不用给出即&lt;code>name=&lt;/code>，此时shell给name空字符串作为默认值。&lt;/p>
&lt;h3 id="位置参数">位置参数&lt;/h3>
&lt;p>位置参数是由&lt;code>$&lt;/code>和数字组成的参数。当一条命令、脚本或函数执行时，后面可以跟多个参数，我们使用位置参数变量来表示这些参数。也就是说在shell中&lt;strong>位置参数承担这向函数、脚本传参的使用&lt;/strong>。&lt;/p>
&lt;p>其中，&lt;code>$0&lt;/code>代表命令、脚本本身，注意不是函数名称，&lt;code>$1&lt;/code>代表第1个参数，&lt;code>$2&lt;/code>代表第2个参数，依次类推。当参数个数超过10个时，就必须要用&lt;strong>大括号&lt;/strong>把这个数字括起来，例如，&lt;code>${10}&lt;/code>代表第 10 个参数，&lt;code>${100}&lt;/code>则代表第100个参数。&lt;/p>
&lt;p>举个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ funWithParam&lt;span class="o">(){&lt;/span>
&lt;span class="ln">2&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;命令/脚本的名称是：&lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第一个参数为 &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第二个参数为 &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十个参数为 &lt;/span>&lt;span class="nv">$10&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&amp;gt; &lt;span class="c1"># $10 不能获取第十个参数，获取第十个参数需要${10}。当n&amp;gt;=10时，需要使用${n}来获取参数。&lt;/span>
&lt;span class="ln">7&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十个参数为 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">10&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span>&amp;gt; &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十一个参数为 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">11&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">9&lt;/span>&amp;gt; &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ funWithParam &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">73&lt;/span>
&lt;span class="ln">2&lt;/span>函数/命令的名称是：-bash !
&lt;span class="ln">3&lt;/span>第一个参数为 &lt;span class="m">1&lt;/span> !
&lt;span class="ln">4&lt;/span>第二个参数为 &lt;span class="m">2&lt;/span> !
&lt;span class="ln">5&lt;/span>第十个参数为 &lt;span class="m">10&lt;/span> !
&lt;span class="ln">6&lt;/span>第十个参数为 &lt;span class="m">34&lt;/span> !
&lt;span class="ln">7&lt;/span>第十一个参数为 &lt;span class="m">73&lt;/span> !
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="特殊参数">特殊参数&lt;/h3>
&lt;p>除了位置参数，shell为了方便编程，还提供一些特殊参数，如下表所示。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">参数处理&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">$#&lt;/td>
&lt;td style="text-align:center">传递到脚本或函数的参数个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$*&lt;/td>
&lt;td style="text-align:center">以一个单字符串显示所有向脚本传递的参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$$&lt;/td>
&lt;td style="text-align:center">脚本运行的当前进程ID号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$!&lt;/td>
&lt;td style="text-align:center">后台运行的最后一个进程的ID号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$@&lt;/td>
&lt;td style="text-align:center">与$*相同，但是使用时加引号，并在引号中返回每个参数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$-&lt;/td>
&lt;td style="text-align:center">显示Shell使用的当前选项，与set命令功能相同。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$?&lt;/td>
&lt;td style="text-align:center">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>需要指出，我们&lt;strong>不能给这些特殊参数进行赋值操作&lt;/strong>。关于&lt;code>$*,S#&lt;/code>二者的区别。当&lt;code>$*&lt;/code>和&lt;code>$@&lt;/code>不被双引号&lt;code>&amp;quot; &amp;quot;&lt;/code>包围时，它们之间没有任何区别，都是将接收到的每个参数看做一份数据，彼此之间以空格来分隔。但是当它们被双引号&lt;code>&amp;quot; &amp;quot;&lt;/code>包含时，就会有区别了：&lt;/p>
&lt;ul>
&lt;li>&amp;quot;$*&amp;quot;会将所有的参数从整体上看做一份数据，而不是把每个参数都看做一份数据。&lt;/li>
&lt;li>&amp;quot;$@&amp;quot;仍然将每个参数都看作一份数据，彼此之间是独立的。&lt;/li>
&lt;/ul>
&lt;p>比如传递了5个参数，那么对于&lt;code>$*&lt;/code>来说，这5个参数会合并到一起形成一份数据，它们之间是无法分割的；而对于&lt;code>$@&lt;/code>来说，这5个参数是相互独立的，它们是5份数据。如果使用&lt;code>echo&lt;/code>直接输出&lt;code>$*&lt;/code>和&lt;code>$@&lt;/code>做对比，是看不出区别的；但如果使用&lt;code>for&lt;/code>循环来逐个输出数据，立即就能看出区别来。&lt;/p>
&lt;p>我们将上一个例子增加一些功能如下，为了方便，我们新建一个&lt;code>test.sh&lt;/code>文件存放函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>funWithParam&lt;span class="o">(){&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;命令的名称是：&lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第一个参数为 &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第二个参数为 &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十个参数为 &lt;/span>&lt;span class="nv">$10&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1"># $10 不能获取第十个参数，获取第十个参数需要${10}。当n&amp;gt;=10时，需要使用${n}来获取参数。&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十个参数为 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">10&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第十一个参数为 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">11&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;参数总数有 &lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2"> 个!&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;作为一个字符串输出所有参数 &lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;$*与S@的区别：&amp;#39;&lt;/span> &lt;span class="c1"># 这里是单引号防止参数展开&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;使用for循环输出$* !&amp;#39;&lt;/span> &lt;span class="c1"># 这里是单引号防止参数展开&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">for&lt;/span> var in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;使用for循环输出$@ !&amp;#39;&lt;/span> &lt;span class="c1"># 这里是单引号防止参数展开&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">for&lt;/span> var in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;脚本运行的当前进程ID号 &lt;/span>&lt;span class="nv">$$&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;显示Shell使用的当前选项 &lt;/span>&lt;span class="nv">$-&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;上一个命令的结束状态 &lt;/span>&lt;span class="nv">$?&lt;/span>&lt;span class="s2"> !&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>funWithParam &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">73&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ bash test.sh
&lt;span class="ln"> 2&lt;/span>命令的名称是：test.sh !
&lt;span class="ln"> 3&lt;/span>第一个参数为 &lt;span class="m">1&lt;/span> !
&lt;span class="ln"> 4&lt;/span>第二个参数为 &lt;span class="m">2&lt;/span> !
&lt;span class="ln"> 5&lt;/span>第十个参数为 &lt;span class="m">10&lt;/span> !
&lt;span class="ln"> 6&lt;/span>第十个参数为 &lt;span class="m">34&lt;/span> !
&lt;span class="ln"> 7&lt;/span>第十一个参数为 &lt;span class="m">73&lt;/span> !
&lt;span class="ln"> 8&lt;/span>参数总数有 &lt;span class="m">11&lt;/span> 个!
&lt;span class="ln"> 9&lt;/span>作为一个字符串输出所有参数 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">73&lt;/span> !
&lt;span class="ln">10&lt;/span>&lt;span class="nv">$*&lt;/span>与S@的区别：
&lt;span class="ln">11&lt;/span>使用for循环输出&lt;span class="nv">$*&lt;/span> !
&lt;span class="ln">12&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">73&lt;/span>
&lt;span class="ln">13&lt;/span>使用for循环输出&lt;span class="nv">$@&lt;/span> !
&lt;span class="ln">14&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="m">3&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="m">5&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="m">6&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="m">7&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="m">8&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="m">9&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="m">34&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="m">73&lt;/span>
&lt;span class="ln">25&lt;/span>脚本运行的当前进程ID号 &lt;span class="m">30483&lt;/span> !
&lt;span class="ln">26&lt;/span>显示Shell使用的当前选项 hB !
&lt;span class="ln">27&lt;/span>上一个命令的结束状态 &lt;span class="m">0&lt;/span> !
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/bash.html">https://www.gnu.org/software/bash/manual/bash.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/linux/linux-shell-process-control.html">https://www.runoob.com/linux/linux-shell-process-control.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/w3cnote/linux-shell-brackets-features.html">https://www.runoob.com/w3cnote/linux-shell-brackets-features.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://c.biancheng.net/view/807.html">http://c.biancheng.net/view/807.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Shell 骨干流程1——形成初步命令</title><link>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B1%E5%BD%A2%E6%88%90%E5%88%9D%E6%AD%A5%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B1%E5%BD%A2%E6%88%90%E5%88%9D%E6%AD%A5%E5%91%BD%E4%BB%A4/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E5%85%83%E5%AD%97%E7%AC%A6%E5%88%86%E5%89%B2%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E4%B8%BA%E6%A0%87%E8%AE%B0">元字符分割输入内容为标记&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%BC%95%E5%8F%B7%E5%A4%84%E7%90%86">引号处理&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%BD%AC%E4%B9%89%E7%AC%A6">转义符&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#ansi-c%E5%BC%95%E7%94%A8">ANSI-C引用&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%8D%95%E5%BC%95%E5%8F%B7">单引号&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%8C%E5%BC%95%E5%8F%B7">双引号&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#shell%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90">shell命令解析&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E7%AE%A1%E9%81%93">管道&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E5%88%97%E8%A1%A8">命令列表&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4">复合命令&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%88%AB%E5%90%8Dalias%E5%B1%95%E5%BC%80">别名(alias)展开&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>总体流程图镇楼：&lt;/p>
&lt;p>&lt;img src="../images/shell%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.drawio.svg" alt="shell执行流程">&lt;/p>
&lt;h2 id="shell-骨干流程1形成初步命令---omit-in-toc---">Shell 骨干流程1——形成初步命令&lt;!-- omit in toc -->&lt;/h2>
&lt;p>我们将第1-4步分为第一大步，其主要作用是&lt;strong>形成初步命令&lt;/strong>。在流程图中为橙色部分，其主要处理流程为&lt;strong>元字符分割为标记、shell命令解析、shell命令解析、别名展开&lt;/strong>。元字符将命令分割为标记，做为后续处理的准备工作。引号处理分为单引号、双引号和反斜杠的处理。shell命令解析这步比较复杂，涉及保留字，命令组合方式，条件，循环等内容，我们放到单独的文章里讨论。最后别名展开算是正式处理命令的第一步。&lt;/p>
&lt;h2 id="元字符分割输入内容为标记">元字符分割输入内容为标记&lt;/h2>
&lt;p>首先，对于元字符有哪些这个问题，我在查询资料时，发现资料的说法并不统一。于是，我查看了Bash的源码，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#define shell_meta_chars &amp;#34;()&amp;lt;&amp;gt;;&amp;amp;|&amp;#34;
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">#define shell_break_chars &amp;#34;()&amp;lt;&amp;gt;;&amp;amp;| \t\n&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按照这个定义元字符应该是&lt;code>()&amp;lt;&amp;gt;;&amp;amp;|&lt;/code>这几个，但是bash源码中又在下一行定义了“shell_break_chars”，添加了&lt;code>space( ), tab(\t), newline(\n)&lt;/code>这三个元素。在源码实操分割的语法分析器（y.tab.c文件）中，使用的是“shell_break_chars”，因此第1步应该是通过&amp;quot;()&amp;lt;&amp;gt;;&amp;amp;| \t\n&amp;quot;这几个元素来分割读取的内容。需要特别指出：引号包裹的部分会作为一个整体来处理，在1-4步中不需要额外处理，后面会有内容展开的步骤。分割完成后的标记分为单词word或操作符operator两种类型。&lt;/p>
&lt;p>单词word，就是按照字面意思的一串字符，一般的单词之间是没有blank（包含空格&lt;code>space&lt;/code>和制表符&lt;code>tab&lt;/code>）和其他元字符的，但是在如果存在引号，则可以有blank和元字符，且引号中内容作为一个单词来处理。单词word还包括等号，数字，算术表达式。操作符operator则包含了控制字符和重定位符，操作符至少由一个元字符组成。我在&lt;a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents">Bash Reference Manual&lt;/a>第二节看到有关操作符的内容，总觉得实际上应用的操作符比书中第二节列出的内容要多，于是我要翻了翻源码，找到了bash中操作符的内容，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/* other tokens that can be returned by read_token() */&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="n">STRING_INT_ALIST&lt;/span> &lt;span class="n">other_token_alist&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="cm">/* Multiple-character tokens with special values */&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;--&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TIMEIGN&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;-p&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TIMEOPT&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;amp;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AND_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;||&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">OR_OR&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;gt;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREATER_GREATER&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;lt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LESS_LESS&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LESS_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;gt;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREATER_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;;;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEMI_SEMI&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEMI_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;;;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEMI_SEMI_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;lt;-&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LESS_LESS_MINUS&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LESS_LESS_LESS&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;amp;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AND_GREATER&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;amp;&amp;gt;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AND_GREATER_GREATER&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LESS_GREATER&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;gt;|&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREATER_BAR&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;|&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BAR_AND&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;EOF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yacc_EOF&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="cm">/* Tokens whose value is the character itself */&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;&amp;gt;&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;lt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;&amp;lt;&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;-&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;{&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;{&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;}&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;;&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;(&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;|&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;|&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;&amp;amp;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;&amp;amp;&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;newline&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>果然，比&lt;a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents">Bash Reference Manual&lt;/a>所述内容多了不少，还是实际代码中最全啊。从操作符的“other_token_alist”列表可以看出，元字符组成的操作符会在此列表中查找，将符合列表内容的多个元字符组成符号会被当成一个操作符。例如，&lt;code>ll $(type -path cc) ~/.*$(($$%1000)) &amp;gt;&amp;gt; /tmp/test.txt 2&amp;gt;&amp;amp;1&lt;/code>会被分割为：&lt;code>ll, $, (, type, -path, cc, ), ~/.*, $, (, (, $$%1000, ), ), &amp;gt;&amp;gt;, /tmp/test.txt, 2, &amp;gt;&amp;amp;, 1&lt;/code>。单词和操作符都被认为是一个独立单元，称为&lt;strong>标记（token）&lt;/strong>。每一个标记都会被单独的处理。&lt;/p>
&lt;h2 id="引号处理">引号处理&lt;/h2>
&lt;p>shell的引号处理作用是&lt;strong>去除特殊字符或单词的特殊作用&lt;/strong>。比如，在shell中，'&amp;amp;'通常会被用来表示后台处理命令或在重定向时表示后面的数字为打开的文件描述符，为了能直接按字面意思显示'&amp;amp;'符号，需要我们使用“引用”的方式。shell中存在三种引用机制：转义符（\），单引号(')和双引号（&amp;quot;）。还有一种特殊的引用，注释（#），这个大多数人应该都了解，就不特别说明了。&lt;/p>
&lt;h3 id="转义符">转义符&lt;/h3>
&lt;p>转义符，我们通常用反斜杠''表示，它的作用是将&lt;strong>紧跟后面的一个字符&lt;/strong>保留原来的字面的意思。在shell中，元字符和通配符通常代表特殊的含义，如果我们想让这些字符按照普通字符显示显示出来，就需要用到转义符了。比如，我们想在shell中输出$' &amp;quot; * ? \ ~ ` ! # $ &amp;amp; |$，这类特殊字符，直接用&lt;code>echo&lt;/code>或&lt;code>printf&lt;/code>输出肯定是不行的，必须加上转义符号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="se">\&amp;#39;&lt;/span> &lt;span class="se">\&amp;#34;&lt;/span> &lt;span class="se">\*&lt;/span> &lt;span class="se">\?&lt;/span> &lt;span class="se">\\&lt;/span> &lt;span class="se">\~&lt;/span> &lt;span class="se">\`&lt;/span> &lt;span class="se">\!&lt;/span> &lt;span class="se">\#&lt;/span> &lt;span class="se">\$&lt;/span> &lt;span class="se">\&amp;amp;&lt;/span> &lt;span class="se">\|&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="s1">&amp;#39; &amp;#34; * ? \ ~ ` ! # $ &amp;amp; |
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s1">$ printf \&amp;#39;&lt;/span>&lt;span class="se">\&amp;#34;\*\?\\\~\`\!\#\$\&amp;amp;\|&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;*?\~`!#$&amp;amp;|
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s1"># 如果想让printf也空一格输出，需要在每个字符后面加上空格的转义，即\+SPACE
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="s1">$ printf \&amp;#39;&lt;/span>&lt;span class="se">\ \&amp;#34;\ \*\ \?\ \\\ \~\ \`\ \!\ \#\ \$\ \&amp;amp;\ \|&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="s2">&amp;#34; * ? \ ~ ` ! # &lt;/span>$&lt;span class="s2"> &amp;amp; |
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，转义符不仅仅对特殊字符有效，对一般的字符也是一样的作用，只不过一般字符的字面意思就是字符本身，所以转义符加了和没加一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="se">\a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z&lt;/span>
&lt;span class="ln">2&lt;/span>abcdefghijklmnopqrstuvwxyz
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="se">\1\2\3\4\5\6\7\8\9\0&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="m">1234567890&lt;/span>
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="se">\,\;\[\]\{\}\-\@\%&lt;/span>
&lt;span class="ln">6&lt;/span>,&lt;span class="p">;&lt;/span>&lt;span class="o">[]{}&lt;/span>-@%
&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽说，转义符会保留字符原来的字面的意思，但是在键盘上有个按键不同，就是&lt;code>newline&lt;/code>字符（即键盘上的回车/换行）。shell会将转义符&lt;code>\+newline&lt;/code>的组合忽略，这种机制方便了我们在输入时进行换行，而在执行时仍旧是一行，多用于很长的命令，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ find /etc -exec grep&lt;span class="se">\
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="se">&lt;/span>&amp;gt;&lt;span class="s1">&amp;#39;[0-9][0-9]*[.][0-9][0-9] \
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s1">&amp;gt; *[.][0-9][0-9]*[0-9][0-9]*&amp;#39;&lt;/span> &lt;span class="o">{}&lt;/span> &lt;span class="se">\;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于&lt;code>find&lt;/code>命令很长且可以明显的分割为多个部分，因此，我们使用转义符&lt;code>\+newline&lt;/code>让输入的时候命令更易读，实际执行起来，等同于&lt;code>find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9] *[.][0-9][0-9]*[0-9][0-9]*' {} \;&lt;/code>&lt;/p>
&lt;h4 id="ansi-c引用">ANSI-C引用&lt;/h4>
&lt;p>转移符还有另一种用法，源自于C语言的字符串输出格式，叫做ANSI-C引用。对于有C语言经验的人来说，这种用法很容易理解。在这种用法下，转义符“\”和后面的一些字母组合起来会有特殊的含义。比如“\n”会被替换成换行，“\t”会被替换成&lt;code>tab&lt;/code>，“\b”会被替换成退格（删除前一个字符）等等。如果想输出“\n，\t”这些字符，要先将转义符转义，再将字母转义，即写成“\\n,\\t”的形式。&lt;/p>
&lt;p>在ANSI-C模式下，转义符特殊使用方法如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">字符&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">\a&lt;/td>
&lt;td style="text-align:center">响铃。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\b&lt;/td>
&lt;td style="text-align:center">退格。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\e、\E&lt;/td>
&lt;td style="text-align:center">看作一个转义字符（这不符合 ANSI C 的标准）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\f&lt;/td>
&lt;td style="text-align:center">换页。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\n&lt;/td>
&lt;td style="text-align:center">新一行。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\r&lt;/td>
&lt;td style="text-align:center">回车。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\t&lt;/td>
&lt;td style="text-align:center">水平制表符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\v&lt;/td>
&lt;td style="text-align:center">垂直制表符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\\&lt;/td>
&lt;td style="text-align:center">反斜线。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">'&lt;/td>
&lt;td style="text-align:center">单引号。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;quot;&lt;/td>
&lt;td style="text-align:center">双引号。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">问号。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\nnn&lt;/td>
&lt;td style="text-align:center">值是八进制 nnn 的八比特字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\xHH&lt;/td>
&lt;td style="text-align:center">值是十六进制 HH 的八比特字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\uHHHH&lt;/td>
&lt;td style="text-align:center">值是十六进制 HHHH 的 Unicode（ISO/IEC 10646）字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\UHHHHHHHH&lt;/td>
&lt;td style="text-align:center">值是十六进制的 HHHHHHHH 的 Unicode（ISO/IEC 10646）字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\cx&lt;/td>
&lt;td style="text-align:center">表示 control-x 字符。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>shell中常见的有三个命令会使用ANSI-C模式。&lt;/p>
&lt;ol>
&lt;li>&lt;code>echo -e 字符串&lt;/code>；&lt;/li>
&lt;li>&lt;code>printf FORMAT [ARGUMENT]&lt;/code>，注意只有用单/双引号引起来的FORMAT，才会使用ANSI-C模式；&lt;/li>
&lt;li>&lt;code>$'字符串'&lt;/code>，注意这里$后面一定是单引号。&lt;/li>
&lt;/ol>
&lt;p>举例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">echo&lt;/span> -e &lt;span class="s1">&amp;#39;a\tb\n&amp;#39;&lt;/span> &lt;span class="c1"># echo命令默认有一个换行，因此会多一个空行&lt;/span>
&lt;span class="ln"> 2&lt;/span>a b
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>$ &lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;%s\t%s\n&amp;#39;&lt;/span> a b &lt;span class="c1"># 必须用引号&lt;/span>
&lt;span class="ln"> 5&lt;/span>a b
&lt;span class="ln"> 6&lt;/span>$ &lt;span class="nb">printf&lt;/span> %s&lt;span class="se">\t&lt;/span>%s&lt;span class="se">\n&lt;/span> a b &lt;span class="c1"># 没有引号不行，下面由于没有换行，所以输出内容和$符号挤到了一行。&lt;/span>
&lt;span class="ln"> 7&lt;/span>atbn$ &lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;a%sb\n&amp;#39;&lt;/span> &lt;span class="se">\n&lt;/span> &lt;span class="c1"># 在参数[ARGUMENT]里面不行，必须在[FORMAT]里面。&lt;/span>
&lt;span class="ln"> 8&lt;/span>anb
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">$&amp;#39;a\tb&amp;#39;&lt;/span>
&lt;span class="ln">10&lt;/span>a b
&lt;span class="ln">11&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">$&amp;#34;a\tb\n&amp;#34;&lt;/span> &lt;span class="c1"># 双引号不行&lt;/span>
&lt;span class="ln">12&lt;/span>a&lt;span class="se">\t&lt;/span>b&lt;span class="se">\n&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="单引号">单引号&lt;/h3>
&lt;p>我们可以使用单引号引用字符串，单引号内的&lt;strong>任何字符&lt;/strong>都会保持其字面意思。单引号不能出现在单引号引用中，即使前面加了反斜线也不行。注：&lt;code>$'字符串'&lt;/code>属于命令扩展，并非单纯的单引号引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;a\tb\n&amp;#39;&lt;/span>
&lt;span class="ln">2&lt;/span>a&lt;span class="se">\t&lt;/span>b&lt;span class="se">\n&lt;/span>
&lt;span class="ln">3&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;\\\\ $ ! * ? &amp;#34;&amp;#39;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="se">\\\\&lt;/span> $ ! * ? &lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s2">&lt;/span>$&lt;span class="s2"> echo &amp;#39;\&amp;#39; &amp;#39; # 不能出现单引号
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="s2">&amp;gt; &amp;#39;
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="s2">\
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="双引号">双引号&lt;/h3>
&lt;p>我们可以使用双引号引用字符串，在双引号（' &amp;quot; '）内的大多数字符保留字符的字面含义，但'$'，'`'，'\'，以及在启用历史记录扩展后，'!'这四个除外。在双引号中可以使用单引号，也可以在转义符后面加双引号或其他特殊字符表示其字面意思（\&amp;quot;,\\,\$,\`,\!）。由于双引号可以将变量、子shell命令、历史记录扩展以及其他特殊字符带入其中，因此双引号比单引号使用起来更加灵活。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">VAR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;a variable&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This is &lt;/span>&lt;span class="nv">$VAR&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="c1"># 变量扩展&lt;/span>
&lt;span class="ln">3&lt;/span>This is a variable
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;list path `pwd`&amp;#34;&lt;/span> &lt;span class="c1"># 子命令扩展&lt;/span>
&lt;span class="ln">5&lt;/span>list path /home/lelouch
&lt;span class="ln">6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39; \&amp;#34; \` \$ \\&amp;#34;&lt;/span> &lt;span class="c1">#特殊字符使用，单引号不用转义&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="s1">&amp;#39; &amp;#34; ` $ \
&lt;/span>&lt;span class="ln">8&lt;/span>&lt;span class="s1">$ echo &amp;#34;!$&amp;#34; # 输出上一个执行的命令内容
&lt;/span>&lt;span class="ln">9&lt;/span>&lt;span class="s1">echo &amp;#34;&amp;#34;&amp;#39;&lt;/span> &lt;span class="se">\&amp;#34;&lt;/span> &lt;span class="se">\`&lt;/span> &lt;span class="se">\$&lt;/span> &lt;span class="se">\\&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shell命令解析">shell命令解析&lt;/h2>
&lt;p>shell中最常见的是简单命令，我们直接在shell中输入的一般是简单命令，有shell单步执行，返回结果，如&lt;code>ls、echo &amp;quot;hello world&amp;quot;、cat /etc/hosts&lt;/code>。简单命令是组成shell的基石，其他更复杂的命令也是由简单命令组成。&lt;/p>
&lt;blockquote>
&lt;p>简单命令是由一系列有blanks分割的一组单词(word)，并以某个shell操作符(operator)结束，首个单词通常表示需要执行的命令名称/别名，后面的单词都是该命令/别名的参数。&lt;/p>
&lt;ul>
&lt;li>blank：包含空格&lt;code>space&lt;/code>和制表符&lt;code>tab&lt;/code>&lt;/li>
&lt;li>control operator, 控制符：包含&lt;code>newline, '||', '&amp;amp;&amp;amp;', '&amp;amp;', ';', ';;', ';&amp;amp;', ';;&amp;amp;', '|', '|&amp;amp;', '(', ')'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>简单命令组成复杂命令的方式一般有&lt;strong>管道、命令列表、复合命令&lt;/strong>等。&lt;/p>
&lt;h3 id="管道">管道&lt;/h3>
&lt;p>管道（Pipeline）操作符为“|”，是一系列将&lt;strong>标准输入输出链接起来&lt;/strong>的进程，其中每一个进程的输出被直接作为下一个进程的输入。管道中的组成元素也被称作过滤程序。这个概念是由道格拉斯·麦克罗伊为Unix 命令行发明的，因与物理上的管道相似而得名。&lt;/p>
&lt;p>这是来自Wikipedia的定义。定义中指出，默认情况下，管道只会将上一个程序的标准输出(stdout)，传递给下一个命令，作为标准的输入(stdin)，对标准错误(stderr)信息没有直接处理能力。最后的命令将会把标准输出和标准错误都输出到屏幕上。画个简图来描述他们的关系：&lt;/p>
&lt;p>&lt;img src="../images/%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4%E7%A4%BA%E6%84%8F%E5%9B%BE.drawio.svg" alt="管道命令示意图">&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>管道命令只处理前一个命令正确输出，不处理错误输出。&lt;/li>
&lt;li>管道命令右边命令，必须能够接收标准输入流命令才行。&lt;/li>
&lt;li>管道触发两个子进程分别执行&amp;quot;|&amp;quot;两边的程序；而重定向是在一个进程内执行。&lt;/li>
&lt;li>如果使用&lt;code>|&amp;amp;&lt;/code>，则表示命令1的标准错误和标准输出都作为命令2的标准输入，这是&lt;code>2&amp;gt;&amp;amp;1 |&lt;/code>的简写。&lt;/li>
&lt;/ol>
&lt;p>总结来说，管道是将命令串成一串，依次执行力，上一个命令的输出作为下一个命令的输入，更多关于管道的内容可以查看《linux-管道pipe与xargs》。&lt;/p>
&lt;h3 id="命令列表">命令列表&lt;/h3>
&lt;p>命令列表是由简单命令和&lt;code>||,&amp;amp;&amp;amp;,&amp;amp;,;&lt;/code>四种符号组成的命令，简单命令之间通过上述四种符号进行分割。有时候，在直接写shell脚本时，也可以用&lt;code>newline&lt;/code>代替&lt;code>;&lt;/code>从而让内容更加工整。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;amp;&amp;amp;&lt;/strong> 用法&lt;code>command 1 &amp;amp;&amp;amp; command 2&lt;/code>，表示当&lt;code>command 1&lt;/code>执行成功后，再执行&lt;code>command 2&lt;/code>，如果不成功，则不执行&lt;code>command 2&lt;/code>。&lt;/li>
&lt;li>&lt;strong>||&lt;/strong> 用法&lt;code>command 1 || command 2&lt;/code>，表示若&lt;code>command 1&lt;/code>执行失败，则执行&lt;code>command 2&lt;/code>，如果执行成功，则不执行&lt;code>command 2&lt;/code>。&lt;/li>
&lt;li>&lt;strong>;&lt;/strong> 表示一条命令输入结束，命令按顺序执行。&lt;/li>
&lt;li>&lt;strong>＆&lt;/strong> 表示后台执行&amp;amp;之前的命令，此时如果有多个命令，后台执行的命令和其他命令是异步的。&lt;/li>
&lt;/ul>
&lt;p>从运算优先级来看，&lt;code>&amp;amp;&amp;amp;,||&lt;/code>处于同一优先级，&lt;code>&amp;amp;,;&lt;/code>处于次一优先级。命令列表的使用例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /tmp&lt;span class="p">;&lt;/span> pwd&lt;span class="p">;&lt;/span> &lt;span class="nb">cd&lt;/span> /dev/ &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">pwd&lt;/span>
&lt;span class="ln"> 2&lt;/span>/tmp
&lt;span class="ln"> 3&lt;/span>/dev
&lt;span class="ln"> 4&lt;/span>$ &lt;span class="nb">cd&lt;/span> /root &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># 无法cd到/root目录，因此&amp;amp;&amp;amp;后面的pwd没有执行&lt;/span>
&lt;span class="ln"> 5&lt;/span>-bash: cd: /root: Permission denied
&lt;span class="ln"> 6&lt;/span>$ &lt;span class="nb">cd&lt;/span> /root &lt;span class="o">||&lt;/span> &lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># 无法cd到/root目录，发生错误后||后面的pwd得以执行&lt;/span>
&lt;span class="ln"> 7&lt;/span>-bash: cd: /root: Permission denied
&lt;span class="ln"> 8&lt;/span>/dev
&lt;span class="ln"> 9&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;I am 1&amp;#39;&lt;/span>&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;I am 2&amp;#39;&lt;/span> &lt;span class="p">&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;I am 3&amp;#39;&lt;/span> &lt;span class="c1"># 前两个命令后台异步执行，最后一个命令前台执行。&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">23766&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span> &lt;span class="m">23767&lt;/span>
&lt;span class="ln">12&lt;/span>I am &lt;span class="m">3&lt;/span>
&lt;span class="ln">13&lt;/span>I am &lt;span class="m">2&lt;/span>
&lt;span class="ln">14&lt;/span>I am &lt;span class="m">1&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>- Done &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;I am 1&amp;#39;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>+ Done &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;I am 2&amp;#39;&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，除了&lt;code>&amp;amp;&lt;/code>符号，GNU还提供了&lt;code>parallel&lt;/code>命令来并行执行命令，但这部分超出了shell本身的内容，有兴趣的读者可以阅读&lt;a href="https://www.gnu.org/software/parallel/">&lt;code>parallel&lt;/code>的相关文档&lt;/a>。&lt;/p>
&lt;h3 id="复合命令">复合命令&lt;/h3>
&lt;p>复合命令是通过shell保留字和简单命令组合形成的组合命令，算是shell脚本语言的基本结构。&lt;strong>每一个复合命令结构都由每一个保留字或控制符开始，并以对应的保留字或控制符结束&lt;/strong>，这算是shell编程语言的一个特色，例如以&lt;code>if&lt;/code>开头，&lt;code>fi&lt;/code>结尾；&lt;code>do&lt;/code>开头，&lt;code>done&lt;/code>结尾等等。对shell复合命令结构的输入、输出重定向将被应用到该结构的每一个简单命令中，除非其中有某个简单命令用显式的重定向覆盖该结构的重定向。写shell语言时，为了保证代码可读性，在复合命令结构之间通常用&lt;code>newline&lt;/code>来分割，而不是用&lt;code>;&lt;/code>来分割，虽然从语法上来讲，二者作用是一样的，但是过长的代码会给后续的维护造成困难。The Bourne Again SHell（bash）提供循环、条件、组命令、协同四种流程控制复合命令，以及函数复合命令，并用相应的保留字指示bash是哪一种复合命令。bash的保留字如以下表格所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">if&lt;/td>
&lt;td style="text-align:center">then&lt;/td>
&lt;td style="text-align:center">elif&lt;/td>
&lt;td style="text-align:center">else&lt;/td>
&lt;td style="text-align:center">fi&lt;/td>
&lt;td style="text-align:center">time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">for&lt;/td>
&lt;td style="text-align:center">in&lt;/td>
&lt;td style="text-align:center">until&lt;/td>
&lt;td style="text-align:center">while&lt;/td>
&lt;td style="text-align:center">do&lt;/td>
&lt;td style="text-align:center">done&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">case&lt;/td>
&lt;td style="text-align:center">esac&lt;/td>
&lt;td style="text-align:center">coproc&lt;/td>
&lt;td style="text-align:center">select&lt;/td>
&lt;td style="text-align:center">function&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;/td>
&lt;td style="text-align:center">}&lt;/td>
&lt;td style="text-align:center">[[&lt;/td>
&lt;td style="text-align:center">]]&lt;/td>
&lt;td style="text-align:center">!&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>总体处理流程上，shell会先检查第一个标记，如果是可前置保留字(&lt;code>if, for, while, until, case, select, time, function, coproc, {, [[, !&lt;/code>)，则开启复合命令流程；如果是非可前置保留字(&lt;code>then, elif, fi, in, do, done, esac, }, ]]&lt;/code>)，且之前没有与之对应的可前置保留字，则报语法错误；如果不是保留字则当作简单命令，执行下一步骤。&lt;/p>
&lt;p>我们将在《shell-骨干流程2——复合命令与控制流程》中详细的讨论复合命令。&lt;/p>
&lt;h2 id="别名alias展开">别名(alias)展开&lt;/h2>
&lt;p>经过命令解析步骤，可以将任意命令都分解成简单命令，剩下的步骤都是针对简单命令，一条条处理。首先要做的是别名展开，主要做的是检查简单命令的第一个标记(token)是否为别名（alias），如果是则展开别名(alias)。shell维护了一个“alias”列表，我们可以通过shell的内置命令&lt;code>alias&lt;/code>查看现有的别名列表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">alias&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">alias&lt;/span> &lt;span class="nv">l&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls -CF&amp;#39;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">alias&lt;/span> &lt;span class="nv">la&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls -A&amp;#39;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ll&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls -l&amp;#39;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls --color=auto&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以通过&lt;code>alias 别名名称='别名内容'&lt;/code>的方式在当前shell环境中临时添加别名（该shell关闭后，临时添加的别名失效），也可以在任意shell环境文件（如&lt;code>/etc/environment, /etc/profile, ~/.bash_profile, ~/.bash_login, ~/.profile, ~/.bashrc, /etc/bashrc, /etc/bash.bashrc&lt;/code>）中永久添加别名。如果别名名称重复，则会覆盖原有别名。也可以通过&lt;code>unalias 别名名称&lt;/code>取消某个别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">alias&lt;/span> &lt;span class="nv">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;cd /etc/ &amp;amp;&amp;amp; pwd&amp;#39;&lt;/span>
&lt;span class="ln">2&lt;/span>$ hello
&lt;span class="ln">3&lt;/span>/etc
&lt;span class="ln">4&lt;/span>$ &lt;span class="nb">alias&lt;/span> &lt;span class="nv">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;whoami&amp;#39;&lt;/span>
&lt;span class="ln">5&lt;/span>$ hello
&lt;span class="ln">6&lt;/span>lelouch
&lt;span class="ln">7&lt;/span>$ &lt;span class="nb">unalias&lt;/span> hello
&lt;span class="ln">8&lt;/span>$ hello
&lt;span class="ln">9&lt;/span>-bash: hello: &lt;span class="nb">command&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;p>展开别名本质上是一个&lt;strong>文本替换&lt;/strong>的过程。比如，我们输入&lt;code>ll /etc/&lt;/code>，shell就会拿着第一个单词&amp;quot;ll&amp;quot;，查询alias列表，发现有一项&lt;code>alias ll='ls -l'&lt;/code>，就会将&lt;code>ll&lt;/code>替换成&lt;code>ls -l&lt;/code>，命令变成&lt;code>ls -l /etc/&lt;/code>。然后，回到第1步，经过元字符分割为标记、shell命令解析、shell命令解析，再到展开别名这步，拿着第一个单词&amp;quot;ls&amp;quot;，查询alias列表，又发现有一项&lt;code>alias ls='ls --color=auto'&lt;/code>，替换&lt;code>ls -l /etc/&lt;/code>为&lt;code>ls --color=auto -l /etc/&lt;/code>。再回到第1步，经过2，3两步，到展开别名这步，这次首单词还是“ls”。但是shell的alias有一个规定，&lt;strong>之前展开过的别名不能二次展开&lt;/strong>，这是为了防止出现循环展开的情形，因此shell不会再对&lt;code>ls&lt;/code>进行处理，完成这一步工作。&lt;/p>
&lt;p>有人会有一个疑惑，为什么展开别名后，还有回到第1步，重新执行1-3步？&lt;/p>
&lt;p>这是因为，我们对别名的名称有限制（后面再说），但是对别名的内容基本没有限制。因此别名的内容可以包含多条简单命令、复合命令、元字符、引号等等，所以别名展开后，还需要对这些内容进行再次处理。&lt;/p>
&lt;p>此外，从shell处理流程图中，我们能够发现别名替换是在命令执行之前完成的，如果我们在一个复合命令中使用&lt;code>alias&lt;/code>定义了某个别名，并立即在该复合命令中使用，那么实际上是不生效的，因为复合命令没有执行完，别名未被写入系统环境。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">alias&lt;/span> &lt;span class="nv">dog&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;echo &amp;#34;Here is a dog&amp;#34;&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span> dog &lt;span class="c1"># 复合命令中定义别名，后面的命令无法使用别名&lt;/span>
&lt;span class="ln">2&lt;/span>-bash: dog: &lt;span class="nb">command&lt;/span> not found
&lt;span class="ln">3&lt;/span>$ dog &lt;span class="c1"># 当上一个复合命令执行完，别名才被写入系统&lt;/span>
&lt;span class="ln">4&lt;/span>Here is a dog
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个问题在函数中尤其明显，因为shell在函数定义阶段并不执行，只有当实际使用的时候才会执行函数内容，而shell的函数执行流程在不同版本软件（bash，csh，zsh，sh）中多少有些不同，因此为了安全起见，不要在复合命令中使用&lt;code>alias&lt;/code>。&lt;/p>
&lt;p>关于shell的别名还有两个细节问题。一是之前提到的别名的名称有限制，任何元字符、引号字符（‘'’,‘&amp;quot;’,‘\’）以及‘/’, ‘$’, ‘`’, ‘=’都不可以出现在别名名称中。二是在shell脚本中使用别名。别名默认只在交互式shell中启用，shell官方不赞成在脚本中使用别名，而希望使用Shell函数。&lt;/p>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;p>&lt;a href="https://www.gnu.org/software/bash/manual/bash.html">https://www.gnu.org/software/bash/manual/bash.html&lt;/a>&lt;/p></description></item><item><title>Shell 骨干流程0——流程总述</title><link>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B0%E5%A4%A7%E4%BD%93%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E9%AA%A8%E5%B9%B2%E6%B5%81%E7%A8%8B0%E5%A4%A7%E4%BD%93%E6%B5%81%E7%A8%8B/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#shell%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5%E4%B8%AD%E8%8B%B1%E6%96%87">shell关键概念中英文&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE">Shell处理流程图&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%A7%E4%BD%93%E6%B5%81%E7%A8%8B">大体流程&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%BD%A2%E6%88%90%E5%88%9D%E6%AD%A5%E5%91%BD%E4%BB%A4">形成初步命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%A4%8D%E5%90%88%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">复合命令与流程控制&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E5%B1%95%E5%BC%80">命令展开&lt;/a>&lt;/li>
&lt;li>&lt;a href="#io%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91">I/O与重定向&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8Ejob%E6%8E%A7%E5%88%B6">命令执行与job控制&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90">具体例子&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="shell-骨干流程---omit-in-toc---">Shell 骨干流程&lt;!-- omit in toc -->&lt;/h2>
&lt;p>我们在进行shell变成或使用CLI shell进行交互时，shell背后进行了复杂的处理流程。借由理清这个处理流程，会给我们对shell有更加深刻的认知。&lt;/p>
&lt;h2 id="shell关键概念中英文">shell关键概念中英文&lt;/h2>
&lt;p>为了更清楚的描述，我们给出如下shell中常用的中英文定义：&lt;/p>
&lt;ul>
&lt;li>blank：包含空格&lt;code>space&lt;/code>和制表符&lt;code>tab&lt;/code>&lt;/li>
&lt;li>control operator, 控制符：包含&lt;code>newline, '||', '&amp;amp;&amp;amp;', '&amp;amp;', ';', ';;', ';&amp;amp;', ';;&amp;amp;', '|', '|&amp;amp;', '(', ')'&lt;/code>&lt;/li>
&lt;li>field, 字段：shell扩展之一带来的文本单位。扩展后，当执行命令时，生成的字段将用作命令名称和参数&lt;/li>
&lt;li>job, 作业：在同一个进程组中的一系列进程，可由管道或衍生的进程组成&lt;/li>
&lt;li>job control, 作业控制：一种机制，用户可以通过该机制选择性地停止（挂起）并重新开始（恢复）进程的执行。&lt;/li>
&lt;li>metacharacter, 元字符：当不在引号中时，用于分割单词的字符，包括&lt;code>space, tab, newline, '|', '&amp;amp;', ';', '(', ')', '&amp;lt;', '&amp;gt;'&lt;/code>&lt;/li>
&lt;li>operator, 操作符：分为控制符或重定向符，操作符由至少一个元字符组成&lt;/li>
&lt;li>process group, 进程组：一系列具有相同组进程ID的进程&lt;/li>
&lt;li>reserved word, 保留字：对shell具有特殊含义的单词。，大多数保留字用于流程控制，如&lt;code>for, while, if&lt;/code>&lt;/li>
&lt;li>signal, 信号：一种机制，内核可以通过该机制将系统中发生的事件通知给进程&lt;/li>
&lt;li>token, 标记：可以被shell认为是一个独立单元的一串字符，分为单词word或操作符operator&lt;/li>
&lt;li>word, 单词：可以被shell认为是一个单元的一串字符，单词不能包括不带引号的元字符。&lt;/li>
&lt;/ul>
&lt;h2 id="shell处理流程图">Shell处理流程图&lt;/h2>
&lt;p>我们首先给出shell的执行流程图，接下针对每一个步骤进行详细说明。&lt;/p>
&lt;p>&lt;img src="../images/shell%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.drawio.svg" alt="shell执行流程">&lt;/p>
&lt;h2 id="大体流程">大体流程&lt;/h2>
&lt;ol start="0">
&lt;li>从文件、用户终端或其他唤起&lt;code>shell&lt;/code>的方法中读取输入，通常&lt;code>shell&lt;/code>会按行处理，如果有复合命令和多行命令符号则另加处理步骤。&lt;/li>
&lt;li>根据元字符（&lt;code>space, tab, newline, '|', '&amp;amp;', ';', '(', ')', '&amp;lt;', '&amp;gt;'&lt;/code>）将输入的内容分割成各个标记（单词word或操作符operator），其中单词包括普通单词和保留字，操作符包括控制符或重定向符。&lt;/li>
&lt;li>检查第一个标记(token)是否为引号（包括单引号，双引号，反斜杠），如果有引号则跳过部分流程。（引号处理）&lt;/li>
&lt;li>检查第一个标记(token)是否为保留字（关键字），决定是否启用复合命令流程。（流程控制）。&lt;/li>
&lt;li>检查第一个标记(token)是否为别名（alias），如果是则展开别名。&lt;/li>
&lt;li>展开命令中的大括号。&lt;/li>
&lt;li>展开波浪符号，即得到HOME_PATH。&lt;/li>
&lt;li>参数展开，为&lt;code>${...}&lt;/code>的展开，以及&lt;code>$Varname&lt;/code>的替换。&lt;/li>
&lt;li>命令替换&amp;quot;``&amp;quot;或者&lt;code>$(...)&lt;/code>使用子shell执行。&lt;/li>
&lt;li>计算算术表达式。&lt;/li>
&lt;li>将之前展开的命令、替换的命令根据分隔符再一次切割，然后重组成真正可以执行的命令。&lt;/li>
&lt;li>根据通配符（&lt;code>*,?&lt;/code>）等展开路径名和文件名。&lt;/li>
&lt;li>根据重定向符号执行任何必要的重定向，之后参数列表中删除重定向运算符及其操作数。&lt;/li>
&lt;li>根据扩展后命令的首个单词在&lt;code>$PATH&lt;/code>和内建命令中查找可执行命令或文件。&lt;/li>
&lt;li>执行命令，其中首单词为命令用&lt;code>$0&lt;/code>表示，后面为此命令的参数。如果遇到文件结束符号EOF则完成shell流程，否则读取下一条命令从第1步再开始执行。&lt;/li>
&lt;/ol>
&lt;h2 id="形成初步命令">形成初步命令&lt;/h2>
&lt;p>我们将第1-4步分为第一大步，其主要作用是&lt;strong>形成初步命令&lt;/strong>。在流程图中为橙色部分，其主要处理流程为&lt;strong>元字符分割为标记、引号处理、shell命令解析、别名展开&lt;/strong>。具体内容见《&lt;strong>shell-骨干流程1——形成初步命令&lt;/strong>》。&lt;/p>
&lt;h2 id="复合命令与流程控制">复合命令与流程控制&lt;/h2>
&lt;p>这一步发生在第3步，即检查标记是否为保留字这步，如果为合法保留字就需要组成&lt;strong>复合命令&lt;/strong>。如图中红色部分所示。由于复合命令与形成初步命令往往是交互进行的，因此我并没有将其标注成独立的步骤，详见《&lt;strong>shell-骨干流程2——复合命令与流程控制&lt;/strong>》。&lt;/p>
&lt;h2 id="命令展开">命令展开&lt;/h2>
&lt;p>命令展开如图中绿色部分所示，包含5-11步。第5-7步都是各式各样的命令展开。基本的命令展开包括3种，分别为：大括号展开、波浪符号展开、参数与变量展开。这三种命令展开本质上是shell语法糖的展开。第8，9两步实际上是子命令执行，并非语法糖，原始命令将启动子进程（子shell）来执行子命令，执行的结果作为标记，嵌入到原命令中。5-7步和8-9步的区别在于，5-7步本质是查找语法糖对应的内容进行展开，无需使用子进程；8-9步本质是采纳子进程执行的结果，而非简单的查找替换。经过5-9步的处理，原始命令已经能够被shell直接执行，因此我们需要第10步将这些替换过后的内容重组起来，根据系统分隔符（Internal Field Seperator，IFS）再次分割（因为命令展开过程中会带来新的内容）。最后我们还需要第11步，展开路径和文件名，这一步和之前5-7步展开又是不同的，之前是语法糖替换，而这次是使用shell模式匹配方式（通配符）替换。第11步的shell模式匹配是正则表达式简化版，主要是利用通配符，并非完整的正则表达式规则。详见《&lt;strong>shell-骨干流程3——命令展开&lt;/strong>》。&lt;/p>
&lt;h2 id="io与重定向">I/O与重定向&lt;/h2>
&lt;p>第12部分（紫色方框）是执行任何必要的重定向，并从参数列表中删除重定向运算符及其操作数。这部分涉及到进程标准I/O和&lt;code>/dev&lt;/code>下的各种设备文件描述符，在文章《&lt;strong>linux-从设备文件看重定向&lt;/strong>》中有详细介绍。&lt;/p>
&lt;h2 id="命令执行与job控制">命令执行与job控制&lt;/h2>
&lt;p>第13，14步是真正的命令执行阶段。如图中蓝色部分所示。第13步是保证命令的存在及可执行性，在非复合命令中，首个单词（word）通常指的是需要执行的命令，后面的部分都是该命令的参数。最终在第14步执行命令+参数，并返回结果。如果存在未执行命令则读取下一条命令从头在开始处理，若遇到文件结束符（EOF）则完成shell流程。&lt;/p>
&lt;p>作业控制（job control）是针对即将执行和正在执行命令的一套控制机制，也是shell流程中不可缺少的一部分。命令执行与job控制部分详见《&lt;strong>shell-骨干流程4——命令执行与job控制&lt;/strong>》。&lt;/p>
&lt;h2 id="具体例子">具体例子&lt;/h2>
&lt;p>为了更好的理解整体流程，我们使用&lt;a href="https://se.ifmo.ru/~ad/Documentation/Bash_Shell/bash3-CHP-7-SECT-3.html">https://se.ifmo.ru/~ad/Documentation/Bash_Shell/bash3-CHP-7-SECT-3.html&lt;/a>中的例子对应上图中的步骤进一步讲解。&lt;/p>
&lt;ol start="0">
&lt;li>读取命令&lt;code>ll $(type -path cc) ~/.*$(($$%1000))&lt;/code>；&lt;/li>
&lt;li>将&lt;code>ll $(type -path cc) ~/.*$(($$%1000))&lt;/code>分割成不同的标记，此处分割为：&lt;code>ll, $, (, type, -path, cc, ), ~/.*, $, (, (, $$%1000, ), )&lt;/code>；&lt;/li>
&lt;li>命令中不含有引号，无操作；&lt;/li>
&lt;li>&lt;code>ll&lt;/code> 不是保留字，无操作;&lt;/li>
&lt;li>检测到&lt;code>ll&lt;/code>为别名，替换为&lt;code>ls -l&lt;/code>。&lt;code>ls -l $(type -path cc) ~/.*$(($$%1000))&lt;/code>，然后，从流程开始再执行一遍步骤1-3，在步骤1中将&lt;code>ls -l&lt;/code>再分割为&lt;code>ls, -l&lt;/code>两部分；&lt;/li>
&lt;li>不含有大括号，无操作；&lt;/li>
&lt;li>发现波浪符号，将&lt;code>~&lt;/code>展开为&lt;code>/home/username&lt;/code>，&lt;code>ls -l $(type -path cc) /home/username/.*$(($$%1000))&lt;/code>；&lt;/li>
&lt;li>发现&lt;code>$$&lt;/code>符号，将&lt;code>$$&lt;/code>参数展开为当前进程号2537（根据实际情况，进程号都不相同），且&lt;code>ls -l $(type -path cc) /home/username/.*$((2537%1000))&lt;/code>；&lt;/li>
&lt;li>发现&lt;code>$()&lt;/code>符号，执行命令替换，开启子shell执行&lt;code>type -path cc&lt;/code>，结果为&lt;code>/usr/bin/cc&lt;/code>，&lt;code>ls -l /usr/bin/cc /home/username/.*$((2537%1000))&lt;/code>；&lt;/li>
&lt;li>发现&lt;code>$(( ))&lt;/code>算数运算符号，进行算术运算2537%1000=537，代入原命令：&lt;code>ls -l /usr/bin/cc /home/username/.*537&lt;/code>；&lt;/li>
&lt;li>未发现新的分隔符（IFS），无需进行再分割，无操作；&lt;/li>
&lt;li>发现通配符&amp;quot;*&amp;quot;，进行展开得到&lt;code>.hist537&lt;/code>文件，&lt;code>ls -l /usr/bin/cc /home/username/.hist537&lt;/code>；&lt;/li>
&lt;li>未发现重定向操作符，无操作；&lt;/li>
&lt;li>首个单词为“ls”，在&lt;code>$PATH，/usr/bin&lt;/code>中检索到&lt;code>ls&lt;/code>命令；&lt;/li>
&lt;li>执行命令&lt;code>/usr/bin/ls&lt;/code>，后面的&lt;code>-l /usr/bin/cc /home/username/.hist537&lt;/code>为命令的参数，其作用为查看&lt;code>/usr/bin/cc /home/username/.hist537&lt;/code>这两个文件的详细属性。此命令后不再有其他命令，结束此shell流程。&lt;/li>
&lt;/ol>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://se.ifmo.ru/~ad/Documentation/Bash_Shell/bash3-CHP-7-SECT-3.html">https://se.ifmo.ru/~ad/Documentation/Bash_Shell/bash3-CHP-7-SECT-3.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Operation.html">https://www.gnu.org/software/bash/manual/html_node/Shell-Operation.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>shell-shopt选项</title><link>https://surprisedcat.github.io/projectnotes/shell-shopt%E9%80%89%E9%A1%B9/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-shopt%E9%80%89%E9%A1%B9/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#shopt%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8">shopt命令使用&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shopt%E6%94%AF%E6%8C%81%E7%9A%84shell%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD">shopt支持的shell属性功能&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="shell的shopt命令---omit-in-toc---">shell的shopt命令&lt;!-- omit in toc -->&lt;/h2>
&lt;p>&lt;code>shopt&lt;/code>命令在shell中用于显示和设置shell中的行为选项，通过这些选项以增强shell易用性。&lt;code>shopt&lt;/code>命令若不带任何参数选项，则可以显示所有可以设置的shell操作选项。&lt;/p>
&lt;h2 id="shopt命令使用">shopt命令使用&lt;/h2>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">shopt&lt;/span> &lt;span class="o">[&lt;/span>-pqsu&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-o&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>shell选项名 ...&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>参数：
&lt;span class="ln">3&lt;/span> -o 限制 OPTNAME 为定义用于&lt;span class="sb">`&lt;/span>&lt;span class="nb">set&lt;/span> -o&lt;span class="err">&amp;#39;&lt;/span> 的选项
&lt;span class="ln">4&lt;/span> -p 打印每个 shell 选项并标注它的状态。（）
&lt;span class="ln">5&lt;/span> -q 抑制输出
&lt;span class="ln">6&lt;/span> -s 启用（设定）某个 OPTNAME 选项
&lt;span class="ln">7&lt;/span> -u 禁用（反设定）某个 OPTNAME 选项
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">shopt&lt;/span>
&lt;span class="ln"> 2&lt;/span>autocd off
&lt;span class="ln"> 3&lt;/span>assoc_expand_once off
&lt;span class="ln"> 4&lt;/span>cdable_vars off
&lt;span class="ln"> 5&lt;/span>cdspell off
&lt;span class="ln"> 6&lt;/span>checkhash off
&lt;span class="ln"> 7&lt;/span>checkjobs off
&lt;span class="ln"> 8&lt;/span>checkwinsize on
&lt;span class="ln"> 9&lt;/span>cmdhist on
&lt;span class="ln">10&lt;/span>compat31 off
&lt;span class="ln">11&lt;/span>compat32 off
&lt;span class="ln">12&lt;/span>compat40 off
&lt;span class="ln">13&lt;/span>compat41 off
&lt;span class="ln">14&lt;/span>compat42 off
&lt;span class="ln">15&lt;/span>compat43 off
&lt;span class="ln">16&lt;/span>compat44 off
&lt;span class="ln">17&lt;/span>complete_fullquote on
&lt;span class="ln">18&lt;/span>direxpand off
&lt;span class="ln">19&lt;/span>dirspell off
&lt;span class="ln">20&lt;/span>dotglob off
&lt;span class="ln">21&lt;/span>execfail off
&lt;span class="ln">22&lt;/span>expand_aliases on
&lt;span class="ln">23&lt;/span>extdebug off
&lt;span class="ln">24&lt;/span>extglob on
&lt;span class="ln">25&lt;/span>extquote on
&lt;span class="ln">26&lt;/span>failglob off
&lt;span class="ln">27&lt;/span>force_fignore on
&lt;span class="ln">28&lt;/span>globasciiranges on
&lt;span class="ln">29&lt;/span>globstar off
&lt;span class="ln">30&lt;/span>gnu_errfmt off
&lt;span class="ln">31&lt;/span>histappend on
&lt;span class="ln">32&lt;/span>histreedit off
&lt;span class="ln">33&lt;/span>histverify off
&lt;span class="ln">34&lt;/span>hostcomplete off
&lt;span class="ln">35&lt;/span>huponexit off
&lt;span class="ln">36&lt;/span>inherit_errexit off
&lt;span class="ln">37&lt;/span>interactive_comments on
&lt;span class="ln">38&lt;/span>lastpipe off
&lt;span class="ln">39&lt;/span>lithist off
&lt;span class="ln">40&lt;/span>localvar_inherit off
&lt;span class="ln">41&lt;/span>localvar_unset off
&lt;span class="ln">42&lt;/span>login_shell on
&lt;span class="ln">43&lt;/span>mailwarn off
&lt;span class="ln">44&lt;/span>no_empty_cmd_completion off
&lt;span class="ln">45&lt;/span>nocaseglob off
&lt;span class="ln">46&lt;/span>nocasematch off
&lt;span class="ln">47&lt;/span>nullglob off
&lt;span class="ln">48&lt;/span>progcomp on
&lt;span class="ln">49&lt;/span>progcomp_alias off
&lt;span class="ln">50&lt;/span>promptvars on
&lt;span class="ln">51&lt;/span>restricted_shell off
&lt;span class="ln">52&lt;/span>shift_verbose off
&lt;span class="ln">53&lt;/span>sourcepath on
&lt;span class="ln">54&lt;/span>xpg_echo off
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shopt支持的shell属性功能">shopt支持的shell属性功能&lt;/h2>
&lt;p>cdable_vars:&lt;/p>
&lt;p>如果给cd内置命令的参数不是一个目录,就假设它是一个变量名,变量的值是将要转换到的目录&lt;/p>
&lt;p>cdspell:&lt;/p>
&lt;p>纠正cd命令中目录名的较小拼写错误.检查的错误包括颠倒顺序的字符,遗漏的字符以及重复的字符.如果找到一处需修改之处,正确的路径将打印出,命令将继续.只用于交互式shell&lt;/p>
&lt;p>checkhash:&lt;/p>
&lt;p>bash在试图执行一个命令前,先在哈希表中寻找,以确定命令是否存在.如果命令不存在,就执行正常的路径搜索&lt;/p>
&lt;p>checkwinsize:&lt;/p>
&lt;p>bash在每个命令后检查窗口大小,如果有必要,就更新LINES和COLUMNS的值&lt;/p>
&lt;p>cmdhist:&lt;/p>
&lt;p>bash试图将一个多行命令的所有行保存在同一个历史项中.这是的多行命令的重新编辑更方便&lt;/p>
&lt;p>dotglob:&lt;/p>
&lt;p>Bash在文件名扩展的结果中包括以点(.)开头的文件名&lt;/p>
&lt;p>execfail:&lt;/p>
&lt;p>如果一个非交互式shell不能执行指定给exec内置命令作为参数的文件,它不会退出.如果exec失败,一个交互式shell不会退出&lt;/p>
&lt;p>expand_aliases:&lt;/p>
&lt;p>别名被扩展.缺省为打开&lt;/p>
&lt;p>extglob:&lt;/p>
&lt;p>打开扩展的模式匹配特性(正常的表达式元字符来自Korn shell的文件名扩展)&lt;/p>
&lt;p>histappend:&lt;/p>
&lt;p>如果readline正被使用,用户有机会重新编辑一个失败的历史替换&lt;/p>
&lt;p>histverify:&lt;/p>
&lt;p>如果设置,且readline正被使用,历史替换的结果不会立即传递给shell解释器.而是将结果行装入readline编辑缓冲区中,允许进一步修改&lt;/p>
&lt;p>hostcomplete:&lt;/p>
&lt;p>如果设置,且readline正被使用,当正在完成一个包含@的词时bash将试图执行主机名补全.缺省为打开&lt;/p>
&lt;p>huponexit:&lt;/p>
&lt;p>如果设置,当一个交互式登录shell退出时,bash将发送一个SIGHUP(挂起信号)给所有的作业&lt;/p>
&lt;p>interactive_comments:&lt;/p>
&lt;p>在一个交互式shell中.允许以#开头的词以及同一行中其他的字符被忽略.缺省为打开&lt;/p>
&lt;p>lithist:&lt;/p>
&lt;p>如果打开,且cmdhist选项也打开,多行命令讲用嵌入的换行符保存到历史中,而无需在可能的地方用分号来分隔&lt;/p>
&lt;p>mailwarn:&lt;/p>
&lt;p>如果设置,且bash用来检查邮件的文件自从上次检查后已经被访问,将显示消息”The mail in mailfile has been read”&lt;/p>
&lt;p>nocaseglob:&lt;/p>
&lt;p>如果设置,当执行文件名扩展时,bash在不区分大小写的方式下匹配文件名&lt;/p>
&lt;p>nullglob：&lt;/p>
&lt;p>如果设置,bash允许没有匹配任何文件的文件名模式扩展成一个空串,而不是他们本身&lt;/p>
&lt;p>promptvars:&lt;/p>
&lt;p>如果设置,提示串在被扩展后再进行变量和参量扩展.缺省为打开&lt;/p>
&lt;p>restricted_shell :&lt;/p>
&lt;p>如果shell在受限模式下启动就设置这个选项.该值不能被改变.当执行启动文件时不能复位该选项,允许启动文件发现shell是否受限&lt;/p>
&lt;p>shift_verbose :&lt;/p>
&lt;p>如果该选项设置,当移动计数超出位置参量个数时,shift内置命令将打印一个错误消息&lt;/p>
&lt;p>sourcepath :&lt;/p>
&lt;p>如果设置,source内置命令使用PATH的值来寻找作为参数提供的文件的目录.缺省为打开&lt;/p>
&lt;p>source :&lt;/p>
&lt;p>点(.)的同义词&lt;/p>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/dengjin20104042056/article/details/100566309">https://blog.csdn.net/dengjin20104042056/article/details/100566309&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>linux-与终端交互的发展</title><link>https://surprisedcat.github.io/projectnotes/linux-%E4%B8%8E%E7%BB%88%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E5%8F%91%E5%B1%95/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-%E4%B8%8E%E7%BB%88%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E5%8F%91%E5%B1%95/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E7%8B%AC%E7%AB%8B%E7%89%A9%E7%90%86%E7%BB%88%E7%AB%AF%E7%9A%84%E5%B4%9B%E8%B5%B7%E6%96%87%E6%9C%AC%E6%A8%A1%E5%BC%8F%E4%B8%80%E7%BB%9F%E5%A4%A9%E4%B8%8B">独立物理终端的崛起——文本模式一统天下&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BB%8E%E7%89%A9%E7%90%86%E7%BB%88%E7%AB%AF%E5%88%B0%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF">从物理终端到虚拟终端&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B4%9B%E8%B5%B7linux%E4%BB%8E%E6%96%87%E6%9C%AC%E8%BF%88%E5%90%91%E5%9B%BE%E5%83%8F">图形化崛起——Linux从文本迈向图像&lt;/a>&lt;/li>
&lt;li>&lt;a href="#desktop%E9%97%AE%E9%BC%8E">Desktop问鼎&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BC%AA%E7%BB%88%E7%AB%AFcli%E4%BA%A4%E4%BA%92%E7%9A%84%E8%96%AA%E7%81%AB%E7%9B%B8%E4%BC%A0">伪终端——CLI交互的薪火相传&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#gui%E4%B8%AD%E7%9A%84cli">GUI中的CLI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">远程连接操作系统&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%8E%E5%8F%B0%E4%BF%9D%E9%9A%9C%E8%BF%90%E8%A1%8C%E7%9A%84tmux">后台保障运行的Tmux&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%80%BB%E7%BB%93">总结&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0%E5%8F%8A%E8%B5%84%E6%96%99">参考文章及资料&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="linux-与终端交互的发展---omit-in-toc---">linux-与终端交互的发展&lt;!-- omit in toc -->&lt;/h2>
&lt;p>终端（英语：Computer terminal），是一台电脑或者计算机系统，用来让用户输入数据，及显示其计算结果的机器，简而言之就是人类用户与计算机交互的设备。终端其实就是一种输入输出设备，相对于计算机主机而言属于外设，本身并不提供运算处理功能。终端可分为文本终端和图形终端，从文本终端向图形终端的发展，就是计算机逐渐普及的历史，也催生了越来越强大的硬件设备和越来越用户友好的操作系统。文本终端本身也经历从物理终端到虚拟终端再到伪终端的转变，本文交错地介绍这两条终端发展路线，希望读者能更好地理解操作系统的交互方式。&lt;/p>
&lt;h2 id="独立物理终端的崛起文本模式一统天下">独立物理终端的崛起——文本模式一统天下&lt;/h2>
&lt;p>计算机在起步阶段都是体积庞大、复杂且昂贵的，即使发展到20世纪80，90年代，一台相对小巧一体化电脑（比如笔记本电脑）是很罕见的，在Linux诞生的1991年，一台最便宜的Apple Macintosh PowerBook 100的价格是&lt;strong>2,299美元&lt;/strong>，要知道那可是1991年的2,299美元，当年中国人民的人均GDP才333美元。所以在计算机发展早期，主流做法是多个用户是通过物理终端（外设）连接到大型计算机或中型计算机的，共享一台计算机。&lt;/p>
&lt;p>早期的计算机终端一般是机电的电传打字机，比如ASR33。但是对于大多数应用来说它们太慢了，需要在卡片或磁带等物理性的材料上标记好资料之后，放入计算机，再印出结果，过程非常费工。20世纪70年代中，许多电脑公司认识到带显示器的打字机输入终端比穿孔卡片要好得多，而且可以使得计算机更加容易与用户互动，产生新的应用。终于，在神奇的1978年，计算机界迎来了一次创新性爆发，很多影响至今的产品被提了出来，比如：x86-CPU芯片的初代产品8086处理器，现代计算机网络的基石之一传输控制协议即TCP协议（同年ISO提出了对标TCP/IP的OSI网络体系），BIOS的存储介质第一款EEPROM-Intel 2816，苹果电脑系统的鼻祖Apple DOS，以及本文要提的第一位主角，最畅销、甚至成为实际标准的终端设备VT-100。&lt;/p>
&lt;p>&lt;img src="../images/DEC_VT100_terminal.jpg" alt="VT100">&lt;/p>
&lt;p>上面这台长得像小台式机一样的机器，就是VT100终端啦。别看到长得像台式机，但是实际上只相当于现在的显示器+键盘组合在一起（还是只能显示文本不能显示图片的显示器），不包含CPU、内存、硬盘等硬件，只能通过RS232串口线连接到真正意义上的计算机，所以实际上以21世纪概念看，完整的一台电脑应该是下图这个样子（图中的计算机是DEC公司生产于1970到1980年代的PDP-11型计算机）：&lt;/p>
&lt;p>&lt;img src="../images/RS232-serial-communication.jpg" alt="RS232-serial-communication.jpg">&lt;/p>
&lt;p>而从操作系统的角度看，终端是外接的设备（外设），并不属于计算机本体的功能，但是为了让终端和处理器能够相互理解、交互，就需要单独的程序担当二者的桥梁，这种充当计算机本体和外设桥梁的程序就是&lt;strong>设备驱动程序(driver)&lt;/strong>。设备驱动程序是添加到操作系统中的特殊程序，其中包含有关硬件设备的信息，此信息能够使计算机与相应的设备进行通信。&lt;/p>
&lt;p>由于在计算机早期的快速发展阶段，基本上所有的交互设备都是像VT100的这样&lt;strong>只能进行字符交互&lt;/strong>的终端，当时操作系统要处理的26个拉丁字母机及其衍生字母、特殊符号也很有限（不像汉字……感谢王选院士），所以当时最流行的操作系统Unix以及后来参考Unix设计的linux操作系统，都在内核中留有专门为此类终端设计的teletype terminal subsystem，简称tty子系统。tty子系统主要由三个部分组成：处理硬件相关的tty驱动、处理文本与控制码的line discipline和提供统一抽象操作的tty (I/O) core。对于每个连接到计算机的物理终端，tty子系统还会分别创建对应的字符设备文件描述符&lt;code>/dev/ttyX&lt;/code>（X表示一个数字），并维护每个终端与对应&lt;code>/dev/ttyX&lt;/code>之间的数据流会话。逻辑结构如下所示：&lt;/p>
&lt;p>&lt;img src="../images/terminal-ttysubsystem.drawio.svg" alt="terminal-ttysubsystem">&lt;/p>
&lt;blockquote>
&lt;p>我查阅资料的过程中，操作系统与终端直接连接的模块，有人画的是UART驱动，有人画的是tty驱动。&lt;strong>UART（通用异步收发器）是一种串口通信方式&lt;/strong>。串口即串行接口，是一种信息传输方法，与之相对应的另一种接口叫并口，并行接口。两者的区别是，传输一个字节（8个位）的数据时，串口是将8个位排好队，逐个比特地在&lt;strong>1条连接线&lt;/strong>上传输，而并口则将8个位一字排开，分别在&lt;strong>8条连接线&lt;/strong>上同时传输1位比特，在相同的数据传输速率下，并口的确比串口更快，但由于高频传输时，并口的各个连接线之间容易互相干扰，高速情况下难以同步各连接线的数据，而且硬件成本也相对串口更高（线多），因而&lt;strong>串口取代并口成为了现在的主流接口&lt;/strong>。除了UART，目前常用的其他串口通信方式还包括RJ-45(网口)、USB系列、I2C、SPI等等。在VT100终端时代，UART是最流行的串口通信方式，常见的标准有一般电脑应用的RS-232（使用25针或9针连接器）和工业电脑应用的半双工RS-485与全双工RS-422（不要与通用串行总线Universal Serial Bus，USB混淆），以至于现在所提到的串口，默认就指的是UART串口。&lt;/p>
&lt;p>具体说下UART驱动和tty驱动的区别。UART驱动是指&lt;strong>通信方式为UART串口&lt;/strong>的驱动程序，而tty驱动是从使用外设种类（种类为tty）的角度来描述驱动。比如网卡设备的网卡驱动，键盘、鼠标的驱动等等。二者不是一个方面的东西。如果一个外设使用了UART串口作为通信方式，那么这个外设就需要UART驱动；当然，如果该设备使用了USB作为通信方式，那么就要用USB驱动。一般的设备驱动不仅仅包括通信层面的驱动，还包括与自身硬件密切相关的程序，例如现在的家用打印机驱动程序主要就是由USB驱动和GDI打印驱动组成。&lt;/p>
&lt;p>在物理终端的时代，由于tty终端大多数使用的都是UART传输方式，并且所有终端制造商共同采用事实标准ANSI转义序列（不需要额外的硬件驱动），所以在图中画UART驱动或tty驱动本质是一个。看tty子系统的源码，我们也可以发现tty驱动中描述的驱动类型就是UART；严格的来讲，UART驱动可以算是tty驱动的一种具体实现，在Linux中tty子系统的驱动代码里，tty驱动操作都是直接使用UART串口驱动的操作:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/* Linux 的driver/tty/serial/serial_core.c文件中，
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cm">uart_ops就是基于tty_operation结构体创建的*/&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">tty_operations&lt;/span> &lt;span class="n">uart_ops&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">install&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_install&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_open&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">close&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_close&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_write&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">put_char&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_put_char&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">flush_chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_flush_chars&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">write_room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_write_room&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">chars_in_buffer&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">uart_chars_in_buffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">flush_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_flush_buffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">ioctl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_ioctl&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">throttle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_throttle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">unthrottle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_unthrottle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">send_xchar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_send_xchar&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">set_termios&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_set_termios&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">set_ldisc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_set_ldisc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_stop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_start&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">hangup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_hangup&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">break_ctl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uart_break_ctl&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">wait_until_sent&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">uart_wait_until_sent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 结构体以下代码省略 ……
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>此外，由于串口设备的在这个阶段的主流地位，tty子系统为串口物理终端（如VT100）创建字符设备文件描述符实际上不是&lt;code>/dev/ttyX&lt;/code>，而是特地用&lt;code>/dev/ttySX&lt;/code>表示，其中“S”表示Serial，即串口的英文。我们现在还能在&lt;code>/dev/&lt;/code>目录下看到保留的&lt;code>/dev/ttySX&lt;/code>，只不过现在一般只有嵌入式或工控设备还在使用。&lt;/p>
&lt;/blockquote>
&lt;p>终端与计算机的数据交互逻辑流程如下&lt;/p>
&lt;ul>
&lt;li>输入数据流的逻辑流程如下：
&lt;ol>
&lt;li>终端（例如VT100）键盘的输入数据触发系统中断，并经过串口线（RS232）传输给计算机的串口接口，并由驱动程序接收（数方波）。驱动程序将来自硬件的数据整合成OS能够理解的字节；&lt;/li>
&lt;li>line discipline将驱动的数据读取到字符设备缓冲区，并进行进一步解释，例：特殊符号如backspace、tab符号做出相应解释，还有将一些终端指令如ctrl+c解释为中断，将Ctrl+e解释成将光标移至行尾等转换。需要指出不同设备（如鼠标、触摸板）的line discipline内容是不一样。当前的串行通信子系统至少支持17种line discipline。解释完输入内容后，line discipline还会把输入的数据写回到echo buffer，送回终端屏幕（这是我们在键盘打字然后在terminal终端实时显示的原理）；&lt;/li>
&lt;li>tty I/O 将字符设备缓冲区的内容read/copy到标准输入设备文件（stdin，文件描述符为&lt;code>/dev/stdin&lt;/code>实际指向&lt;code>/dev/ttySX&lt;/code>）；&lt;/li>
&lt;li>用户进程从标准输入设备（stdin）读取输入内容作为程序运行所需的数据。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>输出数据流的逻辑流程如下：
&lt;ol>
&lt;li>用户进程将输出的文本数据写入标准输出设备文件（&lt;code>/dev/stdout&lt;/code>）或标准错误设备文件（&lt;code>/dev/stderr&lt;/code>）（这两个文件实际都指向&lt;code>/dev/ttySX&lt;/code>）；&lt;/li>
&lt;li>tty I/O 先读取stdout和stderr的内容，再调用tty core的write操作，将数据写入字符设备缓冲区；&lt;/li>
&lt;li>line discipline接收字符设备缓冲区的数据，调用line discipline的write操作，写入echo buffer,并对数据进行整理，例如将所有LF字符替换为CR/LF序列等；&lt;/li>
&lt;li>最后，调用tty驱动的write操作，将echo buffer中的字节转换成UART能够理解的比特位，通过串口线返回给终端（VT100）的文本显示器。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>有一点需要再次强调，当年的终端设备显示器和现在的显示器接收的数据类型完全不一样。VT100终端接收的是ANSI转义序列码，只能显示规定的字符；而现在的显示器接收的数据是图像点阵，所以能够显示各种图片、视频等多媒体文件。因此，VT100等终端自然也没有分辨率的说法，只能显示24行80列的字符（后来扩充到25行，25*80成为最终标准）😅。&lt;/p>
&lt;p>即使如此由于VT100先进地拥有双向滚动、允许自由移动光标控制屏幕、滚动翻页等功能成为当时最畅销的终端，取得了600万的销量，这在当时可算是天皇巨星级别的产品了。&lt;/p>
&lt;h2 id="从物理终端到虚拟终端">从物理终端到虚拟终端&lt;/h2>
&lt;blockquote>
&lt;p>集成电路上可以容纳的晶体管数目在大约每经过18个月便会增加一倍。——戈登·摩尔&lt;/p>
&lt;/blockquote>
&lt;p>物理终端在个人电脑（personal computer, PC）普及之前，一直是计算机硬件系统中不可或缺的重要组成部分，然而我们今天貌似只能在博物馆里才能看见这些浑身冒着历史感的设备。击败了流行一时的VT100等物理终端的并不是更先进的终端机或是更先进的交互方式，而是&lt;strong>摩尔定律导致的个人电脑的普及&lt;/strong>。在VT100卖的最好的年代，计算机并非人人能拥有的平民设备，它不仅需要大量的金钱(a lot of money)，大量的空间(a lot of space)，还需要大量的技术能力(a lot of technology)，3A大作了属于是。&lt;/p>
&lt;p>随着电子元件的微型化和集成电路的快速发展，计算机由一整个房间的设备逐渐缩减成等身高的机器，再到手提包大小的可随身携带的设备，整体制造成本也大大减少，人人拥有一台电脑已经不是天方夜谈。加上人们对新事物的学习与认知，也让计算机不在是“悬在天边的明月”。那么如果电脑已经能够人手一台了，那么只能打字输入和显示器输出的终端外设还需要独立售卖吗？面对这样的降维打击，终端机制造商们开始沿着两条路交错发展，一条路是把终端机拆成屏幕和键盘两部分，独立发展，屏幕开始专注于显示功能，提供彩色的、加粗、更清晰的字符显示；键盘也逐渐摆脱承重的机械装置向着轻量化、多功能化、规范化发展。第二条路是将终端设备和计算机本地融为一体，完全成为PC机不可拆分的一部分，比如笔记本电脑，同时由于集成化程度高，硬件间距离近，并口的干扰与不同步等问题大大降低，排线也取代了UART作为内部连接的高速传输通道。下图即为最接近现在笔记本电脑形态的可移动计算机——1989年的NEC UltraLite，运行MS-DOS 3.3。&lt;/p>
&lt;p>&lt;img src="../images/nec-ultralite.jpg" alt="nec-ultralite.jpg">&lt;/p>
&lt;p>但是从操作系统的交互角度来说，它要做的事情大体上没有什么变化，即接收来自输入设备的字符，交给用户进程处理，再把用户进程返回的信息返回给输出终端。因此内核TTY子系统架构也一直没有发生变化。不过硬件的发展，导致了和硬件密切相关的驱动程序的大规模变化，为了适应这些变化，同时尽量兼容过去的程序（才不是因为不想改代码🤣），Linux/Unix提出了一个折衷的办法：&lt;strong>假设终端依旧存在&lt;/strong>。用软件设计一个中间层，对外接收来自“城头变幻大王旗”一般的各种外设的交互数据，然后转换成过去tty终端的数据形式，再提供给其他进程。对于其他进程而言，还是像过去一样和“某个终端”进行交互，只不过这个终端不再是物理终端，而是由程序“伪装”的&lt;strong>虚拟终端（Virtual Console or Virtual Terminal）&lt;/strong>。&lt;/p>
&lt;p>注：虽然Linux源代码中关于的终端模拟器的代码在tty目录下，但是一般不把终端模拟器作为tty子系统的一部分。&lt;/p>
&lt;p>上节中，我们介绍了内核中tty子系统是如何充当物理终端和操作系统交互的媒介，这节我们着重介绍一下再物理终端到虚拟终端的演变过程中，哪些部分发生了变化。新的逻辑结构图如下：&lt;/p>
&lt;p>&lt;img src="../images/virtual-terminal-text-mode.drawio.svg" alt="虚拟终端文本模式">&lt;/p>
&lt;p>数据流方面，从诞生到至今也没有太大变化，最大区别在于物理终端和计算器的半双工通信，变成了计算机和显示器、键盘、鼠标等外设的单工通信。在内部程序结构方面，由于外设是变化的源头，所以Linux操作系统侧最直接的变化就是&lt;strong>硬件驱动&lt;/strong>。物理终端分成两个部分后，显示器和键盘需要独立和计算机连接，显示器主要是通过VGA（Video Graphics Array）接口，键盘主要通过PS/2接口。&lt;/p>
&lt;p>键盘部分独立出来之后变化比较简单，只需要添加自己独立的驱动，这个驱动直接为终端模拟器提供用户输入字符以及控制指令。PS/2接口作为IBM专为交互外设设计的接口，目前已经慢慢的被更为通用的USB所取代，只有少部分的台式机仍然提供完整的PS/2键盘及鼠标接口。不过，由于USB接口对键盘无特殊调整下最大只能支持6键无冲突，而PS/2键盘接口可以支持所有按键同时而无冲突。现在大家追求的机械、无冲突键盘就是历史中曾经被放弃的产物，果然科技创新靠考古啊。&lt;/p>
&lt;p>显示器部分相对复杂一些。VGA中文翻译叫视频图像阵列，可是在Linux系统2.1版本之前，是图像输出支持的并不好，所以VGA显示器还有一个VGA text Mode，即输出的不是任意像素点而是规定好的字符点阵。典型地，支持文本模式的屏幕由一个个均匀的矩形栅格字符元组成，其中每一个字符元包含字符集中的一个字符点阵。文本模式下显示器只能显示字符集里的内容，不能显示图片、视频等多媒体内容。vga接口相连的计算机部件叫显示适配器（display adapter），这个物件就是各种显卡的统称了，只不过其内容还包括了相应的驱动程序。这个称呼我们至今还能在windows系统的设备管理器的里看到。点阵图示例如下（实际屏幕使用的点阵图会更加精细）&lt;/p>
&lt;p>&lt;img src="../images/%E5%AD%97%E6%AF%8D%E7%82%B9%E9%98%B5%E5%9B%BE.jpg" alt="字母点阵图">&lt;/p>
&lt;p>display (VGA) adapter会直接从一段内存（显存，当时二者还没有分离开）中读取字符数据，交由显示器渲染显示。这段内存由于是字符，不是像素数据，我们也可以通过工具直接查看。Linux的virtual console screen(vcs)设备就是指向这段字符内存，我们可以通过&lt;code>cat /dev/vcsX&lt;/code>查看，其中“X”表示所用tty X对应的数字。如果我们查看目前正在使用的tty1，例如&lt;code>sudo cat /dev/vcs1 &amp;gt; /tmp/foo&lt;/code>，然后用&lt;code>vim /tmp/foo&lt;/code>打开这个文件，就能够发现这个文件里的内容正是刚才屏幕上显示的内容！vcs设备（及其对应的内存）为终端模拟器扮演了过去物理终端显示器的角色。&lt;/p>
&lt;p>该场景下，终端模拟器由于使用VGA连接，又叫做VGA console。一般叫“console”的，都和电脑上自带可以直接操作电脑和能够显示系统信息的控制台有关。由于PC电脑的“个人”属性，默认每个PC都只有一人正在使用计算机，该用户也就直接使用console。Linux/Unix从设计之初，就是一个多用户操作系统，tty子系统除了为普通用户提供了串口驱动外，本来就都有为管理员操作console准备的console driver，只不过现在console driver不用连接实体控制台，而是连接虚拟终端软件（终端模拟器）。&lt;strong>从相互关系来看，虚拟终端对于tty子系统扮演的是物理终端，但是对于整个操作系统而言，虚拟终端只是个普通进程，因此虚拟终端和tty子系统间采用进程间通信方法，例如socket、管道，而非UART串口，因此，对应的tty设备也不用特地加一个“S”，直接用&lt;code>/dev/ttyX&lt;/code>即可&lt;/strong>。&lt;/p>
&lt;p>基于软件实现的虚拟终端数量不再受到物理硬件的限制，系统可以开启多个进程来表示多个虚拟终端，Linux系统中可以通过&lt;code>ctrl+alt+F1~F6&lt;/code>切换的tty1-tty6（&lt;code>/dev/tty1~/dev/tty6&lt;/code>）六个终端就是这个时期历史遗留的产物（在具有桌面环境的Linux发行版中，X Window Systemy一般在/dev/tty7上运行，也有把桌面终端放在tty1和tty2的比如Ubuntu，依各Linux发行版自己决定）。虚拟终端能够显示的字符行列数由其模拟的终端型号决定，并且可以根据自己的喜好切换，下图即为文本模式的虚拟终端，默认模拟的终端类型为linux。&lt;/p>
&lt;p>&lt;img src="../images/terminal_text_mode.png" alt="terminal_text_mode">&lt;/p>
&lt;p>由于虚拟终端是交互的主流方式之一，Linux/Unix刚开始处于性能和通用性了考虑，都是在内核中实现了终端模拟器，但是当我们需要终端模拟器有更灵活的功能而又不想乱动内核时（内核一个进程崩溃容易导致其他进程的连锁崩溃），如果我们让终端模拟程序运行在用户区，就需要&lt;strong>伪终端&lt;/strong>（pseudoterminal或pseudotty, PTY）。伪终端作为CLI交互方式的后起之秀，在后来tty子系统使用空间被X-windows等视窗系统不断挤压之时，成为坚守CLI的坚实城墙。&lt;/p>
&lt;h2 id="图形化崛起linux从文本迈向图像">图形化崛起——Linux从文本迈向图像&lt;/h2>
&lt;p>20世纪80年代末，计算机显示器已经逐渐从字符显示设备转变成了像素显示设备，它们不再只能显示键盘上字符内容，也不再受到UART传输能力的限制，而是像电视机一样能够显示各种各样的多媒体内容，显示高清化，接口也发展出HDMI、DVI等更高速接口。于是计算机开始被运用到越来越多的领域，除了传统的科学计算与信息通信，图像、视频、3D、设计、游戏等多媒体内容也开始运用计算机来开展工作；此外，命令行为主的CLI对于很多不熟悉计算机的从业人员而言，学习成本很高，也不能直观的理解操作的流程和意义，这导致PC电脑在很长时间都是专业人士使用的工具。计算机潜在的商业价值和难用而不普及的矛盾，让很多商业公司看到了巨大的利润，能解决这个矛盾的公司，比如微软、苹果，都成为了这个世界上最挣钱的公司之一。&lt;/p>
&lt;p>为了能让人们，更方便、直观地操作计算机，研究人员开始为程序提供图形化交互界面，用户只要通过移动光标、点击按钮、在特定位置输入内容就能很容易地操作程序。PC机上的第一个图形界面——Xerox Alto(并未商用，主要用于研究和大学)，其于1973年被施乐公司Xerox Palo Alto Research Center (PARC)所设计，从此，开启了计算机图形界面的新纪元，20世纪80末至90年代初，图形化界面设计经历了众多变迁，虽然距离完善的图形化操作系统（Graphical User Interface）还有距离，但是初具雏形的OS/2，Amiga Workbench，Windows 1.0-3.0还是受到的大众的热烈欢迎。&lt;/p>
&lt;p>图形化界面本质上也是shell的一种，只是其复杂程度比基于命令行的Bash，Tcsh高得多，需要图形学、优化理论、人体工程学、UI设计等一系列知识，还需要更加精细的内存管理、更加复杂的进程通信机制、更加人性化的交互设计。而在传统计算机、网络领域，程序员对基于命令行的Shell表现的已经足够满足了，且Linux在发布之后一直都以自由免费软件称著，主要靠社区开发者“用爱发电”，缺乏商业激励和图形化程序繁重的工作量，让Linux系统图形化交互界面的发展比商业公司确实慢了不少。&lt;/p>
&lt;p>为了实现图像领域的应用，Linux还是对CLI做了很多改进，第一个就是能让图片、pdf文档、视频能够在CLI界面中显示、处理。多媒体文件和文本类文件有着本质的区别，无法用某一字符集去描述多媒体文件，程序都是通过像素点的方式，拼出多媒体文件。通常显示一幅图片，其数据分为像素数和颜色位数两部分。如果使用最容易理解的RGB描述方法，一幅图画的一个像素点需要一个三元组（R，G，B）来描述，即红色成分R，绿色成分G和蓝色成分B，每种成分都由1字节（8bits）来细分。因此一个原始未经压缩的图像数据=宽像素数X高像素数X3字节。面对处理图像所带来的挑战，Linux在2.1.109 kernel正式引入了帧缓冲区(frambe buffer, fb)。最初它实现是为了允许内核在没有文本模式显示的Apple Macintosh等系统上模拟文本控制台，到后来甚至发展出了一个在内核空间中实现的称为FramebufferUI (fbui)的窗口系统，它提供了基本的 2D 窗口体验，并且占用的内存很少。使用framebuffer系统的结构图如下所示：&lt;/p>
&lt;p>&lt;img src="../images/virtual-terminal-pixel-mode.drawio.svg" alt="虚拟终端像素模式">&lt;/p>
&lt;p>fb系统起到了显示驱动的作用，可以代替传统的VGA driver，它在内存中开辟一片区域作为显存，其内容对应于屏幕上的界面显示，可以将其简单理解为屏幕上显示内容对应的缓存，修改Framebuffer中的内容，即表示修改屏幕上的内容，所以，直接操作Framebuffer可以直接从显示器上观察到效果。但Framebuffer并不是屏幕内容的直接的像素表示。Framebuffer实际上包含了几个不同作用的缓存，比如颜色缓存、深度缓存等，因此无法像查看virtual console screen一样查看framebuffer里面的内容。&lt;/p>
&lt;p>Linux中用设备&lt;code>/dev/fbX&lt;/code>指向这段内存，其中“X”代表一个数字。fb设备是Linux为显示设备提供的一个接口，把显存抽象后的一种设备，他允许上层应用程序在图形模式下直接对显示缓冲区进行读写操作。这种操作是抽象的，统一的，用户不必关心物理显存的位置、换页机制等等具体细节。物理实体相关的细节都是由Framebuffer设备驱动来完成的。&lt;/p>
&lt;p>相应地，使用framebuffer的终端模拟器叫做&lt;strong>帧缓冲区控制台(framebuffer console, fbcon)&lt;/strong>，它在具有VGA console全部文本模式功能的基础上，&lt;strong>增加了对图形特性的支持&lt;/strong>。fbcon支持高分辨率、不同字体类型、显示旋转、以及底层显卡能够实现的大多数功能。在x86架构中，由于存在其他更高效的图形化机制，fbcon是可选的，有些人甚至把它当作玩具。对于其他架构，它是唯一可用的文本或图形显示设备，例如在基于光盘或USB闪存盘启动的GNU/Linux系统，KNOPPIX，为了保证对不同硬件架构的支持就是用内核必备的framebuffer作为显示驱动，通常使用framebuffer的CLI终端，都会在启动时放一个Linux吉祥物Tux的图像标志，如下图：&lt;/p>
&lt;p>&lt;img src="../images/fbcon_KNOPPIX.png" alt="fbcon_KNOPPIX.png">&lt;/p>
&lt;p>此外，很多第三方应用也直接使用framebuffer在内存中的内容来显示多媒体文件，尤其在嵌入式Linux常见，一些常见的第三方应用如显示图片的fbi，显示pdf的fbgs，播放视频的mplayer等等，下图中我们分别举例使用fbi和fgbs来显示多媒体内容：&lt;/p>
&lt;p>&lt;img src="../images/fbconsole.png" alt="fbcon">&lt;/p>
&lt;p>除了framebuffer，Linux还有其他支持图形化的机制，如DMA，专业显卡驱动等。这些内容超出了本文阐述的范围，如果有想详细了解的读者，我推荐一个Linux图形化系统介绍的Youtube视频，从硬件到软件都有，&lt;a href="https://www.youtube.com/watch?v=wjAJmqwg47k">An Overview of the Linux and Userspace Graphics Stack , Paul Kocialkowski&lt;/a>，有条件的建议看看。&lt;/p>
&lt;p>第二个改变则更彻底，就是也想商业公司一样，提供图形化交互界面。Linux上的第一个“桌面”还不是桌面。相反，它们是运行在X窗口系统上的“窗口管理器window manager（WM）”。&lt;/p>
&lt;p>这里出现了两个关键词。第一个关键词：X窗口系统（X Window System，也常称为X11或X，天窗口系统）是一种以位图方式显示的软件窗口系统。最初是1984年麻省理工学院的研究，之后变成UNIX、类UNIX（包括Linux）、以及OpenVMS等操作系统所一致适用的&lt;strong>标准化软件工具包及显示架构的运作协议&lt;/strong>。现在几乎所有的操作系统都能支持与使用X。更重要的是，今日知名的桌面环境——GNOME和KDE也都是以X窗口系统为基础建构成的。&lt;/p>
&lt;p>理解X视窗系统有两点很关键：&lt;/p>
&lt;ol>
&lt;li>X 是一个“软件”而不是一个操作系统；&lt;/li>
&lt;li>X 是用来进行图形接口的执行与绘制；&lt;/li>
&lt;/ol>
&lt;p>X视窗系统从逻辑上主要分为三层：最底层的X Server（X服务器）主要处理输入/输出信息并维护相关资源，它接受来自键盘、鼠标的操作并将它交给X Client（X客户端）作出反馈，而由X Client传来的输出信息也由它来负责输出；最外层的X Client则提供一个完整的GUI界面，负责与用户的直接交互（KDE、Gnome等桌面管理器本质上都是一个X Client），而衔接X Server与X Client的就是X Protocol(X通讯协议)也称为X11协议，它的任务是充当这两者的沟通管道。X视窗系统与操作系统的关系如下图所示（完全独立于tty子系统）：&lt;/p>
&lt;p>&lt;img src="../images/x-window-system.drawio.svg" alt="x-window-system">&lt;/p>
&lt;p>从交互的流程来看，每当由输入操作改变桌面部件（如点击鼠标拖动窗口、关闭窗口等），输入设备驱动就会将信息交给X server，X server会通过X11协议将动作内容转递给相应的X client。X client将会改变自身状态并向X server发出一个重新绘画、渲染的请求；X server使用图形渲染机制（如DDX）完成图像的计算，交给Compositor绘制具体的图像内容。X server将绘制好的图像信息从Compositor的缓冲区更新到显示驱动的缓冲区，最终在显示器上出现新的内容。&lt;/p>
&lt;p>从系统架构来看，由于X视窗系统从刚开始阶段就是独立于操作系统设计的，因此对于Linux而言，X视窗系统也只算个普通软件，工作在用户区。X server作为图形界面的核心负责与Linux内核交互，这种用户区工作的模式虽然降低了性能，但是增加系统的稳定性。在图形化界面初期，由于其复杂的设计模式和开发人员经验不够丰富，图形交互界面的BUG层出不穷，像windows早期系统以图形化为核心的操作系统，出BUG导致整个系统崩溃、蓝屏的现象并不罕见。X server作为用户区进程，即使崩溃了也只是造成X client的关闭，不会影响Linux内核的运行，这也是Linux一直以稳定性称著的原因之一。&lt;/p>
&lt;p>我们在X window系统中，也标出了第二个关键词：窗口管理器window manager。它是为了方便X图形环境使用的一种特殊X client，其作用就是来管理其他所有窗口。窗口管理器也是图形化操作系统的雏形。&lt;/p>
&lt;p>当我们运行&lt;code>xterm&lt;/code>或&lt;code>xclock&lt;/code>之类的图形化程序，X client程序就会在一个窗口中打开该程序。窗口管理器可以跟踪窗口并进行基本的内部管理，例如让你可以来回移动窗口并将其最小化。其余的事情取决于你自己。你可以通过将程序名列在&lt;code>~/.xinitrc&lt;/code>文件中以在 X 开始时启动这些程序，但是通常，你会从&lt;code>xterm&lt;/code>中运行新程序。&lt;/p>
&lt;p>在1993年，最常见的窗口管理器是TWM。TWM相当简单，仅仅提供了基本的窗口管理功能。其效果如下图所示：&lt;/p>
&lt;p>&lt;img src="../images/TWM.png" alt="TWM">&lt;/p>
&lt;p>图中的三个窗口分别是&lt;code>xterm&lt;/code>、&lt;code>xclock&lt;/code>以及&lt;code>EMacs&lt;/code>。它们是三个独立的窗口，之间无法相互交互。默认的X视窗系统运行在&lt;code>tty7&lt;/code>。&lt;/p>
&lt;p>虽然，Linux后来也发展出了FVWM95和其他窗口管理器，但核心问题仍然存在：它们并不是真正的桌面。它只是能够管理一堆窗口管理器，仅此而已。使用图形用户界面的Linux应用程序（基本上意味着它们是X应用程序）看起来形态各异且工作方式也不同。除了有些X窗口系统提供的简单的“纯文本”复制/粘贴功能外，你不能从一个应用程序复制和粘贴到另一个应用程序里。Linux真正需要的是在其图形用户界面中进行彻底的重新打造，以创建它的第一个桌面。&lt;/p>
&lt;h2 id="desktop问鼎">Desktop问鼎&lt;/h2>
&lt;p>自诞生以来，Linux都被普遍认为是以命令行（CLI）交互为主的操作系统，大部分是因为Linux/UNIX的tty子系统在终端设备变革的大潮中日久弥坚，即使经历了不少改造，动了根本的改变是基本没有的。虽然，此时的Linux系统已经能够以图形化界面的方式提供一部分程序的交互，但是最大的问题还没有解决：&lt;strong>不好用&lt;/strong>。&lt;/p>
&lt;p>在1995年，微软公司发布的Windows 95对Windows 3.x进行重新设计，整个GUI焕然一些，许多经典设计沿用至今，例如在每个窗口上加上了关闭按钮，也是最著名的“开始”按钮第一次出现。Windows 95系统一经推出就受到了市场和研究界的双重赞誉，叫好也叫座。这是Microsoft历史上最大的一步，从此走上了帝国之路。&lt;/p>
&lt;p>然而，Windows 95的价格也十分美丽，$209.95的售价也让很多想使用图形化操作系统的用户再三踌躇。受到windows 95的启发，在1996年，Matthias Ettrich 有感于 X windows之下Linux应用程序体验不一致的困扰。他想使找个更易于使用的图形环境，而且更重要的是，他想让所有东西都“集成”在一起，就像Windows 95的桌面一样。&lt;/p>
&lt;p>Matthias开始了K桌面环境K Desktop Environment（KDE）的工作。那个“K”代表着 “Kool”。但是 KDE 这个名字也意味着可以类似通用桌面环境Common Desktop Environment（CDE）的做法，而CDE 是“大 Unix”世界的标准（尽管到了1996年，CDE已经有点过时了）。KDE 1.0于1998年7月完成，KDE是Linux向前迈出的一大步。最终，Linux有了一个真正的桌面，集成了应用程序和更多现代的桌面图标。KDE的设计与Windows 95并无不同。屏幕底部有一个任务栏，它提供了相当于Windows 95 的“开始”菜单以及一些应用程序的快捷键，KDE还支持虚拟桌面。正在运行的应用程序通过位于屏幕顶部单独的任务栏的按钮表示。&lt;/p>
&lt;p>&lt;img src="../images/KDE1.0.png" alt="KDE">&lt;/p>
&lt;p>从此，Linux的图像化界面发展就进入了快车道。&lt;/p>
&lt;p>然而，KDE并不能算是完全的自由软件，因为其使用了Trolltech的Qt工具套件库，而Qt并不是以自由软件的许可证进行分发的。面对这种情况，Miguel de Icaza和Federico Mena 于 1997年开始开发新的Linux桌面上。这个新项目被称为GNOME，即GNU网络对象模型环境GNU Network Object Model Environment的缩写。GNOME旨在成为一个完全自由的软件，并使用了一个不同的工具套件库——来自GIMP图像编辑器的GTK。GTK从字面上的意思GIMP工具套件GIMP Tool Kit。当GNOME 1.0终于在1999年发布时，Linux又多了一个现代化的桌面环境。但是GNOME 1.0的做的十分匆忙，BUG层出不穷，甚至不如KDE 1.0的测试版。好在GNOME之后的版本有了大量改进，使它逐渐趋于稳定。&lt;/p>
&lt;p>关于linux的图形化历程我推荐大家可以看看这篇文章：&lt;a href="https://linux.cn/article-12068-1.html">《Linux 桌面史话》&lt;/a>，其纷繁复杂的过程远超过了本文的讨论范围。&lt;/p>
&lt;p>即使，Linux的桌面操作系统有了长远的进步，总体而言，Linux的桌面系统和微软的Windows还是有不少差距，支持图形化的Linux软件，则表现的更不尽如人意，似乎Linux的GUI的完成度，总是让人下不了决心完全拥抱它。&lt;/p>
&lt;p>然而，Linux的一个远亲，Unix系统的一个变体，2001年发布的Mac OS似乎解决这个问题。这个图形化操作系统是如此的完善，优雅，以至于大多数使用Mac OS的人都不会接触它的CLI，即使它的CLI做的也很好。受到Mac OS的激励，Linux的一个桌面发行版Ubuntu也在2004年正式问世。Ubuntu基于开源自由的Debian发行版和GNOME桌面环境，目标在于为一般用户提供一个最新同时又相当稳定，主要以自由软件建构而成的操作系统。除此之外，越来越多的程序员在追求功能和性能的同时，将“颜值就是正义”也纳入了考虑范围，更多的优雅的桌面发行版如Centos，Mint Linux，elementary OS，deepin等等如雨后春笋一般迅速冒出生长。这也给了很多用户拥抱Linux桌面操作系统的信心。在2020年，Ubuntu系统已经占到所有桌面操作系统市场份额的1.04%，是所有Linux桌面发行版中最高的一个。下图是Unbuntu 20.04的桌面：&lt;/p>
&lt;p>&lt;img src="../images/Ubuntu-20.04-cat.png" alt="Ubuntu-20.04-cat.png">&lt;/p>
&lt;p>当前的形势来看，图形化操作系统的大潮已经势不可挡，使用文本模式交互也变成了特定专业人员的选项。我们从下面这张操作系统市场份额图中可以看出，图形化操作系统已经稳稳地占据了目前绝大多数市场份额。图形化操作系统如安卓、Windows、iOS、OS X占据绝大多数用户的屏幕，纯Linux只是最底下那条趴趴着的红线，还是众多桌面发行版与命令行发行版共享的份额。这里特别提一下Android系统，目前安卓系统已经超越windows成为使用人数最多的操作系统，它是一个基于Linux内核与其他开源软件的开放源代码的移动操作系统，由谷歌成立的开放手持设备联盟持续领导与开发，本质上也算是Linux的一个衍生发行版，所以从广义上来讲，Linux已经成为使用人数最多的操作系统也没错呢。&lt;/p>
&lt;p>实际生活中，由于图形化用户界面（Graphic User Interface, GUI）的普及，现在绝大多数人基本上没有使用过CLI，即便是很多计算机专业的本科生，也不用CLI。即使在Linux CLI的使用人群中，使用传统text console的人很少了，越来越多的人使用伪终端，例如Xterm来代替传统终端或在远程ssh连接中使用伪终端。&lt;/p>
&lt;p>&lt;img src="../images/os_combined-ww-monthly-200901-202111.png" alt="os_combined-ww-monthly-200901-202111.png">&lt;/p>
&lt;h2 id="伪终端cli交互的薪火相传">伪终端——CLI交互的薪火相传&lt;/h2>
&lt;p>我们之前的文章中，一直由提到虚拟终端是在&lt;strong>Linux内核&lt;/strong>中实现的模拟物理终端的程序，一般由内核的终端模拟器完成。当我们需要终端模拟器有更灵活、更花里胡哨的功能而又不想乱动内核时（内核一个进程崩溃容易导致其他进程的连锁崩溃），我们也可以让&lt;strong>终端模拟程序运行在用户区&lt;/strong>，如果我们让终端模拟程序运行在用户区，就需要&lt;strong>伪终端&lt;/strong>（pseudoterminal或pseudotty, PTY）。PTY是描述并非单个设备文件，而是&lt;strong>一对可异步双向通信的虚拟字符设备&lt;/strong>，这对伪终端设备为主从关系分别为 PTY master(ptmx)和 PYT slave(pts)。master端是更贴近硬件的一端，提供复用、slave端会话管理等功能，slave端则是模拟标准文字终端的&lt;strong>一套接口&lt;/strong>。之所以叫它“伪”终端，是因为伪终端不像虚拟终端拥有一个实实在在的终端模拟器，而是对外表现的像终端一样的空壳，壳子里的内容需要用户区运行的终端模拟器，甚至远程的终端模拟器去填。当前PTY有BSD（master名&lt;code>/dev/pty[p-za-e][0-9a-f]&lt;/code>，salve名&lt;code>/dev/tty[p-za-e][0-9a-f]&lt;/code>）和UNIX 98(master名&lt;code>/dev/ptmx&lt;/code>，salve名&lt;code>/dev/pts/*&lt;/code>)两种命名与实现方式，但是目前Linux大多数都用的是UNIX98标准。&lt;/p>
&lt;p>从用户空间的程序来看，使用虚拟终端tty还是伪终端的slave，pts都是一样的。从内核的角度来看，pty系统是个不与内核其他模块交互的数据转发系统，一端是ptmx，与Gnomes terminal server，sshd和TMUX等用户空间应用程序连接，另一端是pts也是直接和用户空间程序交互。而TTY系统则和内核关系密切，其一端与内核的终端模拟器连接，内核终端模拟器的另一端则与内核中特定的硬件驱动连接，如键盘和显示器。&lt;/p>
&lt;p>此外，如果系统有多个交互需求，伪终端系统使用ptmx和pts合力完成多个伪终端的会话管理。而TTY系统是靠内核终端模拟器创建多个虚拟终端，并维护各个虚拟终端的会话关系。因此，ptmx和内核终端模拟器都需要负责维护会话和转发数据包。不同的是，伪终端系统将终端模拟器部分交给了用户区软件去做，从而方便实现更多的扩展功能，从功能角度简单来说，内核终端模拟器=ptmx+（用户区终端模拟器-扩展功能）。&lt;/p>
&lt;p>但由于PTY运行在用户区，更加安全和灵活，同时仍然保留了传统TTY驱动的功能，因此我们目前在Linux桌面发行版中调出来的命令行工具、telnet、ssh、VNC远程连接几乎都是伪终端。伪终端常在三种情形下使用，一是在GUI中希望使用CLI进行更方便的操作，如使用xterm，gnome-terminal；二是远程终端连接，如telnet、ssh等；第三个情形算是第二点的扩展，即用tmux，screen之类软件，让程序在后台运行，就算ssh连接断开，正在运行的程序也不会终止。&lt;/p>
&lt;p>关于这三种场景，我花了很长时间来画他们的总体结构图，每一场景我都用一种颜色标识出来，接下来我将根据三个场景分别阐释。&lt;/p>
&lt;p>&lt;img src="../images/pty-all.drawio.svg" alt="伪终端总体结构图">&lt;/p>
&lt;p>我们先来说说三个场景共性的部分——PTY子系统。PTY子系统的核心功能与TTY子系统一致，本质是TTY子系统的同一代码，调用了不同功能函数，只是现在使用的是伪终端，所以叫PTY子系统。例如，在传统物理终端连接时，tty驱动调用的是串口驱动；在使用虚拟终端时，tty驱动调用的是console驱动；现在使用伪终端时，则调用的伪终端驱动。它比传统的TTY子系统增加了伪终端的Master端，ptmx，这是因为没有了内核中的终端模拟器提供多路复用和会话管理，就让ptmx完成上述功能；PTY子系统产生的接口设备叫pts，存储在&lt;code>/dev/pts/X&lt;/code>，“X”表示一个数字，由ptmx管理，通常有几个伪终端连接，&lt;code>/dev/pts/&lt;/code>路径下就有几个数字表示的伪终端设备，pts在对用户程序的表现和&lt;code>/dev/ttyX&lt;/code>一致。&lt;/p>
&lt;h3 id="gui中的cli">GUI中的CLI&lt;/h3>
&lt;p>Linux桌面系统的普及为程序员们提供了更加方便的系统管理和编程环境，GUI操作直观，配置方式易懂，却也掩盖不了操作流程复杂，需要打开多个窗口，鼠标+键盘反复交互的问题。有时候只是修改一个配置就需要找很久对应的按钮和操作框；一方面GUI突出了用户集中使用的重点功能，另一方面GUI隐藏了普通用户容易误用的系统设置。恰恰这些设置，对系统管理员和计算机从业者而言是很重要的。有些程序员开始怀念其CLI的简洁、直接与高效。为了能够在GUI中使用传统的CLI，终端模拟器开始作为用户区软件被广泛地接受。&lt;/p>
&lt;p>目前Linux中最流行的终端模拟器应该要算xterm了，它能为X Window System上创建标准虚拟终端，用户可以在同一个显示器上开启许多xterm，每一个都为其中运行的进程提供独立的输入输出（一般来说此进程是shell）。此外有许多xterm变体可用，大多数的X虚拟终端都是从xterm的变体起步的。&lt;/p>
&lt;p>我们以Ubuntu 20.04这个桌面操作系统为例，之前我们说过桌面操作系统中的终端模拟器相当于X 视窗系统中的一个X client，所以这里也不例外。我们用下图中蓝色的部分表示GUI中的伪终端相关模块。&lt;/p>
&lt;p>内核部分，硬件以及驱动部分和普通的GUI是一样的；PTY子系统的变化本节开头已经说过了。用户空间中，x server与x client的模式也没用变化，作为GUI中用户区终端模拟器的Gnome terminal server作为x client打开，负责处理和转化用户交互信息，Gnome terminal server持有PTY master的文件描述符&lt;code>/dev/ptmx&lt;/code>,并负责监听键盘事件，通过PTY master接收或发送字符到 PTY slave，还会在屏幕上绘制来自PTY master的字符输出。&lt;strong>每当我们通过Gnome terminal server打开一个新的CLI，它就会fork出一个进程来模拟一个终端（如xterm，vt100等），并执行bash命令变成一个CLI shell，以&lt;code>/dev/pts/X&lt;/code>为标准输入输出，因此模拟出来的CLI终端都是Gnome terminal server的子进程。Gnome terminal server接收到的数据会交给内核的PTY子系统，并由相应的pts接口提供给shell，实现数据流交互&lt;/strong>。&lt;/p>
&lt;p>需要指出，Gnome terminal server父进程和shell子进程之间并不会直接传递信息，首先因为数据模式不同，来自Gnome terminal server的信息需要经过PTY子系统驱动转换和line discipline的进一步解码成CLI能够接受的模式；同时复用PTY子系统大大降低了Gnome terminal server程序的复杂度，由其是IPC方面的内容；另一方面这种结构兼容了Linux一直以来的系统结构，在稳定性和成熟度方面也更加可靠。对终端模拟器的程序编写者来说，维护和CLI的数据交互也并非终端模拟器的职责，终端模拟器只是一个模拟器，它的任务只是用软件生成一个“虚拟的终端”，一个复杂的terminal server不符合UNIX系统 &lt;strong>keep it simple, stupid (KISS)&lt;/strong> 的设计哲学。&lt;/p>
&lt;p>&lt;img src="../images/pty-gui.drawio.svg" alt="pty-gui">&lt;/p>
&lt;p>我们以实际的例子，看看在 terminal 执行一个命令的全过程（当前进程的终端是&lt;code>/dev/pts/0&lt;/code>）。&lt;/p>
&lt;ol>
&lt;li>我们在桌面启动终端程序gnome-terminal，它向gnome terminal server请求ptmx建一个会话，并通过x server把gnome-terminal的图像绘制在显示器上；&lt;/li>
&lt;li>gnome terminal server先fork启动子进程，再执行&lt;code>bash&lt;/code>命令；&lt;/li>
&lt;li>&lt;code>bash&lt;/code>的标准输入、标准输出和标准错误都设置为PTY slave，即&lt;code>/dev/pts/0&lt;/code>；&lt;/li>
&lt;li>gnome terminal server监听键盘事件，并将输入的字符发送到ptmx；&lt;/li>
&lt;li>PTY子系统执行传统TTY子系统的buffer，line discipline，字符回显的功能；当按下回车键时，tty I/O core负责将缓冲的数据复制到PTY slave，&lt;code>/dev/pts/0&lt;/code>；&lt;/li>
&lt;li>&lt;code>bash&lt;/code>接收来自&lt;code>/dev/pts/0&lt;/code>的标准输入，执行输入的命令，在将结果写入给标准输入（标准错误）&lt;code>/dev/pts/0&lt;/code>；&lt;/li>
&lt;li>tty I/O core将&lt;code>/dev/pts/0&lt;/code>中的结果复制给ptmx的buffer；&lt;/li>
&lt;li>gnome-terminal循环从ptmx读取字节，并交给x server绘制到用户界面上。&lt;/li>
&lt;/ol>
&lt;h3 id="远程连接操作系统">远程连接操作系统&lt;/h3>
&lt;p>伪终端另一个重要应用场景就是使用网络远程登录Linux主机。这个场景的伪终端应用出现远早于GUI场景下的伪终端，甚至早于GUI的出现。CLI远程登录的主要手段就是telnet和ssh。由于telnet是使用明码来传送数据，安全性不够好，已经逐渐被舍弃，所以当前几乎所有的CLI远程登录都是使用ssh。&lt;/p>
&lt;p>ssh登录需要远程主机上运行ssh服务器，比如openssh server，其守护进程一般为&lt;code>sshd&lt;/code>，负责远程主机ssh协议封装、加密解密、维护ssh会话等功能。但&lt;code>ssd&lt;/code>不再监听键盘事件，以及在屏幕上绘制输出结果，而是通过TCP连接，向ssh client发送或接收字符。在远程登录场景下，&lt;code>sshd&lt;/code>取代terminal server担任fork子进程并执行bash命令生成CLI shell的功能，而终端模拟功能则交给本地终端模拟器执行。&lt;/p>
&lt;p>硬件方面，由于使用网络连接取代键盘屏幕的直连，因此对应硬件换成了网卡（network interface card, NIC）。内核中，硬件驱动改成了网卡驱动（network interface card driver, NIC driver），数据经过网卡驱动后，还要通过 TCP/IP协议栈层层解包（返回给客户端时则是层层封装数据包），最后将应用层数据交付给对应的应用进程，如&lt;code>sshd&lt;/code>。本地客户端程序担任终端模拟器的角色并启动ssh client，通过互联网或以太网等网络连接与远程主机传输信息。&lt;/p>
&lt;p>&lt;strong>从&lt;code>sshd&lt;/code>往后的部分和本地直接使用键盘、显示器连接没有区别&lt;/strong>，驱动、协议栈以及应用层软件&lt;code>sshd&lt;/code>已经屏蔽了底层的区别，为上层提供了统一的接口。&lt;/p>
&lt;p>&lt;img src="../images/pty-ssh.drawio.svg" alt="pty-ssh">&lt;/p>
&lt;p>简单梳理一下远程终端是如何执行命令的，此处PTS为&lt;code>/dev/pts/1&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>用户在客户端的终端模拟器中输入&lt;code>ssh username@hostIP&lt;/code>命令，经过网络到达远程主机，通过网卡驱动、TCP/IP协议栈解包后，内核通过ssh协议对应端口（默认22），找到监听的&lt;code>sshd&lt;/code>进程。&lt;/li>
&lt;li>&lt;code>sshd&lt;/code>接受ssh请求后，向内核申请创建 PTY，获得一对设备文件描述符。让&lt;code>sshd&lt;/code>持有ptmx，&lt;code>sshd&lt;/code> fork 出的子进程&lt;code>bash&lt;/code>持有PTY slave。&lt;code>bash&lt;/code>的标准输入、标准输出和标准错误都设置为了&lt;code>/dev/pts/1&lt;/code>。完成会话建立。&lt;/li>
&lt;li>用户端数据通过&lt;code>sshd&lt;/code>传输给PTY子系统，到达PTY slave，&lt;code>/dev/pts/1&lt;/code>。&lt;/li>
&lt;li>之后过程和&lt;a href="#gui%E4%B8%AD%E7%9A%84cli">GUI中的CLI&lt;/a>章节中4-7步一样，只不过&lt;code>sshd&lt;/code>取代了gnome terminal server的作用；&lt;/li>
&lt;li>&lt;code>sshd&lt;/code>循环从ptmx读取字节，并通过之间建立的TCP连接发送给 ssh client。&lt;/li>
&lt;/ol>
&lt;p>注意1：在客户端，我们在屏幕上看到的所有字符都来自于远程服务器。包括我们输入的内容，也是远程服务器上的 line discipline 应用&lt;code>echo&lt;/code>规则的结果，将这些字符回显了回来。表面看似简单的在远程终端上执行了一条命令，实际上底下确是波涛汹涌。&lt;/p>
&lt;p>注意2：当我们查看进程时，细心的人可能会发现，&lt;code>sshd&lt;/code>并非只是简单的fork了一个&lt;code>bash&lt;/code>子进程，而是&lt;code>sshd───sshd───sshd───bash&lt;/code>这种结构。第一个&lt;code>sshd&lt;/code>是负责监听的进程，第二个&lt;code>sshd&lt;/code>是fork出来实际和ssh client建立连接的子进程，第三个&lt;code>sshd&lt;/code>是ssh中基于安全性考虑使用&amp;quot;privilege separation&amp;quot;的结果，最后一个&lt;code>bash&lt;/code>才是真正的CLI shell。由于这种细节不影响我们整体的讨论，所以只是在这里提一下。&lt;/p>
&lt;h3 id="后台保障运行的tmux">后台保障运行的Tmux&lt;/h3>
&lt;p>本节开头已经说过，第三个场景时第二个场景的扩展。当我们使用ssh远程连接时，常遇到一个问题：所有的工作默认都是从&lt;code>sshd&lt;/code>产生的子进程中启动，即它们属于同一个会话。当作为根进程的&lt;code>sshd&lt;/code>一旦被终止，那么它产生的子进程，全部会关闭。为了解决这个问题，&lt;code>sshd&lt;/code>与会话可以&amp;quot;解绑&amp;quot;，将它们彻底分离：&lt;code>sshd&lt;/code>关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&amp;quot;绑定&amp;quot;其他&lt;code>sshd&lt;/code>进程。这就是&lt;code>Tmux&lt;/code>以及类似应用&lt;code>screen&lt;/code>的主要作用。&lt;/p>
&lt;p>&lt;strong>Tmux的作用机理很简单，就是改变当前会话的根进程&lt;/strong>。当我们启动Tmux client的时候，并不是在原来&lt;code>sshd--bash&lt;/code>的进程关系中启动新的CLI shell，而是通知Tmux server，让它fork子进程，然后执行&lt;code>bash&lt;/code>,然后Tmux client通过IPC方式（Unix domain socket）连到这个&lt;code>bash&lt;/code>上，这样这个新的&lt;code>bash&lt;/code>就从&lt;code>sshd&lt;/code>中独立出来，即使ssh断开连接，也只是Unix domain socket连接断了，Tmux server启动的&lt;code>bash&lt;/code>及其子进程不受影响。当新的ssh连接建立后，可以通过&lt;code>tmux attach&lt;/code>命令再建立新的Unix domain socket连接。&lt;/p>
&lt;p>Tmux server的作用和之前场景中&lt;code>sshd&lt;/code>的作用类似，但是不同处理复杂的ssh协议。&lt;/p>
&lt;p>&lt;img src="../images/pty-tmux.drawio.svg" alt="pty-tmux">&lt;/p>
&lt;p>Tmux场景下，数据流程会稍微复杂一下，我们根据上图梳理一下。从&lt;code>sshd&lt;/code>启动子进程shell 3的&lt;code>Bash&lt;/code>之后开始。&lt;/p>
&lt;ol start="0">
&lt;li>如上图红色部分，ssh client和&lt;code>sshd&lt;/code>建立网络连接，并产生Bash Shell 3，其使用PTY slave，&lt;code>/dev/pts/2&lt;/code>作为标准输入输出。此阶段和&lt;a href="#%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">远程连接操作系统&lt;/a>中的过程一致。&lt;/li>
&lt;li>当&lt;code>sshd&lt;/code>子进程的&lt;code>bash&lt;/code>执行&lt;code>tmux&lt;/code>后，shell 3的&lt;code>bash&lt;/code> fork出子进程，并运行tmux client作为其前台应用，占用&lt;code>/dev/pts/2&lt;/code>，此时bash shell 3和&lt;code>/dev/pts/2&lt;/code>的逻辑连接被中断，&lt;code>/dev/pts/2&lt;/code>和tmux client连接；&lt;/li>
&lt;li>由于tmux client并非一个shell，因此它唤醒了tmux server（如果当前tmux server未启动，则启动tmux server），让其fork出一个子进程，并执行&lt;code>bash&lt;/code>命令，形成shell 4，准备供给tmux client使用；&lt;/li>
&lt;li>tmux server通知PTY子系统，tmux server持有ptmx，PTY子系统生成新的伪终端接口&lt;code>/dev/pts/3&lt;/code>交由shell 4持有，作为其标准输入输出设备，此时shell 4只能和tmux server连通；&lt;/li>
&lt;li>tmux client和tmux server建立Unix domain socket连接，tmux client将来自&lt;code>sshd&lt;/code>(本质来自ssh client)的数据通过该socket连接传递给tmux server，并接收其返回的信息；&lt;/li>
&lt;li>tmux server通过PTY子系统将数据加工、传递给&lt;code>/dev/pts/3&lt;/code>，即shell 4的标准输入输出；&lt;/li>
&lt;li>shell 4从标准输入输出&lt;code>/dev/pts/3&lt;/code>中读取来自用户的命令，执行后再返回给&lt;code>/dev/pts/3&lt;/code>；&lt;/li>
&lt;li>返回的信息经PTY子系统处理后交付给tmux server，并通过之前建立socket连接传输回tmux client。&lt;/li>
&lt;li>tmux client收到数据后将消息返回给占用的&lt;code>/dev/pts/2&lt;/code>，同样通过PTY子系统，转发给&lt;code>sshd&lt;/code>；&lt;/li>
&lt;li>&lt;code>sshd&lt;/code>像之前一样，循环从ptmx读取字节，并通过之间建立的TCP连接发送给 ssh client。&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，父进程和子进程之间通常不直接传递数据，sshd server和tmux server数据传输流程相似，都通过PTY子系统传递数据，且两者互不干涉；使用Tmux的场景下，每个单项数据流都要经过PTY子系统&lt;strong>两次&lt;/strong>。&lt;/p>
&lt;p>从数据流程中，我们也能看出，当ssh连接断开时，&lt;code>sshd&lt;/code>侧关闭的只是shell 3和socket连接，实际上运行程序的shell 4并不受影响。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>与用户交互的终端经历了从物理终端到虚拟终端再到伪终端的演变，总的趋势是硬件通用化，功能软件化；交互的形式上，也从文字CLI终端向图形GUI终端不断发展，但是我们不能否认CLI也一直有它独到的优势，才能在半个世纪的剧变中生生不息。现在，输入输出一体化终端如触摸屏方兴未艾，3D交互、甚至脑机接口也渐入人们的视野，或许现在常用的交互的方式未来也只能像物理终端一样进入博物馆，最终最适合的才会留下来，“适者生存”不仅仅适用于自然界的生物呢。&lt;/p>
&lt;h2 id="参考文章及资料">参考文章及资料&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://xie.infoq.cn/article/a6153354865c225bdce5bd55e">https://xie.infoq.cn/article/a6153354865c225bdce5bd55e&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.computerhope.com/history/index.htm">https://www.computerhope.com/history/index.htm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developpaper.com/overview-of-linux-tty-pts-differences/">https://developpaper.com/overview-of-linux-tty-pts-differences/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.feyrer.de/NetBSD/ttys.html">https://www.feyrer.de/NetBSD/ttys.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://linux.cn/article-12068-1.html">https://linux.cn/article-12068-1.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.linusakesson.net/programming/tty/">https://www.linusakesson.net/programming/tty/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/dog250/article/details/78766716">https://blog.csdn.net/dog250/article/details/78766716&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kernel.org/doc/html/latest/fb/index.html">https://www.kernel.org/doc/html/latest/fb/index.html&lt;/a>&lt;/li>
&lt;li>Wikipedia&lt;/li>
&lt;/ol></description></item><item><title>linux-特殊设备文件</title><link>https://surprisedcat.github.io/projectnotes/linux-%E7%89%B9%E6%AE%8A%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-%E7%89%B9%E6%AE%8A%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E4%BC%AA%E8%AE%BE%E5%A4%87">伪设备&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#devnull">&lt;code>/dev/null&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#devzero">&lt;code>/dev/zero&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#devfull">&lt;code>/dev/full&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#devrandom%E5%92%8Cdevurandom">&lt;code>/dev/random&lt;/code>和&lt;code>/dev/urandom&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87">标准输入输出设备&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#devstdin%E6%88%960">&lt;code>/dev/stdin&lt;/code>或0&lt;/a>&lt;/li>
&lt;li>&lt;a href="#devstdout%E6%88%961">&lt;code>/dev/stdout&lt;/code>或1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#devstderr%E6%88%962">&lt;code>/dev/stderr&lt;/code>或2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">终端设备&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%BB%8E%E7%89%A9%E7%90%86%E7%BB%88%E7%AB%AF%E5%88%B0%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF">从物理终端到虚拟终端&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BC%AA%E7%BB%88%E7%AB%AF">伪终端&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%B2%E8%A1%8C%E7%AB%AF%E5%8F%A3%E7%BB%88%E7%AB%AF">串行端口终端&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%94%99%E8%AF%AF%E8%AE%BE%E5%A4%87%E5%92%8C%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E7%9A%84%E5%85%B3%E7%B3%BB">标准输入输出（错误）设备和终端设备的关系&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="linux-特殊设备文件---omit-in-toc---">linux-特殊设备文件&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在Linux系统中，一切皆为文件，设备也不例外，会被描述为设备文件，比如常见硬盘会被描述为&lt;em>支持随机存取和寻址&lt;/em>的块设备文件，键盘终端会被描述成&lt;em>不支持随机存取&lt;/em>的字符设备文件。此外，Linux操作系统还有一些特殊的设备，例如伪设备、标准输入输出设备、终端设备等等，它们为操作系统提供了硬件的抽象化功能，简化的系统结构提升了系统架构的可理解性。&lt;/p>
&lt;h2 id="伪设备">伪设备&lt;/h2>
&lt;p>在类Unix操作系统中，设备节点并不一定要对应物理设备。没有这种对应关系的设备是&lt;strong>伪设备或虚拟设备&lt;/strong>。而对程序而言，这些伪拟设备文件则会被当成真实的文件对待。程序可以向伪设备请求数据（当具有可读权限时），所得到的数据将由操作系统提供。注意，这些数据并不是从磁盘上读取到的，而是由操作系统动态生成的。程序也可以向伪设备写入数据（当具有可写权限时），程序会根据伪设备的特性相应地处理写入的数据。部分经常使用到的伪设备包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/dev/null&lt;/code>：接受并丢弃所有输入；。&lt;/li>
&lt;li>&lt;code>/dev/zero&lt;/code>：产生连续的NUL字元的串流(数值为0)。&lt;/li>
&lt;li>&lt;code>/dev/full&lt;/code>：永远在被填满状态的设备。&lt;/li>
&lt;li>&lt;code>/dev/random&lt;/code>：产生一个虚假随机的任意长度字元串流。(Blocking，阻塞式)&lt;/li>
&lt;li>&lt;code>/dev/urandom&lt;/code>：产生一个虚假随机的任意长度字元串流。(Non-Blocking，非阻塞式)&lt;/li>
&lt;/ul>
&lt;h3 id="devnull">&lt;code>/dev/null&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/null
&lt;span class="ln">2&lt;/span>crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">3&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 null
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于以上伪设备，我们&lt;code>/dev/null&lt;/code>应该算是最常见的了。&lt;code>/dev/null&lt;/code>可称为空设备，它会接受任何写入的内容并把它们统统扔掉（但报告写入操作成功），就像黑洞一样，&lt;strong>通常用于丢弃不需要的数据输出&lt;/strong>。在程序员行话，尤其是Unix行话中，&lt;code>/dev/null&lt;/code>又被称为位桶(bit bucket)或者黑洞(black hole)。从权限来看，&lt;code>/dev/null&lt;/code>还是可读的，读取它则会立即得到一个&lt;code>EOF&lt;/code>(END Of File的缩写，表示终止符)标志。&lt;/p>
&lt;p>总结：所有写入&lt;code>\dev\null&lt;/code>的内容都会永远丢失，而尝试从它那儿读取内容则什么也读不到。&lt;/p>
&lt;h3 id="devzero">&lt;code>/dev/zero&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/zero
&lt;span class="ln">2&lt;/span>crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">5&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/zero
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在类UNIX 操作系统中，&lt;code>/dev/zero&lt;/code>是一个特殊的文件，当你读它的时候，它会提供无限的空字符(NULL, ASCII NUL, 0x00)。它的典型用法包括用它提供的字符流来覆盖信息，以及产生一个特定大小的空白文件等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 创建一个名为test-dev-zero、大小为1 MiB的文件，以ASCII码为“0”(NULL)的字符填充：&lt;/span>
&lt;span class="ln">2&lt;/span>$ dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>test-dev-zero &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span>
&lt;span class="ln">3&lt;/span>1024+0 records in
&lt;span class="ln">4&lt;/span>1024+0 records out
&lt;span class="ln">5&lt;/span>&lt;span class="m">1048576&lt;/span> bytes &lt;span class="o">(&lt;/span>1.0 MB, 1.0 MiB&lt;span class="o">)&lt;/span> copied, 0.00280503 s, &lt;span class="m">374&lt;/span> MB/s
&lt;span class="ln">6&lt;/span>$ ls -lh test-dev-zero
&lt;span class="ln">7&lt;/span>-rw-r--r-- &lt;span class="m">1&lt;/span> lelouch lelouch 1.0M Dec &lt;span class="m">6&lt;/span> 22:34 test-dev-zero
&lt;span class="ln">8&lt;/span>&lt;span class="c1"># 彻底覆盖某一分区的数据（低格）,谨慎操作&lt;/span>
&lt;span class="ln">9&lt;/span>$ dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/dev/&amp;lt;destination partition&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>与&lt;code>/dev/null&lt;/code>类似，&lt;code>/dev/zero&lt;/code>也可以作为一个数据接收点，所有写往&lt;code>/dev/zero&lt;/code>将返回成功，没有其他影响；&lt;code>/dev/null&lt;/code>也是一样，但是&lt;code>/dev/null&lt;/code>更常用。&lt;/p>
&lt;h3 id="devfull">&lt;code>/dev/full&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/full
&lt;span class="ln">2&lt;/span>crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">7&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/full
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意啊&lt;code>/dev/full&lt;/code>与&lt;code>/dev/null&lt;/code>只有一个字母之差，不要打错或看错了。&lt;code>/dev/full&lt;/code>也是可读写的，任何进程在向其写入时总是返回设备无剩余空间（错误码为ENOSPC， Error No Space的缩写），在Debian的返回结果如下所示；通常被用来&lt;strong>测试程序在遇到磁盘无剩余空间错误时的行为&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> &amp;gt; /dev/full
&lt;span class="ln">2&lt;/span>-bash: echo: write error: No space left on device
&lt;/code>&lt;/pre>&lt;/div>&lt;p>读取时则与&lt;code>/dev/zero&lt;/code>一样，可返回无限多的空字符（NULL, ASCII NUL, 0x00）。它的典型用法和&lt;code>/dev/zero&lt;/code>包括用它提供的字符流来覆盖信息，以及产生一个特定大小的空白文件等，但是正常情况下，用&lt;code>/dev/zero&lt;/code>更多。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 创建一个名为test-dev-full、大小为1 MiB的文件，以ASCII码为“0”(NULL)的字符填充：&lt;/span>
&lt;span class="ln">2&lt;/span>$ dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/full &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>test-dev-full &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span>
&lt;span class="ln">3&lt;/span>1024+0 records in
&lt;span class="ln">4&lt;/span>1024+0 records out
&lt;span class="ln">5&lt;/span>&lt;span class="m">1048576&lt;/span> bytes &lt;span class="o">(&lt;/span>1.0 MB, 1.0 MiB&lt;span class="o">)&lt;/span> copied, 0.00283009 s, &lt;span class="m">371&lt;/span> MB/s
&lt;span class="ln">6&lt;/span>$ ls -lh test-dev-full
&lt;span class="ln">7&lt;/span>-rw-r--r-- &lt;span class="m">1&lt;/span> lelouch lelouch 1.0M Dec &lt;span class="m">6&lt;/span> 22:38 test-dev-full
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="devrandom和devurandom">&lt;code>/dev/random&lt;/code>和&lt;code>/dev/urandom&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/random /dev/urandom
&lt;span class="ln">2&lt;/span>crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">8&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/random
&lt;span class="ln">3&lt;/span>crw-rw-rw- &lt;span class="m">1&lt;/span> root root 1, &lt;span class="m">9&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/urandom
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>/dev/random&lt;/code>和&lt;code>/dev/urandom&lt;/code>是Linux系统中提供的随机性的伪设备，这两个设备的任务，是&lt;strong>提供永不为空的随机字节数据流&lt;/strong>。很多解密程序与安全应用程序（如SSH Keys,SSL Keys等）需要它们提供的随机数据流。读取这个两个设备都会返回一堆随机乱码。&lt;/p>
&lt;p>这两个设备的差异在于：&lt;code>/dev/random&lt;/code>的random pool依赖于系统中断，因此在系统的中断数不足时，&lt;code>/dev/random&lt;/code>设备会一直封锁，尝试读取的进程就会进入等待状态，直到系统的中断数充分够用, &lt;code>/dev/random&lt;/code>设备可以保证数据的随机性。&lt;code>/dev/urandom&lt;/code>不依赖系统的中断，也就不会造成进程忙等待，但是数据的随机性也不高。如果不是研究特定问题，一般是用不到这两个设备的。&lt;/p>
&lt;h2 id="标准输入输出设备">标准输入输出设备&lt;/h2>
&lt;p>还有一类常用的特殊设备就是&lt;strong>标准输入输出设备&lt;/strong>，它们和我们的操作最息息相关。所有程序默认的输入都来自&lt;strong>标准输入设备&lt;/strong>，所有回显的内容都会输出到&lt;strong>标准输出设备&lt;/strong>，而所有的操作异常、错误信息都会给到&lt;strong>标准错误设备&lt;/strong>。可以说标准输入输出设备是和我们直接交互的设备，简单说，我们通过标准输入设备给程序输入数据，再从标准输出（错误）设备得知程序运算的结果。它们三个分别表示为三个设备文件：标准输入设备&lt;code>/dev/stdin&lt;/code>，标准输出设备&lt;code>/dev/stdout&lt;/code>，标准错误设备&lt;code>/dev/stderr&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/std*
&lt;span class="ln">2&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/stderr -&amp;gt; /proc/self/fd/2
&lt;span class="ln">3&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/stdin -&amp;gt; /proc/self/fd/0
&lt;span class="ln">4&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Nov &lt;span class="m">18&lt;/span> 18:57 /dev/stdout -&amp;gt; /proc/self/fd/1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的结果来看，这三个设备分别了链接到三个文件描述符(file descriptor, fd)，习惯上，标准输入（standard input）的文件描述符是 &lt;strong>0&lt;/strong>，标准输出（standard output）是 &lt;strong>1&lt;/strong>，标准错误（standard error）是 &lt;strong>2&lt;/strong>。尽管这种习惯并非Unix内核的特性，但是因为一些 shell 和很多应用程序都使用这种习惯，因此，基本常见内核都遵循这种习惯。&lt;/p>
&lt;h3 id="devstdin或0">&lt;code>/dev/stdin&lt;/code>或0&lt;/h3>
&lt;p>STDIN标准输入是指输入至程序（进程）的资料、文件等数据流，此数据流默认从标准输入设备获取，最常见的标准输入设备是键盘，在以&lt;code>ssh&lt;/code>远程登陆的linux中也会指向虚拟终端pts。需要指出，并不是所有程序都需要输入，如dir或ls程序（显示一个目录中的文件名）运行时不用任何输入。&lt;/p>
&lt;ul>
&lt;li>默认终端登录：/dev/stdin -&amp;gt; /proc/self/fd/0 -&amp;gt; /dev/tty1&lt;/li>
&lt;li>SSH登录：/dev/stdin -&amp;gt; /proc/self/fd/0 -&amp;gt; /dev/pts/0&lt;/li>
&lt;/ul>
&lt;h3 id="devstdout或1">&lt;code>/dev/stdout&lt;/code>或1&lt;/h3>
&lt;p>STDOUT（fd:1）标准输出是指程序输出资料、数据、图像的数据流，标准输出的默认对应设备是终端（这是个广阔的概念，linux中以tty指代），在以&lt;code>ssh&lt;/code>远程登陆的linux中也会指向虚拟终端pts。需要指出：并非所有程序都要求输出。如mv或ren程序在成功完成时是沉默的。&lt;em>Linux的设计理念有一条即是没有消息就是好消息&lt;/em>。&lt;/p>
&lt;ul>
&lt;li>默认终端登录：/dev/stdout -&amp;gt; /proc/self/fd/1 -&amp;gt; /dev/tty1&lt;/li>
&lt;li>SSH登录：/dev/stdout -&amp;gt; /proc/self/fd/1 -&amp;gt; /dev/pts/0&lt;/li>
&lt;/ul>
&lt;h3 id="devstderr或2">&lt;code>/dev/stderr&lt;/code>或2&lt;/h3>
&lt;p>STDERR（fd:2）标准错误是另一输出流，用于输出错误消息或诊断。它独立于标准输出，且可以&lt;strong>分别&lt;/strong>被重定向。常见的默认目的则为启始这个程序的终端（和STDOUT一致）。&lt;/p>
&lt;ul>
&lt;li>默认终端登录：/dev/stderr -&amp;gt; /proc/self/fd/2 -&amp;gt; /dev/tty1&lt;/li>
&lt;li>SSH登录：/dev/stderr -&amp;gt; /proc/self/fd/2 -&amp;gt; /dev/pts/0&lt;/li>
&lt;/ul>
&lt;p>我们发现不管是通过终端还是ssh登录，最终标准输入、输出、错误设备都会被定位到同一个设备，&lt;code>/dev/tty1&lt;/code>或&lt;code>/dev/pts/0&lt;/code>，这都是linux使用虚拟终端的结果，linux使用虚拟终端来同一管理这些数据流和相应设备的驱动、协议等。下一节我们就介绍终端设备，例如tty与pts。&lt;/p>
&lt;h2 id="终端设备">终端设备&lt;/h2>
&lt;p>Linux的终端设备是与我们直接交互的设备，我们这里仅介绍以命令行为主的文字终端设备。终端设备，或TTY设备是一类特殊的字符设备，所有可以被用来当作控制终端的设备都可以被称为终端设备，目前常见的包括&lt;strong>虚拟终端、串口和伪终端&lt;/strong>。&lt;/p>
&lt;h3 id="从物理终端到虚拟终端">从物理终端到虚拟终端&lt;/h3>
&lt;p>计算机在早期都是庞大、复杂且昂贵的，即使发展到20世纪80，90年代，一台个人电脑（PC）依旧是很罕见的，在Linux诞生的1991年，一台便宜的Apple Macintosh PowerBook的价格是&lt;strong>2,299美元&lt;/strong>，要知道那可是1991年的2,299美元，当年中国人民的人均GDP才333美元。所以在计算机发展早期，大多用户是通过物理终端（外设）连接到大型计算机或中型计算机的，共享一台计算机。来看看著名的IBM 308X系列计算机（以下房间中所有设备都是IBM 3081计算机的一部分）：
&lt;img src="../images/IBM_3081.jpg" alt="IBM_3081.jpg">
由于早期的计算机都是多用户共享的，而每个用户需要一套单独的外设（电传机，teletype，简称tty以及显示器）去连接主机，因此系统中就要有相应的tty终端对接程序，Linux中保留的可以通过&lt;code>ctrl+alt+F1~F6&lt;/code>切换的tty1-tty6（&lt;code>/dev/tty1~/dev/tty6&lt;/code>）六个终端就是这个时期历史遗留的产物（在具有桌面环境的Linux发行版中，X Window Systemy一般在/dev/tty7上运行，也有把桌面终端放在tty1和tty2的比如Ubuntu，依各Linux发行版自己决定）。除了通过tty连接的终端，早期电脑上还自带一个可以直接操作和能够显示系统信息的控制台（console），在linux中也有一个对应的设备&lt;code>/dev/console&lt;/code>。&lt;/p>
&lt;p>那时tty和console还是有很大的区别的，很多系统配置只能通过console修改，tty只能执行特定的用户程序，得到用户程序返回的信息。这同样说明，控制台是计算机的基本设备，而终端是附加外设。&lt;/p>
&lt;p>这个设计也保留到了如今的Linux操作系统中，与终端不相关的信息，比如内核消息，后台服务消息，只显示到控制台上，但不会显示到终端上。比如在启动和关闭Linux系统时，我们可以在控制台上看到很多的内核信息，而如果通过telnet、ssh等方式连接上Linux系统，这些开关机信息是不会显示的。&lt;/p>
&lt;p>后来，由于终端硬件设备越来越多样化，厂商也各不相同，于是Linux就将对接外设的部分单独拎出来模块化并设计了名叫TTY的子系统，对于每一个终端，TTY driver都会创建一个TTY设备与它对应，如果有多个终端连接过来，那么看起来就是这个样子的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span> +----------------------------------------+
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">|&lt;/span> TTY 驱动 &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">|&lt;/span> +-------+ &lt;span class="p">|&lt;/span> +------------------------+
&lt;span class="ln"> 5&lt;/span>+------------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--------&amp;gt;&lt;span class="p">|&lt;/span> 用户进程 A &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">|&lt;/span> 终端 A &lt;span class="p">|&lt;/span>&amp;lt;---------&lt;span class="p">|&lt;/span>-&amp;gt;&lt;span class="p">|&lt;/span> tty1 &lt;span class="p">|&lt;/span> +------------+
&lt;span class="ln"> 7&lt;/span>+------------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--------&amp;gt;&lt;span class="p">|&lt;/span> 用户进程 B &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">|&lt;/span> +-------+ &lt;span class="p">|&lt;/span> +------------------------+
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">|&lt;/span> +-------+ &lt;span class="p">|&lt;/span> +------------------------+
&lt;span class="ln">11&lt;/span>+------------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--------&amp;gt;&lt;span class="p">|&lt;/span> 用户进程 C &lt;span class="p">|&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">|&lt;/span> 终端 B &lt;span class="p">|&lt;/span>&amp;lt;---------&lt;span class="p">|&lt;/span>-&amp;gt;&lt;span class="p">|&lt;/span> tty2 &lt;span class="p">|&lt;/span> +------------+
&lt;span class="ln">13&lt;/span>+------------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--------&amp;gt;&lt;span class="p">|&lt;/span> 用户进程 D &lt;span class="p">|&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">|&lt;/span> +-------+ &lt;span class="p">|&lt;/span> +------------------------+
&lt;span class="ln">15&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln">16&lt;/span> +----------------------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>后来随着计算机的不断发展，teletype，console这些特定的外设逐渐消失，我们不再需要专门的终端设备了，每个机器都有自己的键盘和显示器，每台机器还可以是其它机器的终端，即远程的操作通过ssh来实现，但是内核TTY驱动这一架构一直没有发生变化，我们想要和系统中的进程进行I/O交互，还是需要通过TTY设备，于是出现了各种&lt;strong>终端模拟软件&lt;/strong>，最终物理终端都变成了虚拟终端埋进了内核中。我们的输入和程序的输出都通过终端模拟软件转变为&lt;strong>过去的tty设备信息流&lt;/strong>与内核交互，可以称之为隐藏在内核深处的计算机历史痕迹😆。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span> +-----------------------------------------+
&lt;span class="ln"> 2&lt;/span> 内核 &lt;span class="p">|&lt;/span> 用户空间 &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">|&lt;/span> +-----+ +------+ &lt;span class="p">|&lt;/span> +---------+
&lt;span class="ln"> 4&lt;/span>+--------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--&amp;gt;&lt;span class="p">|&lt;/span> tty1 &lt;span class="p">|&lt;/span>&amp;lt;-&lt;span class="p">|&lt;/span>---&amp;gt;&lt;span class="p">|&lt;/span> Shell &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">|&lt;/span> 键 盘 &lt;span class="p">|&lt;/span>---&amp;gt;&lt;span class="p">|&lt;/span> 终端 &lt;span class="p">|&lt;/span> +------+ &lt;span class="p">|&lt;/span> +---------+
&lt;span class="ln"> 6&lt;/span>+--------&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 模拟 &lt;span class="p">|&lt;/span>&amp;lt;--&amp;gt;&lt;span class="p">|&lt;/span> tty2 &lt;span class="p">|&lt;/span>&amp;lt;-&lt;span class="p">|&lt;/span>---&amp;gt;&lt;span class="p">|&lt;/span> Shell &lt;span class="m">2&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">|&lt;/span> 显示器 &lt;span class="p">|&lt;/span>&amp;lt;---&lt;span class="p">|&lt;/span> 软件 &lt;span class="p">|&lt;/span> +------+ &lt;span class="p">|&lt;/span> +---------+
&lt;span class="ln"> 8&lt;/span>+--------+ &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--&amp;gt;&lt;span class="p">|&lt;/span> tty3 &lt;span class="p">|&lt;/span>&amp;lt;-&lt;span class="p">|&lt;/span>---&amp;gt;&lt;span class="p">|&lt;/span> Shell &lt;span class="m">3&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">|&lt;/span> +-----+ +------+ &lt;span class="p">|&lt;/span>--------------+
&lt;span class="ln">10&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln">11&lt;/span> +-----------------------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要指出，软件仿真终端和tty是运行在内核态的。过去的&lt;code>/dev/console&lt;/code>被默认连接到当前登录的虚拟终端（&lt;code>/dev/tty0&lt;/code>也同样指向当前的虚拟终端，但是&lt;code>/dev/tty&lt;/code>指向的当前任意终端，既可以是虚拟终端也可使伪终端）。我们可以通过把终端用&lt;code>ctrl+alt+F6&lt;/code>切换到tty6做以下尝试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">#/dev/tty Current TTY device&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">#/dev/console System console, defalut current virtual console&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">#/dev/tty0 Current virtual console&lt;/span>
&lt;span class="ln"> 4&lt;/span>$ tty
&lt;span class="ln"> 5&lt;/span>/dev/tty6
&lt;span class="ln"> 6&lt;/span>$ sudo bash -c &lt;span class="s1">&amp;#39;echo &amp;#34;Hello from tty6&amp;#34; &amp;gt; /dev/console&amp;#39;&lt;/span>
&lt;span class="ln"> 7&lt;/span>Hello from tty6
&lt;span class="ln"> 8&lt;/span>$ sudo bash -c &lt;span class="s1">&amp;#39;echo &amp;#34;Hello from tty6&amp;#34; &amp;gt; /dev/tty&amp;#39;&lt;/span>
&lt;span class="ln"> 9&lt;/span>Hello from tty6
&lt;span class="ln">10&lt;/span>$ sudo bash -c &lt;span class="s1">&amp;#39;echo &amp;#34;Hello from tty6&amp;#34; &amp;gt; /dev/tty0&amp;#39;&lt;/span>
&lt;span class="ln">11&lt;/span>Hello from tty6
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这三个设备都得到了重定向的消息，说明它们三个都被连接到了当前终端。但是，如果用&lt;em>伪终端&lt;/em>，只有&lt;code>sudo bash -c 'echo &amp;quot;Hello from tty6&amp;quot; &amp;gt; /dev/tty'&lt;/code>会有回显。例如，我们用Ubuntu自带的伪终端尝试结果如下：&lt;/p>
&lt;p>&lt;img src="../images/%E4%BC%AA%E7%BB%88%E7%AB%AF%E5%9B%9E%E6%98%BE.png" alt="伪终端回显">&lt;/p>
&lt;p>伪终端和虚拟终端有什么不同呢？我们下面看看伪终端。&lt;/p>
&lt;h3 id="伪终端">伪终端&lt;/h3>
&lt;p>当我们需要终端模拟器有更灵活的功能而又不想动用内核时，我们也可以让&lt;strong>终端模拟程序运行在用户区&lt;/strong>。如果我们让终端模拟程序运行在用户区，就需要&lt;strong>伪终端&lt;/strong>（pseudoterminal或pseudotty, PTY）。PTY是描述并非单个设备文件，而是&lt;strong>一对可双向通信的虚拟字符设备&lt;/strong>，称为 PTY master(ptmx)和 PYT slave(pts)。当前PTY有BSD（master名&lt;code>/dev/pty[p-za-e][0-9a-f]&lt;/code>，salve名&lt;code>/dev/tty[p-za-e][0-9a-f]&lt;/code>）和UNIX 98(master名&lt;code>/dev/ptmx&lt;/code>，salve名&lt;code>/dev/pts/*&lt;/code>)两种命名与实现方式，但是目前大多数都用的是UNIX98标准。&lt;/p>
&lt;p>从用户空间的程序来看，使用虚拟终端还是伪终端都是一样的。此外，如果系统由多个伪终端连接，ptmx和pts合力完成多个伪终端的会话管理。但由于PTY运行在用户区，更加安全和灵活，同时仍然保留了TTY驱动的功能，因此我们目前在Linux桌面发行版中调出来的命令行工具、telnet、ssh、VNC远程连接几乎都是伪终端。常用的伪终端有xterm，gnome-terminal，以及远程终端ssh等。&lt;/p>
&lt;p>伪终端的具体工作流程比较复杂，如果想具体了解可以参考2010年的《The Linux Programming Interface》的64章。对一般用户而言，我们只需要知道他是一种运行在用户空间的tty就可以了~&lt;/p>
&lt;h3 id="串行端口终端">串行端口终端&lt;/h3>
&lt;p>串行端口终端是基于RS-232接口连接到主机的终端设备，作为最古老的设备接口之一，早期的外设一般都使用串行端口终端。同样的，它也是一类字符设备，用设备描述符&lt;code>/dev/ttySX&lt;/code>表示,&amp;quot;X&amp;quot;代表一数字。现在串口协议一般用在嵌入式单片机或工业机上，大多数个人电脑现在连串口接口都没保留。下图以纪念我单片机焊板子的生活：&lt;/p>
&lt;p>&lt;img src="../images/RS232.jfif" alt="RS232串口">&lt;/p>
&lt;h3 id="标准输入输出错误设备和终端设备的关系">标准输入输出（错误）设备和终端设备的关系&lt;/h3>
&lt;p>默认情况下，标准输入输出（错误）设备会被链接到&lt;strong>当前正在使用的终端设备&lt;/strong>，可以是虚拟设备也可以是伪设备，重要点是正在操作哪个终端设备。&lt;/p></description></item><item><title>devops-自动化部署自己的博客</title><link>https://surprisedcat.github.io/projectnotes/devops-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/devops-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description>
&lt;h2 id="自动化部署自己的博客---omit-in-toc---">自动化部署自己的博客&lt;!-- omit in toc -->&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#%E6%80%9D%E8%B7%AF%E6%B1%87%E6%80%BB">思路汇总&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%80%89%E5%AE%9A%E9%9C%80%E8%A6%81git%E7%AE%A1%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9">选定需要git管理的内容&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#gitignore%E6%B7%BB%E5%8A%A0%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95">gitignore添加忽略文件失效的处理方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8">在云服务器上搭建git服务器&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%88%9B%E5%BB%BAgit%E7%94%A8%E6%88%B7%E5%92%8C%E5%BA%93%E6%96%87%E4%BB%B6">创建Git用户和库文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B7%BB%E5%8A%A0ssh%E5%85%AC%E9%92%A5">添加ssh公钥&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9C%AC%E5%9C%B0%E5%BA%93%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9A%84%E5%9C%B0%E5%9D%80">本地库设置远程库的地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95">远程仓库的工作区更新方法&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%8E%A8%E9%80%81%E7%BB%99%E8%A3%B8%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%BD%A2">推送给裸仓库的情形&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%8E%A8%E9%80%81%E7%BB%99%E6%99%AE%E9%80%9A%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%BD%A2">推送给普通远程仓库的情形&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E8%AE%BE%E7%BD%AEpost-receive-hook%E5%AE%8C%E6%88%90%E5%86%85%E5%AE%B9%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0">设置post-receive hook完成内容自动更新&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E8%A3%B8%E4%BB%93%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0">裸仓库的更新&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%99%AE%E9%80%9A%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC">普通远程仓库的更新脚本&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8hugo%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7">使用HUGO作为博客生成工具&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E4%BF%AE%E6%94%B9hugo%E5%8D%9A%E5%AE%A2%E7%9A%84clarity%E4%B8%BB%E9%A2%98">修改Hugo博客的clarity主题&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%8A%E4%BC%A0%E4%BF%AE%E6%94%B9%E5%A5%BD%E7%9A%84hugo%E5%8D%9A%E5%AE%A2">上传修改好的Hugo博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99">使用Jenkins自动化部署网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%8E%A8%E9%80%81%E5%88%B0github%E5%B9%B6%E7%94%9F%E6%88%90gitpages">推送到Github并生成Gitpages&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="思路汇总">思路汇总&lt;/h2>
&lt;p>我自己分几个文件夹写了一些笔记和资料，现在想用Hugo部署到自己的云主机上同时同步到github上，利用gitpage在生成一个blog，也就是自动生成两个同步的blog，初步体验一下DevOps流程。目前本地使用win10，带有git；云主机是Debian 10，有golang 1.15.14环境。主要使用了git hooks和jenkins，以及rsync作为补充。&lt;/p>
&lt;p>&lt;img src="../images/devops.png" alt="DevOps">&lt;/p>
&lt;p>总体思路：&lt;/p>
&lt;ol>
&lt;li>由于本地文件夹都放在一起，首先通过编辑.gitignore文件，指定需要git管理的几个文件。&lt;/li>
&lt;li>将自己的云服务器作为一个git remote仓库，管理自己的这些资料和笔记&lt;/li>
&lt;li>在云服务器的git repo中设置hook，将这些本来在不同文件夹中笔记和资料&lt;del>复制到特定文件夹中&lt;/del>。注:用hook复制的方法并不好，因为当文件名称修改或被删除时，就无法实现文件的同步。
&lt;ul>
&lt;li>改成在远程主机上再设置一个git仓库，设置post-receive hook通知jenkins将提交的内容pull到云主机新的仓库中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建立hugo文件到git仓库的软链接，不能使用软链接的用rsync同步过去，当hugo编译的时候实际使用的是git仓库中的文件&lt;/li>
&lt;li>使用jenkins自动构建部署云服务器上的Hugo blog&lt;/li>
&lt;li>将完整的编译好的Hugo blog推送到GitHub，利用GitPages生成网站。&lt;/li>
&lt;/ol>
&lt;p>为什么不设置两个remote repo分别推送？怕自己疏忽，造成大量的冲突处理问题。&lt;/p>
&lt;p>为什么不先推送到GitHub再用Github Actions推送到云上？自己觉得在云上折腾比较方便，就当云是测试环境，GitHub是发布环境吧。&lt;/p>
&lt;h2 id="选定需要git管理的内容">选定需要git管理的内容&lt;/h2>
&lt;p>我们在有很多文件/文件夹的地方执行&lt;code>git init .&lt;/code>时，会有大量不需要的文件也被放入待添加空间，我们需要先创建一个&lt;code>.gitignore&lt;/code>文件筛选出我们需要的文件。比如，我们需要保留images，学习笔记，工程笔记，网页资料四个文件夹，其他全部不要，则&lt;code>.gitignore&lt;/code>文件可以写成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 先忽略跟文件下所有文件，开头使用/防止递归&lt;/span>
&lt;span class="ln"> 2&lt;/span>/*
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># 取反所有需要git管理的文件&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># images图片文件夹&lt;/span>
&lt;span class="ln"> 5&lt;/span>!/images
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 笔记文件夹：学习笔记，工程笔记&lt;/span>
&lt;span class="ln"> 7&lt;/span>!/学习笔记
&lt;span class="ln"> 8&lt;/span>!/工程笔记
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 资料文件夹，已提前都转为网页格式&lt;/span>
&lt;span class="ln">10&lt;/span>!/网页资料
&lt;span class="ln">11&lt;/span>&lt;span class="c1"># .gitignore本身&lt;/span>
&lt;span class="ln">12&lt;/span>!.gitignore
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后查看目前状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ git status
&lt;span class="ln"> 2&lt;/span>On branch master
&lt;span class="ln"> 3&lt;/span>No commits yet
&lt;span class="ln"> 4&lt;/span>Untracked files:
&lt;span class="ln"> 5&lt;/span> &lt;span class="o">(&lt;/span>use &lt;span class="s2">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> .gitignore
&lt;span class="ln"> 7&lt;/span> images/
&lt;span class="ln"> 8&lt;/span> 学习笔记/
&lt;span class="ln"> 9&lt;/span> 工程笔记/
&lt;span class="ln">10&lt;/span> 网页资料/
&lt;span class="ln">11&lt;/span>nothing added to commit but untracked files present &lt;span class="o">(&lt;/span>use &lt;span class="s2">&amp;#34;git add&amp;#34;&lt;/span> to track&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>没有问题，接下来正常流程，添加进git本地库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ git add .
&lt;span class="ln">2&lt;/span>......
&lt;span class="ln">3&lt;/span>$ git commit -m &lt;span class="s2">&amp;#34;首次将images，学习笔记，工程笔记，网页资料四个文件夹添加进repo&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>......
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是初次使用git，还要先配置用户信息，这一点很重要，因为每一个Git提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改。比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ git config --global user.name &lt;span class="s2">&amp;#34;John Doe&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>$ git config --global user.email johndoe@example.com
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 然后查看现有的全局信息，已有用户信息&lt;/span>
&lt;span class="ln">4&lt;/span>$ git config --list
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gitignore添加忽略文件失效的处理方法">gitignore添加忽略文件失效的处理方法&lt;/h3>
&lt;p>如果项目开始的时候没有将一些无关文件配置进&lt;code>.gitignore&lt;/code>里面,导致文件已经进行跟踪了，但是目前想把这些文件添加到&lt;code>.gitignore&lt;/code>文件中，但是发现没有效果。&lt;strong>这是因为&lt;code>.gitignore&lt;/code>对已被&lt;code>git&lt;/code>管理的文件无效&lt;/strong>。在这种情况下，必须使用&lt;code>git rm --cached &amp;lt; file name &amp;gt;&lt;/code>这个命令来移除对这个文件的跟踪，然后将不想被跟踪的文件添加到&lt;code>.gitignore&lt;/code>文件里面就可以了。&lt;/p>
&lt;h2 id="在云服务器上搭建git服务器">在云服务器上搭建git服务器&lt;/h2>
&lt;p>由于git是完全分布式设计，本质上，各个git库之间是没有主次之分的（各个库之间实际上都可以互相pull/push）。因此，在云服务器上搭建一个git服务器和客户端安装git过程上没有区别。在win 10 上安装git安装包（&lt;strong>包括git bash，它有一个奇葩设计之后再说&lt;/strong>），在Debian 10上使用&lt;code>sudo apt install git&lt;/code>安装。我们“人为决定”让云服务器上的git repo作为“公共库”，本地主机上的作为工作环境。&lt;/p>
&lt;h3 id="创建git用户和库文件">创建Git用户和库文件&lt;/h3>
&lt;p>在云服务器上，我们最好再添加一个专用git用户（不添加也可以，URL中git@domain.com:port或git@ip:port就是git作为用户名，如果你用的是别的用户，比如jack，那么就用jack@domain.com:port）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 在云服务器上&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ sudo adduser git
&lt;span class="ln"> 3&lt;/span>......... &lt;span class="c1"># 这里会设定git的密码，要记住&lt;/span>
&lt;span class="ln"> 4&lt;/span>.........
&lt;span class="ln"> 5&lt;/span>.........
&lt;span class="ln"> 6&lt;/span>$ &lt;span class="nb">cd&lt;/span> /srv &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mkdir gitblogs.git &lt;span class="c1"># 未来把/srv/gitblogs.git作为库位置，一般git库都以.git作为结尾&lt;/span>
&lt;span class="ln"> 7&lt;/span>$ sudo chown -R git:git gitblogs.git &lt;span class="c1"># 把所属用户从root改成git&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ su - git &lt;span class="c1"># 带 - 符号表示环境变量也跟着切换&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 如果把git设置成非登录用户，则以下操作用root执行，再把文件拥有者和组改成git&lt;/span>
&lt;span class="ln">10&lt;/span>.......... &lt;span class="c1"># 输入git用户密码&lt;/span>
&lt;span class="ln">11&lt;/span>$ id &lt;span class="c1"># 实际id号码可能有区别&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>1001&lt;span class="o">(&lt;/span>git&lt;span class="o">)&lt;/span> &lt;span class="nv">gid&lt;/span>&lt;span class="o">=&lt;/span>1001&lt;span class="o">(&lt;/span>git&lt;span class="o">)&lt;/span> &lt;span class="nv">groups&lt;/span>&lt;span class="o">=&lt;/span>1001&lt;span class="o">(&lt;/span>git&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有的用&lt;code>useradd git&lt;/code>创建新用户，这样只是创建了一个最小用户结构，里面很多设置、环境变量得自己弄，比较麻烦。自己也没那么多安全性讲究（包括但不限于nonlogin设置），就不那么麻烦了，直接&lt;code>sudo adduser git&lt;/code>搞定。下面我们要在云端建立存储内容的仓库，有两种方式：一是建立裸库，二是建立普通库来实现同步。建立裸库之后，里面什么都没有，即使push内容之后也不会显示到工作区，也无法进行操作，只是单纯的一个存储仓库，需要在云端建立一个中转普通仓库来读取内容；建立普通库可以不用再在云端建立中转库，但是需要post-receive钩子来实现内容更新。我这里更推荐第一种。&lt;/p>
&lt;p>下面是初始化裸库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /srv/gitblogs.git
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 远程服务器初始化仓库&lt;/span>
&lt;span class="ln">3&lt;/span>$ git init . --bare
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是初始化普通库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /srv/gitblogs.git
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 远程服务器初始化仓库&lt;/span>
&lt;span class="ln">3&lt;/span>$ git init .
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 允许向普通库push&lt;/span>
&lt;span class="ln">5&lt;/span>$ git config receive.denyCurrentBranch ignore
&lt;/code>&lt;/pre>&lt;/div>&lt;p>详细说明如下：&lt;/p>
&lt;p>（1）我们可以用&lt;code>git init .&lt;/code>建立一个普通库，而非裸库。当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库。当你创建一个裸库时，在工作目录下，只有一个.git目录，&lt;strong>裸库是没有工作区的&lt;/strong>！库仅包含记录着版本历史的文件。如果建立的是普通库，由于有工作区，可以直接把hugo博客内容的软连接建立到普通库的文件中，但是git不鼓励直接操作远程仓库的内容，所以我推荐在云上建立裸库后，在建立第二个普通库作为中转。&lt;/p>
&lt;p>（2）自Git 1.6.2版以来，Git默认不会让你推送到非裸库。这是因为&lt;code>git push&lt;/code>命令仅更新远程存储库上的分支和HEAD引用。&lt;strong>它不会更新非裸机中的工作区副本、暂存区和版本指针&lt;/strong>。因此我们让git需要忽略这个要求，即&lt;code>git config receive.denyCurrentBranch ignore&lt;/code>。此外，由于工作区也不会自动更新，我们后面会使用post-receive hook来更新工作区内容。&lt;/p>
&lt;h3 id="添加ssh公钥">添加ssh公钥&lt;/h3>
&lt;p>首先，保证&lt;strong>服务端&lt;/strong>是允许通过公钥登陆，在&lt;code>/etc/ssh/sshd_config&lt;/code>中，去掉公钥登录相关的注释符。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 通过公钥登录，如果需要就去掉前面的注释符&lt;/span>
&lt;span class="ln">2&lt;/span>PubkeyAuthentication yes
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 指定存放客户端ssh公钥的文件的位置&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Expect .ssh/authorized_keys2 to be disregarded by default in future.&lt;/span>
&lt;span class="ln">5&lt;/span>AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次，在&lt;strong>客户端生成公私钥对&lt;/strong>，win 10可以用cmd或git bash生成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 生成公私钥对，下面一路回车即可&lt;/span>
&lt;span class="ln">2&lt;/span>$ ssh-keygen -t rsa
&lt;span class="ln">3&lt;/span>Generating public/private rsa key pair.
&lt;span class="ln">4&lt;/span>Enter file in which to save the key &lt;span class="o">(&lt;/span>++++++++++&lt;span class="o">)&lt;/span>:
&lt;span class="ln">5&lt;/span>Created directory &lt;span class="s1">&amp;#39;++++++++++&amp;#39;&lt;/span>.
&lt;span class="ln">6&lt;/span>Enter passphrase &lt;span class="o">(&lt;/span>empty &lt;span class="k">for&lt;/span> no passphrase&lt;span class="o">)&lt;/span>:
&lt;span class="ln">7&lt;/span>Enter same passphrase again:
&lt;span class="ln">8&lt;/span>Your identification has been saved in ++++++++++/id_rsa.
&lt;span class="ln">9&lt;/span>Your public key has been saved in ++++++++++/id_rsa.pub.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>'++++++++++'指的是公私钥对存放的位置（Windows用户在C:\用户\“用户名”\.ssh目录下可以看到系统的.ssh公钥id_rsa.pub），打开该位置，然后将&lt;code>id_rsa.pub&lt;/code>文件中的内容复制出来，放到&lt;strong>服务端&lt;/strong>的&lt;code>.ssh/authorized_keys&lt;/code>文件中(没有就在此位置新建一个)，即可通过公钥进行clone、push和pull操作。&lt;/p>
&lt;blockquote>
&lt;p>也可不添加公钥，每次使用git用户的密码进行clone、push和pull操作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="本地库设置远程库的地址">本地库设置远程库的地址&lt;/h3>
&lt;p>由于为了平衡简单和安全，我们不用HTTP和Git协议（没装git-daemon），而选用SSH协议作为本地端和云服务器段的传输。SSH协议用于为Git提供远程读写操作，是远程写操作的标准服务，在智能HTTP协议出现之前，甚至是写操作的唯一标准服务。&lt;/p>
&lt;p>对于拥有shell登录权限的用户帐号，可以用下面的语法访问Git版本库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1">#语法1： &lt;/span>
&lt;span class="ln">2&lt;/span>$ ssh://&lt;span class="o">[&lt;/span>&amp;lt;username&amp;gt;@&lt;span class="o">]&lt;/span>&amp;lt;server&amp;gt;&lt;span class="o">[&lt;/span>:&amp;lt;port&amp;gt;&lt;span class="o">]&lt;/span>/path/to/repos/myrepo.git
&lt;span class="ln">3&lt;/span>&lt;span class="c1">#语法2：&lt;/span>
&lt;span class="ln">4&lt;/span>$ &lt;span class="o">[&lt;/span>&amp;lt;username&amp;gt;@&lt;span class="o">]&lt;/span>&amp;lt;server&amp;gt;:/path/to/repos/myrepo.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一种是使用ssh://开头的SSH协议标准URL写法，另外一种是SCP格式的写法。
两种写法均可，SSH协议标准URL写法稍嫌复杂，&lt;strong>但是对于非标准SSH端口（非22端口），可以通过URL给出端口号&lt;/strong>。由于我使用5122作为ssh端口号，所以我使用第一种语法。&lt;/p>
&lt;p>在本地git库添加远程仓库地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 添加远程地址&lt;/span>
&lt;span class="ln">2&lt;/span>$ git remote add origin ssh://git@&lt;span class="s2">&amp;#34;your IP or domain&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;port number&amp;#34;&lt;/span>/srv/gitblogs.git
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 推送本地仓库到远程仓库&lt;/span>
&lt;span class="ln">4&lt;/span>$ git push -u origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>下面要要体现一个git bash的骚操作了&lt;/strong>！&lt;/p>
&lt;p>由于，我的云服务器上的git用户是新创建的，因此其ssh公钥也是新添加的，首次登陆git用户也是通过root用户&lt;code>su&lt;/code>过去的，之后就没有尝试登陆。我通过&lt;code>git push -u origin master&lt;/code>推送的时候，git bash跳出了让我输密码的框框，如下图：&lt;/p>
&lt;p>&lt;img src="../images/git_bash%E5%9D%91%E4%BA%BA%E8%AE%BE%E8%AE%A1.png" alt="git_bash坑人设计">&lt;/p>
&lt;p>我觉得有些不对劲，因为我已经添加了公钥，理论上不应该再需要密码。我还是尝试输入了云服务器git用户的密码，显示不对，我有输入本地电脑的密码也不对，我就很奇怪。查了查资料，也没有我这个情况。&lt;/p>
&lt;p>接下来，我尝试直接用VS code的git插件push，居然等了10多分钟还push不上去。最后，我使用windows自带的cmd执行&lt;code>git push -u origin master&lt;/code>，跳出来一行通知：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmd" data-lang="cmd">&lt;span class="ln">1&lt;/span>Microsoft Windows [版本 10.0.18363.1916]
&lt;span class="ln">2&lt;/span>&lt;span class="p">(&lt;/span>c&lt;span class="p">)&lt;/span> 2019 Microsoft Corporation。保留所有权利。
&lt;span class="ln">3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> git push -u origin master
&lt;span class="ln">4&lt;/span>The authenticity of host &amp;#39;[xxx.xxx.xxx.xxx]:xxxx ([xxx.xxx.xxx.xxx]:xxxx)&amp;#39; can&amp;#39;t be established.
&lt;span class="ln">5&lt;/span>ECDSA key fingerprint is SHA256:8KEtnlH6cLQlFGYgDZgK12qDiiElEgX3PDV+X9xaiYY.
&lt;span class="ln">6&lt;/span>Are you sure you want to continue connecting (yes/no)?
&lt;/code>&lt;/pre>&lt;/div>&lt;p>额，发现了没有？首次登陆ssh服务端首要确认key fingerprint的！也就是说，我们在git bash跳出的密码框里输入的不是什么密码，而是“yes”!!!&lt;/p>
&lt;p>我重置了环境，在git bash跳出的密码框输了“yes”，不出所料，通过了…………🤣🤣🤣所以，git bash为什么要跳出密码框啊！误导人啊！之后，VS Code的git插件也能自动push上去了，这里也算发现VS Code git插件的一个小小问题，希望以后能改正吧。&lt;/p>
&lt;h3 id="远程仓库的工作区更新方法">远程仓库的工作区更新方法&lt;/h3>
&lt;p>无论是使用裸仓库还是使用普通仓库，我们都要读取最新更新的内容，裸仓库可以被正常clone和push更新，但是裸仓库不包含工作区，所以并不会存在在裸仓库上直接出现可用文件，需要建立一个普通中转仓库读取最新内容；而普通仓库存在工作区不自动更新问题，也需要用户自己更新。&lt;/p>
&lt;h4 id="推送给裸仓库的情形">推送给裸仓库的情形&lt;/h4>
&lt;p>如果之前建立的是裸仓库，里面是不会显示出任何用户内容的，需要建立一个中转普通仓库。这个中转普通仓库从裸仓库中pull最新的内容，提供给hugo blog。&lt;/p>
&lt;p>我们在云端裸仓库同一文件夹中，新建一个中转仓库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /srv &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mkdir blogtransfer.git &lt;span class="c1"># /srv/blogtransfer.git作为中转仓库，一般git库都以.git作为结尾&lt;/span>
&lt;span class="ln">2&lt;/span>$ sudo chown -R git:git blogtransfer.git &lt;span class="c1"># 把所属用户从root改成git&lt;/span>
&lt;span class="ln">3&lt;/span>$ su - git &lt;span class="c1"># 带 - 符号表示环境变量也跟着切换&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 将裸仓库内容clone到中转仓库，使用git的本地协议&lt;/span>
&lt;span class="ln">5&lt;/span>$ git clone /srv/gitblogs.git/ /srv/blogtransfer.git
&lt;span class="ln">6&lt;/span>Cloning into &lt;span class="s1">&amp;#39;/srv/blogtransfer.git&amp;#39;&lt;/span>...
&lt;span class="ln">7&lt;/span>&lt;span class="k">done&lt;/span>.
&lt;span class="ln">8&lt;/span>$ ls /srv/blogtransfer.git
&lt;span class="ln">9&lt;/span>images 学习笔记 工程笔记 网页资料
&lt;/code>&lt;/pre>&lt;/div>&lt;p>初次&lt;code>git clone&lt;/code>后，每当我们从本地提交新的内容，可以在&lt;code>/srv/blogtransfer.git&lt;/code>文件夹中，使用&lt;code>git pull&lt;/code>更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">cd&lt;/span> /srv/blogtransfer.git/
&lt;span class="ln"> 2&lt;/span>$ git pull &lt;span class="c1"># 我做了一个修改，来进行测试&lt;/span>
&lt;span class="ln"> 3&lt;/span>remote: Counting objects: 7, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 4&lt;/span>remote: Compressing objects: 100% &lt;span class="o">(&lt;/span>4/4&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 5&lt;/span>remote: Total &lt;span class="m">4&lt;/span> &lt;span class="o">(&lt;/span>delta 3&lt;span class="o">)&lt;/span>, reused &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>Unpacking objects: 100% &lt;span class="o">(&lt;/span>4/4&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 7&lt;/span>From /srv/gitblogs
&lt;span class="ln"> 8&lt;/span> f9e0b20..a33731d master -&amp;gt; origin/master
&lt;span class="ln"> 9&lt;/span>Updating f9e0b20..a33731d
&lt;span class="ln">10&lt;/span>Fast-forward
&lt;span class="ln">11&lt;/span> ...s-&lt;span class="se">\3&lt;/span>50&lt;span class="se">\2&lt;/span>07&lt;span class="se">\2&lt;/span>52&lt;span class="se">\3&lt;/span>45&lt;span class="se">\2&lt;/span>12&lt;span class="se">\2&lt;/span>50&lt;span class="se">\3&lt;/span>45&lt;span class="se">\2&lt;/span>14&lt;span class="se">\2&lt;/span>26&lt;span class="se">\3&lt;/span>51&lt;span class="se">\2&lt;/span>03&lt;span class="se">\2&lt;/span>50&lt;span class="se">\3&lt;/span>47&lt;span class="se">\2&lt;/span>75&lt;span class="se">\2&lt;/span>62&lt;span class="se">\3&lt;/span>50&lt;span class="se">\2&lt;/span>07&lt;span class="se">\2&lt;/span>52&lt;span class="se">\3&lt;/span>45&lt;span class="se">\2&lt;/span>67&lt;span class="se">\2&lt;/span>61&lt;span class="se">\3&lt;/span>47&lt;span class="se">\2&lt;/span>32&lt;span class="se">\2&lt;/span>04&lt;span class="se">\3&lt;/span>45&lt;span class="se">\2&lt;/span>15&lt;span class="se">\2&lt;/span>32&lt;span class="se">\3&lt;/span>45&lt;span class="se">\2&lt;/span>56&lt;span class="se">\2&lt;/span>42.md&lt;span class="s2">&amp;#34; | 105 ++++++++++++++++++++++++++++++++++++++++++++++----------------------
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> 1 file changed, 71 insertions(+), 34 deletions(-)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，我们就可以从中转仓库读取内容。&lt;/p>
&lt;h4 id="推送给普通远程仓库的情形">推送给普通远程仓库的情形&lt;/h4>
&lt;p>如果之前建立的是普通库，当我们在本地完成第一次远程仓库推送后，登录到服务器的&lt;code>/srv/gitblogs.git&lt;/code>目录会发现，该目录里还是什么都没有啊，那和裸库有什么区别？！我们之前说了:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>git push&lt;/code>命令仅更新远程存储库上的分支和HEAD信息。&lt;strong>它不会更新非裸机中的工作区副本、暂存区和版本指针&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>如果我们用&lt;code>git status&lt;/code>查看，会发现多了大量的修改记录，因此我们需要手动把版本库的“指针”指向最新的地方。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 把工作区回退到git库的版本（此情况下等同于更新）&lt;/span>
&lt;span class="ln">2&lt;/span>$ git reset --hard
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样再查看&lt;code>/srv/gitblogs.git&lt;/code>目录就有最新的内容了。需要注意的是，每一次push推送后，普通仓库都要用&lt;code>git reset --hard&lt;/code>手动更新工作区。&lt;/p>
&lt;h2 id="设置post-receive-hook完成内容自动更新">设置post-receive hook完成内容自动更新&lt;/h2>
&lt;p>上面一章就已经提到过push裸仓库需要中转仓库来更新内容和push到非裸库，工作区不更新的这两方面问题，大多数人都是用post-receive hook来处理的。&lt;/p>
&lt;p>Hook就是钩子，本质是一种触发器，代表在某种情况触发某种操作。Git的钩子脚本位于&lt;code>版本库.git/hooks&lt;/code>目录下，当Git执行特定操作时会调用特定的钩子脚本。当版本库通过&lt;code>git init&lt;/code>或者&lt;code>git clone&lt;/code>创建时，会在&lt;code>hooks&lt;/code>目录下创建示例脚本，用户可以参照示例脚本的写法开发适合的钩子脚本。&lt;/p>
&lt;p>钩子脚本要设置为可运行，并使用特定的名称。Git提供的示例脚本都带有&lt;code>.sample&lt;/code>扩展名，是为了防止被意外运行。如果需要启用相应的钩子脚本，需要对其重命名（去掉&lt;code>.sample&lt;/code>扩展名）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls
&lt;span class="ln">2&lt;/span>applypatch-msg.sample fsmonitor-watchman.sample pre-applypatch.sample prepare-commit-msg.sample pre-rebase.sample update.sample
&lt;span class="ln">3&lt;/span>commit-msg.sample post-update.sample pre-commit.sample pre-push.sample pre-receive.sample
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，pre-commit、post-update、pre-receive、update等等代表着钩子被触发的情况。我们要的post-receive这里恰好没有，没关系，自己创建一个就行。&lt;/p>
&lt;p>需要指出：裸仓库内直接可以看到&lt;code>hooks&lt;/code>目录，而非裸仓库需要在隐藏目录&lt;code>.git/hooks&lt;/code>下查看。&lt;/p>
&lt;ul>
&lt;li>裸仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 新建post-receive构造，这是一个shell文件&lt;/span>
&lt;span class="ln">2&lt;/span>$ touch /srv/gitblogs.git/hooks/post-receive
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 增加可执行权限&lt;/span>
&lt;span class="ln">4&lt;/span>$ chmod +x /srv/gitblogs.git/hooks/post-receive
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>普通仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 新建post-receive构造，这是一个shell文件&lt;/span>
&lt;span class="ln">2&lt;/span>$ touch /srv/gitblogs.git/.git/hooks/post-receive
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 增加可执行权限&lt;/span>
&lt;span class="ln">4&lt;/span>$ chmod +x /srv/gitblogs.git/.git/hooks/post-receive
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="裸仓库的更新">裸仓库的更新&lt;/h3>
&lt;p>复制以下脚本到&lt;code>post-receive&lt;/code>文件来实现中转仓库的更新。&lt;/p>
&lt;p>注意：这个脚本要复制到&lt;code>gitblogs.git&lt;/code>这个裸库的&lt;code>hooks/post-receive&lt;/code>文件中，而不是中转库的！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>git --work-tree&lt;span class="o">=&lt;/span>/srv/blogtransfer.git/ --git-dir&lt;span class="o">=&lt;/span>/srv/blogtransfer.git/.git pull
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="普通远程仓库的更新脚本">普通远程仓库的更新脚本&lt;/h3>
&lt;p>我们将下面这个脚本复制到&lt;code>post-receive&lt;/code>文件来完成普通远程仓库的更新工作区。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1"># 几个地址变量&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">GITBLOGS_PATH&lt;/span>&lt;span class="o">=&lt;/span>/srv/gitblogs.git/
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 下面是自己记录的日志，方便查询记录用&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">LOG_PATH&lt;/span>&lt;span class="o">=&lt;/span>/tmp/gitblogs-post-receive-log
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Here is the post-receive hook to update work tree by &amp;#39;git reset --hard&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span class="nv">$LOG_PATH&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 输入时间等信息用于方便记录&lt;/span>
&lt;span class="ln">10&lt;/span>date &amp;gt;&amp;gt; &lt;span class="nv">$LOG_PATH&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;git reset --hard&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span class="nv">$LOG_PATH&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># 回复工作区到最新版本库&lt;/span>
&lt;span class="ln">13&lt;/span>git --work-tree&lt;span class="o">=&lt;/span>&lt;span class="nv">$GITBLOGS_PATH&lt;/span> --git-dir&lt;span class="o">=&lt;/span>&lt;span class="nv">$GITBLOGS_PATH&lt;/span>/.git reset --hard &amp;gt;&amp;gt; &lt;span class="nv">$LOG_PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用hugo作为博客生成工具">使用HUGO作为博客生成工具&lt;/h2>
&lt;p>我们这里这里使用Hugo作为生成博客的工具。我们根据自身需求，要做以下修改：&lt;/p>
&lt;ol>
&lt;li>我的笔记是分类放在多个文件夹中，希望Hugo能够从多个目录中读取markdown 博客文章，这样我就不需要对本地文件结构做调整。&lt;/li>
&lt;li>我有一个网页资料的文件夹，希望把它单独设置一个目录页面，而不出把它算成博客文章。我需要一个能生成文件夹目录txt文章的工具，然后此目录页面通过js读取并生成链接。&lt;/li>
&lt;li>我的在本地写markdown的时候，使用图片的相对路径，且所有图片相对于博客文章的路径都是&lt;code>../images/&lt;/code>，而Hugo默认的图片路径都是根目录的绝对路径。&lt;/li>
&lt;li>希望能把内容条件给百度等搜索引擎，github page其实不需要这个功能。&lt;/li>
&lt;li>增加安全的评论功能，应该需要生成永久链接。&lt;/li>
&lt;li>处理yaml front matter与一级目录重复的问题。&lt;/li>
&lt;li>文章中遇到太多公式的时候。hugo自带的编译器渲染出来的公式效果很差，有大量无法编译的公式。&lt;/li>
&lt;/ol>
&lt;p>问题1解决：我将文章目录都放到了hugo的content目录，hugo会自动读取content下所有的目录和文件，并根据目录结构生成这也是选择hugo框架的一个优势。&lt;/p>
&lt;p>问题2解决：由于hugo在content文件中不支持编译纯html文件，我将网页资料的文件夹放在&lt;code>/static/&lt;/code>目录下，然后在主题的&lt;code>lib_webpages&lt;/code>模板中用&lt;code>hugo&lt;/code>的&lt;code>readDir&lt;/code>函数读取文件夹中的内容，然后拼接成链接，不需要能生成文件夹目录txt文章的工具等步骤。目录则使用&lt;code>/content/library/webpages.html&lt;/code>生成，其调用了主题中的&lt;code>lib_webpages&lt;/code>模板。有个小缺点，即URL的层级关系被破坏。&lt;/p>
&lt;p>问题3解决：在本地我用的是VS Code写markdown，我发现它是支持打开的文件作为根目录来索引文件的，即支持以打开的目录为&amp;quot;/&amp;quot;索引。因此，我把我所有本地的markdown文件中的&lt;code>../images/&lt;/code>改成了&lt;code>/images/&lt;/code>。其实用绝对路径对本地写markdown也是有好处的，就是主要打开的文件夹不变，就可以用多层文件结构编写文档，而不用总记相对路径；对网站的SEO也有利。此外，hugo对相对路径的支持也是有很多问题的，不值得花太多精力处理。&lt;/p>
&lt;p>问题4TODO：参考&lt;a href="https://www.kyfws.com/post/kyfws-hugo-baidu-seo/">https://www.kyfws.com/post/kyfws-hugo-baidu-seo/&lt;/a>&lt;/p>
&lt;p>问题5解决：可以通过hugo内置的&lt;code>_internal/disqus.html&lt;/code>完成评论功能，但是感觉我目前不太需要。&lt;/p>
&lt;p>问题6解决：为了不让vscode 的markdownlint报错，我们首先将其多个一级标题警告“MD025/single-title/single-h1: Multiple top-level headings in the same document”取消。因为，VS Code的markdownlint插件会把yaml元标题当成是一级标题，因此需要在本地编辑环境目录中设置&lt;code>.markdownlint.json&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;#34;MD025&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">false&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，我们为了让文章看起来更美观，采用以下形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="ln">1&lt;/span>---
&lt;span class="ln">2&lt;/span>yaml meta info
&lt;span class="ln">3&lt;/span>title : &amp;#34;TITLE&amp;#34;
&lt;span class="ln">4&lt;/span>date : &amp;#34;2020-02-02&amp;#34;
&lt;span class="ln">5&lt;/span>---
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>目录/table of contents
&lt;span class="ln">8&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="gu">## H1 title&amp;lt;!-- omit in toc --&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样在渲染成网页的时候，两个大标题会夹着目录，因此会美观一些。如果hugo能提供自动把一级标题当元信息，或者VS Code能够markdown能够渲染yaml头信息就不同这么麻烦。此外，我将H1 title前面变成二级标题，可以在不改变&lt;code>.markdownlint.json&lt;/code>文件的情况下在VS Code中不报错。&lt;/p>
&lt;p>问题7解决：在有大量公式的文章中，不要使用hugo自带的golden编译器，替换成pandoc。pandoc的安装方法可在网上查到。我们还需要在该文章的头部信息中加入&lt;code>markup: pandoc&lt;/code>这一条。&lt;/p>
&lt;h3 id="修改hugo博客的clarity主题">修改Hugo博客的clarity主题&lt;/h3>
&lt;p>我的博客是基于&lt;a href="https://github.com/chipzoller/hugo-clarity">clarity&lt;/a>主题修改而来，基本改动有&lt;/p>
&lt;ul>
&lt;li>在头部导航添加了归档和分类两项，添加了二者的模板、功能和archive type;&lt;/li>
&lt;li>在头部导航添加了资料库-&amp;gt;资料web版，基于readDir实现了网页信息遍历的post，网页资料存放在&lt;code>/static/网页资料&lt;/code>&lt;/li>
&lt;li>在头部导航添加了资料库-&amp;gt;书签地址，书签位置&lt;code>/content/library&lt;/code>；&lt;/li>
&lt;li>在头部导航添加了专栏项，基于原来的series修改而来；&lt;/li>
&lt;li>删除了多语言支持，因为总是出bug；&lt;/li>
&lt;li>修改了侧边栏的内容显示顺序，取消了个人信息阅读更多按钮，将链接移植到了名字上；&lt;/li>
&lt;li>精简了分享链接，由于外国大多社交网站不可访问和国内社交网站的封闭性，只保留了复制网页链接的功能，删除了多余的社交网站链接；&lt;/li>
&lt;li>简化了默认的archetypes；&lt;/li>
&lt;li>修改了主题配色、链接、404页面等样式&lt;/li>
&lt;/ul>
&lt;p>现在只要将我的markdown文章的文件夹放入&lt;code>content&lt;/code>目录，网页资料的内容放到&lt;code>/static/网页资料&lt;/code>，images中的图片文件夹放到&lt;code>/static/images&lt;/code>中，即可自动生成静态网站。&lt;/p>
&lt;h3 id="上传修改好的hugo博客">上传修改好的Hugo博客&lt;/h3>
&lt;p>首先，我们把改好的网站主题上传到云主机，路径为&lt;code>/opt/blogtheme&lt;/code>，并把&lt;code>/opt/blogtheme&lt;/code>的拥有者改为git。然后将其中content的内容建立软链接，连接到git工作区的相应目录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 将/opt/blogtheme的拥有者改为git&lt;/span>
&lt;span class="ln">2&lt;/span>$ sudo chown git:git -R /opt/blogtheme
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果使用&lt;strong>裸仓库&lt;/strong>，需要从中转仓库提取需要的文件，路径为&lt;code>/srv/blogtransfer.git&lt;/code>。我们建立目录的软链接：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 如果主题中已经有了/opt/blogtheme/static/projectnotes，则删除&lt;/span>
&lt;span class="ln">2&lt;/span>$ ln -s /srv/blogtransfer.git/工程笔记 /opt/blogtheme/content/projectnotes
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 如果主题中已经有了/opt/blogtheme/static/studynotes，则删除&lt;/span>
&lt;span class="ln">4&lt;/span>$ ln -s /srv/blogtransfer.git/学习笔记 /opt/blogtheme/content/studynotes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在hugo 0.62以后，不在支持static的软链接复制（说是因为存在可能导致循环链接），因此hugo主题的static文件夹中无法直接使用ln，退一步，我使用rsync同步文件夹。我们把下面两命令加到之前的post-receive脚本中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># rsync -a source destination&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 图片同步&lt;/span>
&lt;span class="ln">3&lt;/span>rsync -a /srv/blogtransfer.git/images/ /opt/blogtheme/static/images
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 网页同步&lt;/span>
&lt;span class="ln">5&lt;/span>rsync -a /srv/blogtransfer.git/网页资料/ /opt/blogtheme/static/网页资料
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果使用&lt;strong>普通仓库&lt;/strong>，路径为&lt;code>/srv/gitblogs.git/&lt;/code>。我们建立目录的软链接：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 如果主题中已经有了/opt/blogtheme/static/projectnotes，则删除&lt;/span>
&lt;span class="ln">2&lt;/span>$ ln -s /srv/gitblogs.git/工程笔记 /opt/blogtheme/content/projectnotes
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 如果主题中已经有了/opt/blogtheme/static/studynotes，则删除&lt;/span>
&lt;span class="ln">4&lt;/span>$ ln -s /srv/gitblogs.git/学习笔记 /opt/blogtheme/content/studynotes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在hugo 0.62以后，不在支持static的软链接复制（说是因为存在可能导致循环链接），因此hugo主题的static文件夹中无法直接使用ln，退一步，我使用rsync同步文件夹。我们把下面两命令加到之前的post-receive脚本中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 在hugo0.62以后，不在支持static的软链接复制（说是因为存在可能导致循环链接），因此static文件中&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 无法直接使用ln，退一步，我用rsync同步。&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># rsync -a source destination&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 图片同步&lt;/span>
&lt;span class="ln">5&lt;/span>$ rsync -a /srv/gitblogs.git/images/ /opt/blogtheme/static/images
&lt;span class="ln">6&lt;/span>&lt;span class="c1"># 网页同步&lt;/span>
&lt;span class="ln">7&lt;/span>$ rsync -a /srv/gitblogs.git/网页资料/ /opt/blogtheme/static/网页资料
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，我们也实现了内容和格式的分离，&lt;code>/opt/blogtheme&lt;/code>做为存放格式的位置，基本不用动，每次只要git更新内容即可。&lt;/p>
&lt;h2 id="使用jenkins自动化部署网站">使用Jenkins自动化部署网站&lt;/h2>
&lt;p>经过上述准备，我们已经准备好了所需的内容，下面就是使用jenkins将它们构建成网站。我们首先新建网站的目录文件夹&lt;code>/opt/public/&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo mkdir /opt/public
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 将/opt/public的拥有者改为git&lt;/span>
&lt;span class="ln">3&lt;/span>$ sudo chown git:git /opt/public
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果直接从shell手动输入构建命令，就一句指令很简单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ hugo --minify -s /opt/blogtheme -d /opt/public/
&lt;span class="ln"> 2&lt;/span>Start building sites …
&lt;span class="ln"> 3&lt;/span>hugo v0.89.4-AB01BA6E+extended linux/amd64 &lt;span class="nv">BuildDate&lt;/span>&lt;span class="o">=&lt;/span>2021-11-17T08:24:09Z &lt;span class="nv">VendorInfo&lt;/span>&lt;span class="o">=&lt;/span>gohugoio
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">|&lt;/span> ZH-CN
&lt;span class="ln"> 6&lt;/span>-------------------+--------
&lt;span class="ln"> 7&lt;/span> Pages &lt;span class="p">|&lt;/span> &lt;span class="m">335&lt;/span>
&lt;span class="ln"> 8&lt;/span> Paginator pages &lt;span class="p">|&lt;/span> &lt;span class="m">54&lt;/span>
&lt;span class="ln"> 9&lt;/span> Non-page files &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">10&lt;/span> Static files &lt;span class="p">|&lt;/span> &lt;span class="m">361&lt;/span>
&lt;span class="ln">11&lt;/span> Processed images &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">12&lt;/span> Aliases &lt;span class="p">|&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="ln">13&lt;/span> Sitemaps &lt;span class="p">|&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">14&lt;/span> Cleaned &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>Total in &lt;span class="m">18050&lt;/span> ms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过，我们希望在git完成push后自动执行。这里我们使用jenkins来完成自动构建命令。&lt;/p>
&lt;p>首先，为了解决jenkins的权限和环境变量问题，安装好jenkins后，我们需要先进行以下配置：&lt;/p>
&lt;ol>
&lt;li>防止jenkins出现command not found的错误，我们要为jenkins添加&lt;code>PATH&lt;/code>环境变量。在系统管理-&amp;gt;系统配置-&amp;gt;全局属性对话框中选中“环境变量”，添加键值对“PATH”和PATH对应值。PATH对应值在系统中使用&lt;code>echo $PATH&lt;/code>获取，复制粘贴到这里即可。&lt;/li>
&lt;li>防止jenkins出现Permission denied权限不够的问题，我们要重新以git用户启动jenkins，以git用户启动是因为我们之前文件拥有者都是git。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ sudo vim /etc/sysconfig/jenkins
&lt;span class="ln"> 2&lt;/span>......
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">## Type: string&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="m">22&lt;/span> &lt;span class="c1">## Default: &amp;#34;jenkins&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="m">23&lt;/span> &lt;span class="c1">## ServiceRestart: jenkins&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="m">24&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="m">25&lt;/span> &lt;span class="c1"># Unix user account that runs the Jenkins daemon&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="m">26&lt;/span> &lt;span class="c1"># Be careful when you change this, as you need to update&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="m">27&lt;/span> &lt;span class="c1"># permissions of $JENKINS_HOME and /var/log/jenkins.&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="m">28&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="m">29&lt;/span> &lt;span class="nv">JENKINS_USER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git&amp;#34;&lt;/span> &lt;span class="c1"># 由默认值jenkins改为git&lt;/span>
&lt;span class="ln">12&lt;/span>......
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># 修改jenkins对应文件拥有者&lt;/span>
&lt;span class="ln">14&lt;/span>$ sudo chown -R git:git /var/lib/jenkins
&lt;span class="ln">15&lt;/span>$ sudo chown -R git:git /var/cache/jenkins
&lt;span class="ln">16&lt;/span>$ sudo chown -R git:git /var/log/jenkins
&lt;span class="ln">17&lt;/span>&lt;span class="c1"># 重启jenkins&lt;/span>
&lt;span class="ln">18&lt;/span>$ sudo systemctl restart jenkins
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来，我们打开jenkins网站界面，默认是8080端口。首先按照页面提示进行初始化（因为我的jenkins早就安装了，这里就不介绍初始化流程了），然后点击左边菜单栏的“新建任务”，输入任务名称，选择构建一个自由风格的软件项目。&lt;/p>
&lt;p>&lt;img src="../images/devops-jenkins1.png" alt="jenkins1">&lt;/p>
&lt;p>按照如下配置，设置构建流程。我们不需要源码，因此也没有工作区，在构建一栏中加上需要执行的命令。构建触发器接下来再设置。&lt;/p>
&lt;p>&lt;img src="../images/devops-jenkins2.png" alt="jenkins2">&lt;/p>
&lt;p>设置好后，我们点击保存，然后点击左侧菜单栏的“立即构建”，就可通过jenkins执行构建命令。目前为止，我们做的以上的工作，只不过是把在命令行做的工作放到jenkins里完成而已，若需要自动触发构建，还需要构建触发器，如下图所示：&lt;/p>
&lt;p>&lt;img src="../images/devops-jenkins3.png" alt="jenkins3">&lt;/p>
&lt;p>构建的触发器种类选择“触发远程构建”，然后在身份验证令牌中输入一串随机数作为验证码，接下面，我们只需要访问一个网址&lt;a href="http://127.0.0.1:8080/job/hugoblog/build?token=TOKEN_NAME">http://127.0.0.1:8080/job/hugoblog/build?token=TOKEN_NAME&lt;/a>，就能触发这个构建。由于我们的git库和jenkins在同一台主机上，所以IP写127.0.0.1就行，端口8080是jenkins的默认端口，后面的url是固定的，最后在“TOKEN_NAME”处用我们刚在身份验证令牌中输入的随机替代。我们在浏览器中输入这个URL，就可以发现jenkins启动了一个新的构建。&lt;/p>
&lt;p>一般这样就没什么问若发生403错误：Error 403 No valid crumb was included in the request，则考虑jenkins关闭全局安全设置中的“跨站请求伪造保护”；若真心为了安全考虑，则增加获取crumb值，具体步骤自行搜索。&lt;/p>
&lt;p>接下来我们要把触发网址的工作交给git的hook脚本，我们在post-receive脚本的最后添加如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 触发jenkins编译新网站&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># -X 表示请求类型，用post；-u 表示认证信息，填写登录jenkins的用户名密码；-v表示显示详细过程&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># URL触发远程构建所用的URL&lt;/span>
&lt;span class="ln">4&lt;/span>curl -X post -u &lt;span class="s1">&amp;#39;username:password&amp;#39;&lt;/span> -v http://127.0.0.1:8080/job/hugoblog/build?token&lt;span class="o">=&lt;/span>TOKEN_NAME
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此，我们已经完成了本地&lt;code>git push&lt;/code>后，自动完成内容更新、网站构建的工作。&lt;/p>
&lt;h2 id="推送到github并生成gitpages">推送到Github并生成Gitpages&lt;/h2>
&lt;p>如果要使用GitPages，我们需要&lt;strong>将hugo编译好的网站，而非原始数据推送到GitHub&lt;/strong>。&lt;/p>
&lt;p>首先，我们要在GitHub新建一个库，库名比较特殊，必须是：&lt;strong>用户名.github.io&lt;/strong>，且&lt;strong>所有字母必须小写&lt;/strong>。选择public类型，然后下面的README、证书、.gitignore都不用添加。如下图所示：&lt;/p>
&lt;p>&lt;img src="../images/devops-gitpages.png" alt="创建gitpages">&lt;/p>
&lt;p>由于我们自己云服务和GitHub的域名不一样，所以不能直接把云上编译好的网站直接push到GitHub。我们需要&lt;strong>改变baseUrl参数&lt;/strong>，重新编译。为了公式完整，我们之前在markdown编译时用了pandoc编译速度慢，同时国内连接github网络不稳定，所以我在jenkins中单独为Github的推送流程新建了一个任务，以免拖累本地编译过程。&lt;/p>
&lt;p>我们先做一些准备工作。&lt;/p>
&lt;p>第一步，我们为了能让云服务器有权限把内容推送给GitHub的库，因此要将自己的公钥存放到GitHub上。我们存放的是云服务器上git用户的公钥，查看git用户的公钥&lt;code>cat /home/git/.ssh/id_rsa.pub&lt;/code>，若没有此文件则使用git用户的&lt;code>ssh-keygen -t rsa&lt;/code>创建。将公钥放到GitHub右上角图像-&amp;gt;settings-&amp;gt;SSH and GPG keys-&amp;gt;New SSH key，然后把公钥复制粘贴过来。&lt;/p>
&lt;p>第二步，我们为推送到github的库做一些初始化工作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 为GitHub新建库文件夹，并将所有者改为git&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ sudo mkdir &lt;span class="nb">cd&lt;/span> /opt/surprisedcat.github.io
&lt;span class="ln"> 3&lt;/span>$ sudo chown git:git /opt/surprisedcat.github.io
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 切换到git用户执行以下操作&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ su - git
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 重新编译网站，注意baseUrl是不同的&lt;/span>
&lt;span class="ln"> 7&lt;/span>$ hugo --minify --baseUrl&lt;span class="o">=&lt;/span>https://surprisedcat.github.io -s /opt/blogtheme -d /opt/surprisedcat.github.io/
&lt;span class="ln"> 8&lt;/span>Start building sites …
&lt;span class="ln"> 9&lt;/span>hugo v0.89.4-AB01BA6E+extended linux/amd64 &lt;span class="nv">BuildDate&lt;/span>&lt;span class="o">=&lt;/span>2021-11-17T08:24:09Z &lt;span class="nv">VendorInfo&lt;/span>&lt;span class="o">=&lt;/span>gohugoio
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">|&lt;/span> ZH-CN
&lt;span class="ln">12&lt;/span>-------------------+--------
&lt;span class="ln">13&lt;/span> Pages &lt;span class="p">|&lt;/span> &lt;span class="m">335&lt;/span>
&lt;span class="ln">14&lt;/span> Paginator pages &lt;span class="p">|&lt;/span> &lt;span class="m">54&lt;/span>
&lt;span class="ln">15&lt;/span> Non-page files &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">16&lt;/span> Static files &lt;span class="p">|&lt;/span> &lt;span class="m">364&lt;/span>
&lt;span class="ln">17&lt;/span> Processed images &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">18&lt;/span> Aliases &lt;span class="p">|&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="ln">19&lt;/span> Sitemaps &lt;span class="p">|&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">20&lt;/span> Cleaned &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>Total in &lt;span class="m">18596&lt;/span> ms
&lt;span class="ln">23&lt;/span>&lt;span class="c1"># 初始化git库&lt;/span>
&lt;span class="ln">24&lt;/span>$ &lt;span class="nb">cd&lt;/span> /opt/surprisedcat.github.io
&lt;span class="ln">25&lt;/span>$ git init .
&lt;span class="ln">26&lt;/span>&lt;span class="c1"># 第一次commit和添加远程库，commit带上日期&lt;/span>
&lt;span class="ln">27&lt;/span>$ git add .
&lt;span class="ln">28&lt;/span>$ git commit -m &lt;span class="s2">&amp;#34;`date` commit&amp;#34;&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># 将主分支重命名为main&lt;/span>
&lt;span class="ln">30&lt;/span>$ git branch -M main
&lt;span class="ln">31&lt;/span>$ git remote add origin git@github.com:SurprisedCat/surprisedcat.github.io.git
&lt;span class="ln">32&lt;/span>$ git push -u origin main
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第三步，在jenkins中新建构建任务。源码管理选择“无”，构建触发器选择如下图：&lt;/p>
&lt;p>&lt;img src="../images/devops-jenkins-gitpages.png" alt="jenkins-github">&lt;/p>
&lt;p>我们建立两个触发器，一是传统远程触发器，二是在云构建完成后，自动构建推送到github的流程。&lt;/p>
&lt;p>在构建栏目下，选择“执行shell”，并填入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>hugo --minify --baseUrl&lt;span class="o">=&lt;/span>https://surprisedcat.github.io -s /opt/blogtheme -d /opt/surprisedcat.github.io/
&lt;span class="ln">2&lt;/span>&lt;span class="nb">cd&lt;/span> /opt/surprisedcat.github.io
&lt;span class="ln">3&lt;/span>git add .
&lt;span class="ln">4&lt;/span>git commit -m &lt;span class="s2">&amp;#34;`date` commit&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>git push -u origin main
&lt;/code>&lt;/pre>&lt;/div>&lt;p>点击保存。&lt;/p>
&lt;p>一整套配置完成。&lt;/p>
&lt;p>接下来，为了安全起见，我们不再允许git使用shell登录（过河拆桥啦），我们修改&lt;code>/etc/passwd&lt;/code>下git用户的最后一项，将&lt;code>/bin/bash&lt;/code>改为&lt;code>/usr/bin/git-shell&lt;/code>，这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。&lt;/p></description></item><item><title>正则表达式-regular_expression难点易错点</title><link>https://surprisedcat.github.io/projectnotes/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-regular_expression%E9%9A%BE%E7%82%B9%E6%98%93%E9%94%99%E7%82%B9/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-regular_expression%E9%9A%BE%E7%82%B9%E6%98%93%E9%94%99%E7%82%B9/</guid><description>
&lt;h2 id="regular-expression难点易错点---omit-in-toc---">Regular Expression难点易错点&lt;!-- omit in toc -->&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#javascript%E5%8C%B9%E9%85%8D%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6">Javascript匹配所有中文字符&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="javascript匹配所有中文字符">Javascript匹配所有中文字符&lt;/h2>
&lt;p>最开始用法：&lt;code>/[\u4e00-\u9fa5]/&lt;/code>。&lt;/p>
&lt;p>&lt;code>/[\u4e00-\u9fa5]/&lt;/code>的意思是匹配所有从&lt;code>U+4E00, cjk unified ideograph-4e00&lt;/code>到&lt;code>U+9FA5, cjk unified ideograph-9fa5&lt;/code>的字符。这一段区域对应的是 Unicode 1.0.1 就收录进来的中日韩统一表意文字（CJK Unified Ideographs）区块，在 Unicode 3.0 加入扩展 A 区以前，这个正则表达式确实给出了所有汉字的编码。然而时光飞逝，Unicode 在2017年6月发布了10.0.0版本。在这20年间，Unicode 添加了许多汉字。比如 Unicode 8.0 添加的 109 号化学元素「鿏（⿰⻐麦）」，其码点是 &lt;code>9FCF&lt;/code>，不在这个正则表达式范围中。而如果我们期望程序里的&lt;code>/[\u4e00-\u9fa5]/&lt;/code>可以与时俱进匹配最新的 Unicode 标准，显然是不现实的事情。&lt;/p>
&lt;p>因此，ECMAScript提供了一个无需维护的正则表达式：&lt;code>/\p{Unified_Ideograph}/u&lt;/code>。&lt;/p>
&lt;p>其中&lt;code>\u&lt;/code>是 ECMAScript 2015 定义的正则表达式标志，意味着将表达式作为 Unicode 码点序列。&lt;code>\p&lt;/code>是ECMAScript 2018 定义的正则表达式 Unicode 属性转义，它赋予了我们根据 Unicode 字符的属性数据构造表达式的能力。&lt;code>Unified_Ideograph&lt;/code>是 Unicode 字符的一个二值属性，对于汉字，其取值为 Yes，否则为 No。因此&lt;code>\p{Unified_Ideograph}&lt;/code>匹配所有满足&lt;code>Unified_Ideograph=yes&lt;/code>的 Unicode 字符，而它的底层实现由运行时所依赖的 Unicode 版本决定，开发者不需要知道汉字的具体 Unicode 码点范围。&lt;/p>
&lt;p>此外，还有&lt;code>/\p{Ideographic}/u&lt;/code> 和 &lt;code>/\p{Script=Han}/u&lt;/code>这两种匹配方式。但是它们匹配了除了汉字以外的其他一些字符，在「汉字匹配正则表达式」这个需求下，是错的。&lt;/p>
&lt;p>比如&lt;code>/\p{Ideographic}/u&lt;/code>这个属性表明该字符属于 CJKV 表意文字或者与汉语书写相关的其他表意文字（如西夏文、女书），这个属性粗略地定义了「中文字符」的分类。使用&lt;code>/\p{Ideographic}/u&lt;/code>来匹配汉字会过于宽泛。一是包含了西夏文、女书，二是只用于编码转换用的兼容字符也纳入其中。&lt;/p>
&lt;p>而&lt;code>/\p{Script=Han}/u&lt;/code>囊括了所有统一表意文字、中日韩兼容性字符、苏州码子、「〇」、「〆」、「々」以及字典常用的部首。从汉文（Han Script）与汉字（CJK Ideograph）的关系我们可以知道，&lt;code>/\p{Script=Han}/u&lt;/code>匹配的是汉文作为一个字符集里面的所有字符，因此它包括了部首、「々」等字符，这些字符要么当它们独立存在的时候没有语言意义（部首独立存在是一个符号），要么无法独立存在（「々」依赖于所修饰的汉字）。所以汉字是汉文的一个单元，汉文除了包含汉字以外，还包括这些符号、数字、修饰符。因此使用&lt;code>/\p{Script=Han}/u&lt;/code>来匹配汉字是混淆了汉文与汉字的概念范围。&lt;/p></description></item><item><title>linux-从设备文件看重定向</title><link>https://surprisedcat.github.io/projectnotes/linux-%E4%BB%8E%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6%E7%9C%8B%E9%87%8D%E5%AE%9A%E5%90%91/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-%E4%BB%8E%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6%E7%9C%8B%E9%87%8D%E5%AE%9A%E5%90%91/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6">终端设备文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87%E4%B8%8E%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6">标准输入输出设备与终端设备文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6">一切皆文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91">输入输出重定向&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B3%A8%E6%84%8F-here-doucment">注意&amp;lt;&amp;lt; Here doucment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%AC%A6%E5%8F%B7">&amp;amp;符号&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="linux-从设备文件看重定向---omit-in-toc---">linux-从设备文件看重定向&lt;!-- omit in toc -->&lt;/h2>
&lt;p>我们在《linux-特殊设备文件》一文中介绍了标准输入输出（错误）设备和终端设备，指出默认情况下输入的信息来自标准输入设备(stdin)，程序返回的一般信息交给标准输出设备(stdout)，返回的错误信息交给标准错误设备(stderr)，而标准输入输出（错误）设备在默认情况下，都会被链接到正在被操作的虚拟终端(tty)或伪终端(pty)，最终转发到我们的交互界面。&lt;/p>
&lt;p>从数据流的角度来看，正常情况下，输入数据流是Linux内核将键盘输入的数据接收后，再写入&lt;code>/dev/stdin&lt;/code>设备，&lt;code>/dev/stdin&lt;/code>设备再将数据传递给相应的程序；输出数据流是程序将返回的信息写入&lt;code>/dev/stdout,/dev/stderr&lt;/code>设备，Linux内核从&lt;code>/dev/stdout,/dev/stderr&lt;/code>设备读取程序的信息，并最终交付给物理终端（显示器）。如下图：&lt;/p>
&lt;p>&lt;img src="../images/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%AE%80%E5%8C%96%E5%9B%BE.drawio.svg" alt="标准输入输出简化图">&lt;/p>
&lt;p>从结果上来讲，上述流程大体是对的，如果只是正常使用Linux系统，理解到此也没什么问题。如果我们深入地了解它们之间的关系，会发现以上的描述存在一些不准确的地方。&lt;/p>
&lt;h2 id="终端设备文件">终端设备文件&lt;/h2>
&lt;p>当我们使用基于命令行的用户接口，CLI Shell，时（例如Bash，sh，zsh），都是通过终端模拟器和Linux系统进行交互。如果这个终端模拟器使用的是内核中实现的终端模拟器，那么叫做虚拟终端，为用户提供了&lt;code>/dev/ttyX&lt;/code>的设备接口文件；若这个终端模拟器工作在Linux用户区甚至远程客户端（如ssh），那么叫做伪终端，为用户提供了&lt;code>/dev/ptmx&lt;/code>和&lt;code>/dev/pts/X&lt;/code>这两个设备接口文件。对用户区程序而言，无论是&lt;code>/dev/ttyX&lt;/code>还是&lt;code>/dev/pts/X&lt;/code>I/O操作都表现得像个标准终端。&lt;/p>
&lt;blockquote>
&lt;p>注：Linux诞生之初，用户通过物理终端和Linux计算机连接交互，后来物理终端被淘汰变成键盘、显示器等外设，然后Linux内部机制却已经和物理终端模式深深绑定且工作良好，因此Linux系统为了保持兼容性（少改代码），就在系统中用软件实现了一个模仿终端工作的终端模拟器，来“欺骗”其他模块：我们仍然在和终端交互，什么都不用改~~终端发展历程可参考文章《linux-与终端交互的发展》。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以在&lt;code>/dev&lt;/code>下看到这些虚拟终端或伪终端设备的设备文件描述符(file descriptor, fd)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ ls -al /dev/tty&lt;span class="o">[&lt;/span>0-9&lt;span class="o">]&lt;/span> /dev/pts/*
&lt;span class="ln"> 2&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> lelouch tty 136, &lt;span class="m">0&lt;/span> Dec &lt;span class="m">29&lt;/span> 23:39 /dev/pts/0
&lt;span class="ln"> 3&lt;/span>c--------- &lt;span class="m">1&lt;/span> root root 5, &lt;span class="m">2&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/pts/ptmx
&lt;span class="ln"> 4&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">0&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty0
&lt;span class="ln"> 5&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">1&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty1
&lt;span class="ln"> 6&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">2&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty2
&lt;span class="ln"> 7&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">3&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty3
&lt;span class="ln"> 8&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">4&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty4
&lt;span class="ln"> 9&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">5&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty5
&lt;span class="ln">10&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">6&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty6
&lt;span class="ln">11&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">7&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty7
&lt;span class="ln">12&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">8&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty8
&lt;span class="ln">13&lt;/span>crw--w---- &lt;span class="m">1&lt;/span> root tty 4, &lt;span class="m">9&lt;/span> Oct &lt;span class="m">8&lt;/span> 14:47 /dev/tty9
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对某一CLI shell以及派生的子进程而言，相对应的那个&lt;code>/dev/ttyX&lt;/code>或&lt;code>/dev/pts/X&lt;/code>才是与其直接交互的“终端设备”。我们可以用&lt;code>tty&lt;/code>指令，查看当前正在使用哪个终端设备。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ tty
&lt;span class="ln">2&lt;/span>/dev/pts/0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那这个终端设备和标准输入输出有什么关系呢？&lt;/p>
&lt;h2 id="标准输入输出设备与终端设备文件">标准输入输出设备与终端设备文件&lt;/h2>
&lt;p>为了查看标准输入输出设备的真面目，我们来查看当前CLI shell的标准输入输出端口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ls -l /dev/std*
&lt;span class="ln">2&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Oct &lt;span class="m">8&lt;/span> 22:47 /dev/stderr -&amp;gt; /proc/self/fd/2
&lt;span class="ln">3&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Oct &lt;span class="m">8&lt;/span> 22:47 /dev/stdin -&amp;gt; /proc/self/fd/0
&lt;span class="ln">4&lt;/span>lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">15&lt;/span> Oct &lt;span class="m">8&lt;/span> 22:47 /dev/stdout -&amp;gt; /proc/self/fd/1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从显示出来的详细性质，我们发现输入输出设备对应的不是设备描述符，而是一个链接，链接的位置就是当前进程的&lt;code>/proc/self/fd/0-2&lt;/code>。&lt;code>/proc/self/&lt;/code>是一个动态的目录，它始终指向当前前台进程，而标准输入输出链接到该特殊目录中的文件描述符，则保证了任何在当前在前台工作的进程，都能够和终端直接交互。&lt;/p>
&lt;p>当执行一个进程时，都会默认打开3个文件&lt;code>0,1,2&lt;/code>，每个文件有对应的文件描述符来方便我们使用：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">文件描述符&lt;/th>
&lt;th style="text-align:center">类型&lt;/th>
&lt;th style="text-align:center">默认情况&lt;/th>
&lt;th style="text-align:center">对应文件句柄位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">标准输入（standard input）&lt;/td>
&lt;td style="text-align:center">从键盘获得输入&lt;/td>
&lt;td style="text-align:center">/proc/self/fd/0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">标准输出（standard output）&lt;/td>
&lt;td style="text-align:center">输出到屏幕（即控制台）&lt;/td>
&lt;td style="text-align:center">/proc/self/fd/1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">错误输出（error output）&lt;/td>
&lt;td style="text-align:center">输出到屏幕（即控制台）&lt;/td>
&lt;td style="text-align:center">/proc/self/fd/2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>好的，接下来我们看看&lt;code>/proc/self/fd/0-2&lt;/code>是什么样的文件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>ls -l /proc/self/fd/
&lt;span class="ln">2&lt;/span>lrwx------ &lt;span class="m">1&lt;/span> lelouch lelouch &lt;span class="m">64&lt;/span> Dec &lt;span class="m">30&lt;/span> 00:31 &lt;span class="m">0&lt;/span> -&amp;gt; /dev/pts/0
&lt;span class="ln">3&lt;/span>lrwx------ &lt;span class="m">1&lt;/span> lelouch lelouch &lt;span class="m">64&lt;/span> Dec &lt;span class="m">30&lt;/span> 00:31 &lt;span class="m">1&lt;/span> -&amp;gt; /dev/pts/0
&lt;span class="ln">4&lt;/span>lrwx------ &lt;span class="m">1&lt;/span> lelouch lelouch &lt;span class="m">64&lt;/span> Dec &lt;span class="m">30&lt;/span> 00:31 &lt;span class="m">2&lt;/span> -&amp;gt; /dev/pts/0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>哈，&lt;code>/proc/self/fd/0-2&lt;/code>也都只是软链接，链接的位置就是我们使用&lt;code>tty&lt;/code>指令显示出来的终端设备文件！也是说，无论是标准输入，还是标准输出、标准错误，最终都是在和终端设备接口文件交互。其关系如下图：&lt;/p>
&lt;p>&lt;img src="../images/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%B8%8E%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87.drawio.svg" alt="标准输入输出与终端设备">&lt;/p>
&lt;p>图中黄色部分表示虚拟终端的流程；蓝色部分表示伪终端流程。父进程通过fork和exec派生出不同子进程，通常子进程会继承父进程的终端接口文件，并占据前台（foreground）。从图中，我们可以看出标准输入输出设备(&lt;code>/dev/{stdin,stdout,dtderr}&lt;/code>)始终是一个动态的链接，始终指向前台进程；而&lt;strong>进程产生的三个链接文件&lt;code>/proc/$pid_number/fd/0-2&lt;/code>才是进程I/O的核心&lt;/strong>，是与进程直接交互的接口。如果我们希望进程改变I/O的输入输出方向，更改&lt;code>/dev/{stdin,stdout,stderr}&lt;/code>是没有用的，&lt;strong>应该更改&lt;code>0,1,2&lt;/code>所链接的位置&lt;/strong>。它们默认链接位置为&lt;code>/dev/ttyX&lt;/code>或&lt;code>/dev/pts/X&lt;/code>，这些设备描述符最终会将数据转发到外设，如键盘、屏幕、网络调制解调器等。&lt;/p>
&lt;h2 id="一切皆文件">一切皆文件&lt;/h2>
&lt;p>我们在聊输入输出重定向之前，我们在说说&lt;code>/dev/ttyX&lt;/code>或&lt;code>/dev/pts/X&lt;/code>。之前说过，它们是提供给用户进程的终端设备接口&lt;strong>文件&lt;/strong>，本质上它们是&lt;strong>文件&lt;/strong>啊。那么对于Linux而言，终端设备接口文件与文件系统中的文档有区别吗？答案是：没有，它们都是文件。&lt;/p>
&lt;blockquote>
&lt;p>linux 中所有内容都是以文件的形式保存和管理的，即&lt;strong>一切皆文件&lt;/strong>，普通文件是文件，目录（Windows 下称为文件夹）是文件，硬件设备（键盘、监视器、硬盘、打印机）是文件，就连套接字（socket）、网络通信等资源也都是文件。&lt;/p>
&lt;/blockquote>
&lt;p>这些内容（无论是普通文件、硬件设备、目录、套接字、链接）需要被操作时，都用**统一的文件描述符(file descriptor, fd)**来表示，当进程打开现有文件或创建新文件时，内核向进程返回一个文件描述符，文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来指向被打开的文件，所有执行I/O操作的系统调用都会通过文件描述符。只要我们有读写权限，我们就可以从文件中读取内容或是向文件写入内容，不管这个文件实际上是设备还是别的什么。当然对某些设备文件或内存文件而言，这种操作相当危险。&lt;/p>
&lt;p>&lt;strong>因此，当我们进行进程的I/O重定向时，从Linux系统的角度看，只不过是把读取/写入的操作从一个文件转向另一个文件而已&lt;/strong>。&lt;/p>
&lt;h2 id="输入输出重定向">输入输出重定向&lt;/h2>
&lt;p>由于在Linux中一切皆文件，所谓“重定向”就是换个操作的文件嘛。默认情况下，我们进行I/O的文件是&lt;code>/proc/self/fd/{0,1,2}&lt;/code>，重定向的时候就是把默认输入文件&lt;code>0&lt;/code>换个别的文件，或者默认输出&lt;code>1、2&lt;/code>换个别的文件。此时，我们需要用的重定向符号：&lt;code>&amp;lt;,&amp;gt;&amp;gt;,&amp;gt;&lt;/code>。&lt;/p>
&lt;p>简单用法如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">命令&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command &amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输出从1重定向到 file。命令执行command然后将输出的内容存入file，覆盖原内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command &amp;lt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输入从0重定向到 file。需要从键盘获取输入的命令会转移到文件读取内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command &amp;gt;&amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输出从1以追加的方式重定向到file。命令执行command然后将输出的内容追加到file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command &amp;lt; file1 &amp;gt;file2&lt;/code>&lt;/td>
&lt;td style="text-align:center">command 命令将输入0重定向到 file1，将输出1重定向到 file2。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 输出重定向到文件test_1&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;redirection test&amp;#34;&lt;/span> &amp;gt; test_1
&lt;span class="ln"> 3&lt;/span>$ cat test_1
&lt;span class="ln"> 4&lt;/span>redirection &lt;span class="nb">test&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># 输出重定向到文件test_1，覆盖原有内容&lt;/span>
&lt;span class="ln"> 6&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;redirection test again&amp;#34;&lt;/span> &amp;gt; test_1
&lt;span class="ln"> 7&lt;/span>$ cat test_1
&lt;span class="ln"> 8&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 输出重定向到文件test_1，追加内容&lt;/span>
&lt;span class="ln">10&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;redirection test again&amp;#34;&lt;/span> &amp;gt;&amp;gt; test_1
&lt;span class="ln">11&lt;/span>$ cat test_1
&lt;span class="ln">12&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">13&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 输入重定向，来自test_1&lt;/span>
&lt;span class="ln">15&lt;/span>$ cat &amp;lt; test_1
&lt;span class="ln">16&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">17&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">18&lt;/span>&lt;span class="c1"># 输入重定向，来自test_1，输出重定向到test_11&lt;/span>
&lt;span class="ln">19&lt;/span>$ cat &amp;lt; test_1 &amp;gt;test_11
&lt;span class="ln">20&lt;/span>$ cat test_11
&lt;span class="ln">21&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">22&lt;/span>redirection &lt;span class="nb">test&lt;/span> again
&lt;span class="ln">23&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，上面这四个命令都是简写，写完整了应该是（&lt;strong>数字和重定向符号之间不要空格！&lt;/strong>）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">命令&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 1&amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输出从1重定向到 file。命令执行command然后将输出的内容存入file，覆盖原内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 0&amp;lt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输入从0重定向到 file。需要从键盘获取输入的命令会转移到文件读取内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 1&amp;gt;&amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将输出从1以追加的方式重定向到file。命令执行command然后将输出的内容追加到file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 0&amp;lt; file_1 1&amp;gt;file_2&lt;/code>&lt;/td>
&lt;td style="text-align:center">command 命令将输入0重定向到 file_1，将输出1重定向到 file_2。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>相应的，如果我们想要把标准错误&lt;code>2&lt;/code>重定向到其他地方，就需要手动地将数字给填上：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">命令&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 2&amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将标准错误从2重定向到 file。命令执行command并将出错内容存入file，覆盖原内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>command 2&amp;gt;&amp;gt; file&lt;/code>&lt;/td>
&lt;td style="text-align:center">将标准错误从2以追加的方式重定向到file。命令执行command并将出错内容追加到file。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 错误内容重定向到文件test_2&lt;/span>
&lt;span class="ln">2&lt;/span>$ cat /etc/shadow 2&amp;gt; test_2
&lt;span class="ln">3&lt;/span>$ cat test_2
&lt;span class="ln">4&lt;/span>cat: /etc/shadow: Permission denied
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 错误内容重定向到文件test_2，内容追加&lt;/span>
&lt;span class="ln">6&lt;/span>$ qwertyui 2&amp;gt;&amp;gt; test_2
&lt;span class="ln">7&lt;/span>$ cat test_2
&lt;span class="ln">8&lt;/span>cat: /etc/shadow: Permission denied
&lt;span class="ln">9&lt;/span>-bash: ovcosdjfo: &lt;span class="nb">command&lt;/span> not found
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="注意-here-doucment">注意&amp;lt;&amp;lt; Here doucment&lt;/h2>
&lt;p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。简单的说，就是运行我们一次性输入很多内容然后一起交给程序执行。&lt;/p>
&lt;p>它的基本的形式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">command&lt;/span> &lt;span class="s">&amp;lt;&amp;lt; delimiter
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s"> document
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s">delimiter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它的作用是将两个“delimiter”（定界符）之间的内容(document) 作为输入传递给&lt;code>command&lt;/code>。比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 在命令行中通过 wc -l 命令计算 Here Document 的行数：&lt;/span>
&lt;span class="ln">2&lt;/span>$ wc -l &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s"> Hello
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s"> redirction test
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s"> Here document test
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="c1"># 输出结果为 3 行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和&lt;code>tab&lt;/code>缩进。如果不满足这些条件，则不被认为是delimiter。（下例所示）&lt;/li>
&lt;li>开始的delimiter前后的空格会被忽略掉。&lt;/li>
&lt;li>delimiter具体内容可以自定义，不必非要是“EOF”，你写成“superman”也是可以的，只要开头结尾一致就行。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 自定义delimiter&lt;/span>
&lt;span class="ln">2&lt;/span>$ wc -l &lt;span class="s">&amp;lt;&amp;lt; superman
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s"> Hello
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s"> redirction test
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s"> Here document test superman&lt;/span>
&lt;span class="ln">6&lt;/span> superman
&lt;span class="ln">7&lt;/span> superman
&lt;span class="ln">8&lt;/span>superman
&lt;span class="ln">9&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="c1"># 输出结果为 5 行&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="符号">&amp;amp;符号&lt;/h2>
&lt;p>Linux中，&lt;code>&amp;amp;&lt;/code>符号通常表示将进程放到后台执行，但是在重定向语境下，&lt;code>&amp;amp;&lt;/code>后面紧跟一个数字时，表示该进程中，此数字代表的文件描述符。例如&lt;code>&amp;amp;0&lt;/code>表示进程的标准输入文件描述符，&lt;code>&amp;amp;1&lt;/code>表示进程的标准输出文件描述符，&lt;code>&amp;amp;2&lt;/code>表示进程的标准输出错误描述符。其他打开的文件描述符也可以用&lt;code>&amp;amp;+数字&lt;/code>表示。&lt;/p>
&lt;p>有了这些认识才能理解 &amp;quot;1&amp;gt;&amp;amp;2&amp;quot; 和 &amp;quot;2&amp;gt;&amp;amp;1&amp;quot;.&lt;/p>
&lt;ul>
&lt;li>1&amp;gt;&amp;amp;2 标准输出返回值传递给2输出通道 &amp;amp;2表示2号文件描述符，即标准错误通道。如果此处错写成 1&amp;gt;2, 就表示把1输出重定向到名称为“2”的文件中。&lt;/li>
&lt;li>2&amp;gt;&amp;amp;1 标准错误返回值传递给1输出通道, 同样&amp;amp;1表示1号文件描述符，即标准输出通道。&lt;/li>
&lt;/ul>
&lt;p>再举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 此时，我们目录下并无test.log文件&lt;/span>
&lt;span class="ln">2&lt;/span>$ rm test.log &amp;gt; /dev/null 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="c1"># 写完整了应是 1&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个命令先将标准输出重定向到&lt;code>/dev/null&lt;/code>，再把错误输出重定向到1输出通道，同样是&lt;code>/dev/null&lt;/code>，所以运行这个脚本不会输出任何信息到终端。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>/dev/null&lt;/code>代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。比较常见的用法是把不需要的输出重定向到这个文件。&lt;/p>
&lt;/blockquote>
&lt;p>需要注意的是：如果我们把&lt;code>1&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code>的顺序调换过来，意思就不一样了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 此时，我们目录下并无test.log文件&lt;/span>
&lt;span class="ln">2&lt;/span>$ rm test.log 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &amp;gt;/dev/null &lt;span class="c1">#写完整了应是 2&amp;gt;&amp;amp;1 1&amp;gt;/dev/null&lt;/span>
&lt;span class="ln">3&lt;/span>rm: cannot remove &lt;span class="s1">&amp;#39;test.log&amp;#39;&lt;/span>: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们发现依然可以看到输出的标准错误信息。这是因为第一步&lt;code>2&amp;gt;&amp;amp;1&lt;/code>的时候，&lt;code>&amp;amp;1&lt;/code>指向的还是&lt;code>/dev/pts/X&lt;/code>，也就是说标准错误先是被重定向到了&lt;code>/dev/pts/X&lt;/code>（和原来一样）；当第二步&lt;code>1&amp;gt;/dev/null&lt;/code>的时候，仅有标准输出被重定向到了&lt;code>/dev/null&lt;/code>，标准错误仍然指向&lt;code>/dev/pts/X&lt;/code>。所以，错误信息还是会显示在屏幕上。&lt;/p>
&lt;p>&amp;amp;符号的另一个用法是和重定向符号组合到一起&lt;strong>同时代表输出和标准错误输出（&amp;amp;&amp;gt;,&amp;amp;&amp;gt;&amp;gt;）&lt;/strong>。比如，&lt;code>&amp;amp;&amp;gt;文件名&lt;/code>表示将标准输出和标准错误全部保存到指定文件中，等同于&lt;code>1&amp;gt;文件名 2&amp;gt;文件名&lt;/code>或&lt;code>1&amp;gt;文件名 2&amp;gt;&amp;amp;1&lt;/code>。同样，&lt;code>&amp;amp;&amp;gt;&amp;gt;文件名&lt;/code>可表示追加写入文件。&lt;/p>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;p>&lt;a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">https://www.runoob.com/linux/linux-shell-io-redirections.html&lt;/a>&lt;/p></description></item><item><title>linux-管道pipe与xargs</title><link>https://surprisedcat.github.io/projectnotes/linux-%E7%AE%A1%E9%81%93pipe%E4%B8%8Exargs/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-%E7%AE%A1%E9%81%93pipe%E4%B8%8Exargs/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E7%AE%A1%E9%81%93pipe">管道——Pipe&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4">管道命令&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E6%95%B0%E4%BB%A3%E6%8D%A2xargs">参数代换——&lt;code>xargs&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8C%BA%E5%88%86%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E5%8F%82%E6%95%B0">区分标准输入和参数&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%85%B3%E4%BA%8E%E5%87%8F%E5%8F%B7-%E7%9A%84%E7%94%A8%E9%80%94">关于减号“-”的用途&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="linux-管道pipe与xargs---omit-in-toc---">linux-管道pipe与xargs&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Linux CLI shell（如bash，zsh）通常情况下都是每输入一条指令，输出一个结果，一来一回的交互，但是有的时候一条指令的输出是冗长且繁杂的，我们需要对其输出进行再处理，才能找到我们需要的内容。此时，我们就需要像筛金子一样，逐层过滤掉无用的沙子，Linux提供了这样的筛子——&lt;strong>管道&lt;/strong>，使我们能够接续处理数据。&lt;/p>
&lt;h2 id="管道pipe">管道——Pipe&lt;/h2>
&lt;blockquote>
&lt;p>管道（Pipeline）操作符为“|”，是一系列将&lt;strong>标准输入输出链接起来&lt;/strong>的进程，其中每一个进程的输出被直接作为下一个进程的输入。管道中的组成元素也被称作过滤程序。这个概念是由道格拉斯·麦克罗伊为Unix 命令行发明的，因与物理上的管道相似而得名。&lt;/p>
&lt;/blockquote>
&lt;p>这是来自Wikipedia的定义。定义中指出，默认情况下，管道只会将上一个程序的标准输出(stdout)，传递给下一个命令，作为标准的输入(stdin)，对标准错误(stderr)信息没有直接处理能力。最后的命令将会把标准输出和标准错误都输出到屏幕上。画个简图来描述他们的关系：&lt;/p>
&lt;p>&lt;img src="../images/%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4%E7%A4%BA%E6%84%8F%E5%9B%BE.drawio.svg" alt="管道命令示意图">&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>管道命令只处理前一个命令正确输出，不处理错误输出。&lt;/li>
&lt;li>管道命令右边命令，必须能够接收标准输入流命令才行。&lt;/li>
&lt;li>管道触发两个子进程分别执行&amp;quot;|&amp;quot;两边的程序；而重定向是在一个进程内执行。&lt;/li>
&lt;li>如果使用&lt;code>|&amp;amp;&lt;/code>，则表示命令1的标准错误和标准输出都作为命令2的标准输入，这是&lt;code>2&amp;gt;&amp;amp;1 |&lt;/code>的简写。&lt;/li>
&lt;/ol>
&lt;h2 id="管道命令">管道命令&lt;/h2>
&lt;p>管道需要搭配&lt;strong>管道命令&lt;/strong>来使用，除了最开始的命令，在管道右边的命令，&lt;strong>必须能够接收标准输入流&lt;/strong>命令才行。以下这些命令就是常用的管道命令：&lt;/p>
&lt;ul>
&lt;li>撷取命令： cut, grep&lt;/li>
&lt;li>排序命令： sort, uniq, wc&lt;/li>
&lt;li>双向重导向： tee&lt;/li>
&lt;li>字符转换命令： tr, col, join, paste, expand&lt;/li>
&lt;li>分割命令： split&lt;/li>
&lt;li>文本查看： cat, tac, more, less, head, tail&lt;/li>
&lt;li>文本比较： diff&lt;/li>
&lt;li>流文本处理： sed, awk&lt;/li>
&lt;li>参数代换： xargs&lt;/li>
&lt;/ul>
&lt;p>我们不鼓励现在就了解这些命令的具体用途，因为这样学习是枯燥且低效的。我们更鼓励只有当实际用到的时候再去查找这些命令的用法。&lt;/p>
&lt;h2 id="参数代换xargs">参数代换——&lt;code>xargs&lt;/code>&lt;/h2>
&lt;p>上面这些命令中，有一个需要单独拎出来强调下，就是参数代换——&lt;code>xargs&lt;/code>。它的运作方式有少许不同，一般的管道命令都是把上一个命令的标准输出作为本命令的标准输入；而&lt;code>xargs&lt;/code>可以将来自管道的输出、标准输入或文件数据转换成&lt;strong>命令行参数&lt;/strong>。&lt;/p>
&lt;p>我们先举个例子，看看&lt;code>xargs&lt;/code>带来的区别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># xargstest目录下有一个test.txt文件&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ tree xargstest/
&lt;span class="ln"> 3&lt;/span>xargstest/
&lt;span class="ln"> 4&lt;/span>└── test.txt
&lt;span class="ln"> 5&lt;/span>&lt;span class="m">0&lt;/span> directories, &lt;span class="m">1&lt;/span> file
&lt;span class="ln"> 6&lt;/span>$ &lt;span class="nb">cd&lt;/span> xargstest/
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 直接使用管道命令&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ ls &lt;span class="p">|&lt;/span> cat
&lt;span class="ln"> 9&lt;/span>test.txt
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># xargs下的管道命令&lt;/span>
&lt;span class="ln">11&lt;/span>$ ls &lt;span class="p">|&lt;/span> xargs cat
&lt;span class="ln">12&lt;/span>测试文件
&lt;span class="ln">13&lt;/span>xargs的区别实例
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，我们在&lt;code>xargstest/&lt;/code>目录下使用&lt;code>ls&lt;/code>命令，结果是显示其目录下的文件&lt;code>test.txt&lt;/code>，也就是说标准输出(stdout)是&lt;code>&amp;quot;test.txt&amp;quot;&lt;/code>。当我们直接使用管道命令&lt;code>ls | cat&lt;/code>时，标准输出&lt;code>&amp;quot;test.txt&amp;quot;&lt;/code>作为&lt;code>cat&lt;/code>的标准输入(stdin)，因此&lt;code>cat&lt;/code>的输出结果就是显示标准输入的内容，即&lt;code>&amp;quot;test.txt&amp;quot;&lt;/code>。当我们使用参数代换&lt;code>xargs&lt;/code>时，前一个命令&lt;code>ls&lt;/code>的标准输出作为&lt;strong>参数&lt;/strong>传递给&lt;code>cat&lt;/code>，而非标准输入，后一个命令在执行时，实际执行的命令是&lt;code>cat test.txt&lt;/code>，因此最终结果是显示&lt;code>test.txt&lt;/code>文件中的内容。&lt;/p>
&lt;p>一句话总结：&lt;strong>xargs命令的作用，是将标准输入转为命令行参数&lt;/strong>。&lt;/p>
&lt;h3 id="区分标准输入和参数">区分标准输入和参数&lt;/h3>
&lt;p>大多数时候，&lt;code>xargs&lt;/code>命令都是跟管道一起使用的。为了进一步区分标准输入和参数，我们可以看看在&lt;strong>不使用管道时&lt;code>xargs&lt;/code>的效果&lt;/strong>。通常境况下，&lt;code>xargs&lt;/code>后面跟一个Linux shell命令，来自标准输入的内容都会是该命令的参数。如果我们单独使用&lt;code>xargs&lt;/code>，就会使用默认命令&lt;code>echo&lt;/code>，即&lt;code>xargs == xargs echo&lt;/code>。当我们直接执行&lt;code>xargs&lt;/code>后，会出现空行让我们随意输入内容，我们从键盘输入的内容就是&lt;strong>标准输入&lt;/strong>，直到我们使用&lt;code>ctrl+d&lt;/code>或者在一行仅输入“End of File”标志（使用&lt;code>-E&lt;/code>参数指定）。然后，&lt;code>echo&lt;/code>命令就会把前面的输入打印出来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ xargs
&lt;span class="ln">2&lt;/span>xargs测试 &lt;span class="c1"># 按Ctrl + d&lt;/span>
&lt;span class="ln">3&lt;/span>xargs测试 &lt;span class="c1"># 输出内容&lt;/span>
&lt;span class="ln">4&lt;/span>$ xargs -E EOF &lt;span class="c1"># 指定结束符为EOF&lt;/span>
&lt;span class="ln">5&lt;/span>xargs测试
&lt;span class="ln">6&lt;/span>EOF
&lt;span class="ln">7&lt;/span>xargs测试 &lt;span class="c1"># 输出内容&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出&lt;code>xargs + stdin == echo 'stdin'&lt;/code>，注意这里我用单引号，表示&lt;code>stdin&lt;/code>内容作为&lt;code>echo&lt;/code>的参数被执行时是直接输出，不用转义。这就是所说的&lt;code>xargs&lt;/code>将标准输入转为命令行参数。如果不好理解，我们再举个使用其他命令的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ xargs touch &lt;span class="c1"># 打算创建一个文件，文件名由键盘输入&lt;/span>
&lt;span class="ln">2&lt;/span>newfile.txt &lt;span class="c1"># 按Ctrl + d&lt;/span>
&lt;span class="ln">3&lt;/span>$ ls -l newfile.txt
&lt;span class="ln">4&lt;/span>-rw-rw-r-- &lt;span class="m">1&lt;/span> username username &lt;span class="m">0&lt;/span> Nov &lt;span class="m">24&lt;/span> 00:43 newfile.txt &lt;span class="c1"># 确实创建了此文件&lt;/span>
&lt;span class="ln">5&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;newfile.txt&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> xargs -t rm &lt;span class="c1">#我们可以使用-t参数，显示xargs实际执行的命令。&lt;/span>
&lt;span class="ln">6&lt;/span>rm newfile.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子中，来自键盘的标准输入作为&lt;code>touch&lt;/code>命令的参数，决定了被新建文件的名称，等同于&lt;code>touch newfile.txt&lt;/code>。参数都是跟在命令后面的，比如&lt;code>touch&lt;/code>是&lt;code>xargs&lt;/code>的参数，&lt;code>touch newfile.txt&lt;/code>中&lt;code>newfile.txt&lt;/code>是&lt;code>touch&lt;/code>的参数。而标准输入是独立于命令存在的，由用户决定其内容，通常是命令执行后，等待用户提供的，比如执行&lt;code>xargs&lt;/code>命令后，等待来自用户键盘的输入内容。&lt;/p>
&lt;p>其他&lt;code>xargs&lt;/code>命令的参数，可以参考其&lt;a href="https://man7.org/linux/man-pages/man1/xargs.1.html">&lt;code>man&lt;/code>帮助页面&lt;/a>。&lt;/p>
&lt;h2 id="关于减号-的用途">关于减号“-”的用途&lt;/h2>
&lt;p>减号“-”在shell脚本中根据使用上下文的不同，有不同的含义。在管道语境下，减号“-”代表着&lt;strong>标准输入或标准输出&lt;/strong>，用来&lt;strong>代替某个文件名参数&lt;/strong>（在非管道语境下，也可以表示标准输入或标准输出）。需要指出，并不是所有命令都支持减号“-”。&lt;/p>
&lt;p>我们先举个做为&lt;strong>标准输出&lt;/strong>的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 默认情况下，此命令会下载一个名为docker的文件，此为安装docker容器的脚本&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ wget https://get.daocloud.io/docker
&lt;span class="ln"> 3&lt;/span>--2021-11-24 09:22:21-- https://get.daocloud.io/docker
&lt;span class="ln"> 4&lt;/span>Resolving get.daocloud.io &lt;span class="o">(&lt;/span>get.daocloud.io&lt;span class="o">)&lt;/span>... 106.75.86.15
&lt;span class="ln"> 5&lt;/span>...... &lt;span class="c1"># 中间省略&lt;/span>
&lt;span class="ln"> 6&lt;/span>HTTP request sent, awaiting response... &lt;span class="m">200&lt;/span> OK
&lt;span class="ln"> 7&lt;/span>Length: &lt;span class="m">18617&lt;/span> &lt;span class="o">(&lt;/span>18K&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>None&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 8&lt;/span>Saving to: ‘docker’ &lt;span class="c1"># 注意这里就是保存到文件&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>docker 100%&lt;span class="o">[=============================================================&lt;/span>&amp;gt;&lt;span class="o">]&lt;/span> 18.18K --.-KB/s in 0.03s
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>2021-11-24 09:22:21 &lt;span class="o">(&lt;/span>&lt;span class="m">566&lt;/span> KB/s&lt;span class="o">)&lt;/span> - ‘docker’ saved &lt;span class="o">[&lt;/span>18617/18617&lt;span class="o">]&lt;/span>
&lt;span class="ln">13&lt;/span>$ ls -l docker
&lt;span class="ln">14&lt;/span>-rw-r--r-- &lt;span class="m">1&lt;/span> username username &lt;span class="m">18617&lt;/span> Nov &lt;span class="m">24&lt;/span> 09:22 docker
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># 当我们加上参数&amp;#34;-O&amp;#34;表示目标位置，通常情况下为文件名&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># 我们可使用&amp;#34;-O -&amp;#34;将下载的内容直接输出到标准输出（屏幕），而非文件&lt;/span>
&lt;span class="ln">17&lt;/span>$ wget https://get.daocloud.io/docker -O -
&lt;span class="ln">18&lt;/span>--2021-11-24 10:03:50-- https://get.daocloud.io/docker
&lt;span class="ln">19&lt;/span>Resolving get.daocloud.io &lt;span class="o">(&lt;/span>get.daocloud.io&lt;span class="o">)&lt;/span>... 106.75.86.15
&lt;span class="ln">20&lt;/span>...... &lt;span class="c1"># 中间省略&lt;/span>
&lt;span class="ln">21&lt;/span>HTTP request sent, awaiting response... &lt;span class="m">200&lt;/span> OK
&lt;span class="ln">22&lt;/span>Length: &lt;span class="m">18617&lt;/span> &lt;span class="o">(&lt;/span>18K&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>None&lt;span class="o">]&lt;/span>
&lt;span class="ln">23&lt;/span>Saving to: ‘STDOUT’ &lt;span class="c1"># 注意这里就是保存到标准输出，实际效果为输出到屏幕&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>- 0%&lt;span class="o">[&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="m">0&lt;/span> --.-KB/s &lt;span class="c1">#!/bin/sh&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nb">set&lt;/span> -e
&lt;span class="ln">27&lt;/span>&lt;span class="c1"># Docker CE for Linux installation script&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># See https://docs.docker.com/engine/install/ for the installation steps.&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln">31&lt;/span>...... &lt;span class="c1"># 中间省略&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: Unsupported distribution &amp;#39;&lt;/span>&lt;span class="nv">$lsb_dist&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="nb">echo&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="k">esac&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1"># wrapped up in a function so that we have some protection against only getting&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="c1"># half the file during &amp;#34;curl | sh&amp;#34;&lt;/span>
&lt;span class="ln">42&lt;/span>do_install
&lt;span class="ln">43&lt;/span>- 100%&lt;span class="o">[=============================================================&lt;/span>&amp;gt;&lt;span class="o">]&lt;/span> 18.18K --.-KB/s in 0.03s
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>2022-01-05 10:03:51 &lt;span class="o">(&lt;/span>&lt;span class="m">684&lt;/span> KB/s&lt;span class="o">)&lt;/span> - written to stdout &lt;span class="o">[&lt;/span>18617/18617&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用减号“-”代替“-O”参数指向的文件名，来表示将下载的内容发到标准输出。此时相当于只是在屏幕中输出文件内容，并非下载文件。&lt;/p>
&lt;p>而将减号“-”用于标准输入，不仅需要命令的支持，还需要命令能够从标准输入接收参数。典型的例子是&lt;code>diff&lt;/code>命令。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;line 1 \nline 2\nline 3&amp;#34;&lt;/span> &amp;gt; minus_1.txt
&lt;span class="ln"> 2&lt;/span>$ cat minus_1.txt
&lt;span class="ln"> 3&lt;/span>line &lt;span class="m">1&lt;/span>
&lt;span class="ln"> 4&lt;/span>line &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 5&lt;/span>line &lt;span class="m">3&lt;/span>
&lt;span class="ln"> 6&lt;/span>$ diff - minus_1.txt &lt;span class="c1"># - 表示会从标准输入（键盘）接收内容&lt;/span>
&lt;span class="ln"> 7&lt;/span>line &lt;span class="m">1&lt;/span>
&lt;span class="ln"> 8&lt;/span>line &lt;span class="m">2&lt;/span> changed
&lt;span class="ln"> 9&lt;/span>line &lt;span class="m">3&lt;/span> &lt;span class="c1"># 这里按ctrl+d&lt;/span>
&lt;span class="ln">10&lt;/span>1,2c1,2
&lt;span class="ln">11&lt;/span>&amp;lt; line &lt;span class="m">1&lt;/span>
&lt;span class="ln">12&lt;/span>&amp;lt; line &lt;span class="m">2&lt;/span> changed
&lt;span class="ln">13&lt;/span>---
&lt;span class="ln">14&lt;/span>&amp;gt; line &lt;span class="m">1&lt;/span>
&lt;span class="ln">15&lt;/span>&amp;gt; line &lt;span class="m">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们生成了一个三行的文件&lt;code>minus_1.txt&lt;/code>，然后使用&lt;code>diff - minus_1.txt&lt;/code>让从键盘输入的内容和文件内容比较。&lt;/p>
&lt;p>知道了减号作为标准输入输出的用法，我们就可以把它运用到管道中，在管道左边的命令中，减号可以代表标准输出；在管道右边的命令中，减号代表标准输入。例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 将/var/log中的文件打包并压缩为log.zip&lt;/span>
&lt;span class="ln">2&lt;/span>tar -cvPf - /var/log &lt;span class="p">|&lt;/span> zip -r log.zip -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>管道左边的第一条语句不再输入到具体文件，而输出到stdout中， 而作为第二条件的标准输入(stdin), 而stdin和 stdout都可以用“-”来取代。其实际效果等同于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 将/var/log/中的文件打包到中间文件log.tar&lt;/span>
&lt;span class="ln">2&lt;/span>$ tar -cvPf log.tar /var/log/
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># zip压缩log.tar为log.tar.zip&lt;/span>
&lt;span class="ln">4&lt;/span>$ zip -r log.tar.zip log.tar
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 删除中间文件log.tar&lt;/span>
&lt;span class="ln">6&lt;/span>$ rm -rf log.tar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用减号不仅使命令更加简洁，也避免生成中间文件&lt;code>log.tar&lt;/code>。&lt;/p>
&lt;h2 id="参考内容">参考内容&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/ggjucheng/archive/2012/10/24/2737918.html">https://www.cnblogs.com/ggjucheng/archive/2012/10/24/2737918.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/chengmo/archive/2010/10/21/1856577.html">https://www.cnblogs.com/chengmo/archive/2010/10/21/1856577.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://cn.linux.vbird.org/linux_basic/0320bash_6.php#pipe_7">http://cn.linux.vbird.org/linux_basic/0320bash_6.php#pipe_7&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>linux-debian系统初始化</title><link>https://surprisedcat.github.io/projectnotes/linux-debian%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-debian%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>
&lt;h2 id="linux-debian-10系统初始化---omit-in-toc---">Linux-Debian 10系统初始化&lt;!-- omit in toc -->&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#%E8%B4%A6%E6%88%B7%E5%88%9D%E5%A7%8B%E5%8C%96">账户初始化&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6">安装常用软件&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E6%9B%B4%E6%8D%A2%E5%B8%B8%E7%94%A8%E6%BA%90">更换常用源&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#apt%E6%8D%A2%E6%88%90%E5%9B%BD%E5%86%85%E6%BA%90">apt换成国内源&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pip%E6%8D%A2%E6%88%90%E5%9B%BD%E5%86%85%E6%BA%90">pip换成国内源&lt;/a>&lt;/li>
&lt;li>&lt;a href="#npm%E6%8D%A2%E6%88%90%E5%9B%BD%E5%86%85%E6%BA%90">npm换成国内源&lt;/a>&lt;/li>
&lt;li>&lt;a href="#docker%E6%8D%A2%E6%88%90%E5%9B%BD%E5%86%85%E6%BA%90">docker换成国内源&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github%E5%8A%A0%E9%80%9F">github加速&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置环境变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ssh%E4%B8%8Esshd%E8%AE%BE%E7%BD%AE">SSH与sshd设置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nginx%E8%AE%BE%E7%BD%AE">Nginx设置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#anaconda%E5%AE%89%E8%A3%85">Anaconda安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="#jupyter-notebook">Jupyter notebook&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BD%BF%E7%94%A8nvm%E5%AE%89%E8%A3%85nodejs">使用NVM安装Nodejs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%AE%89%E8%A3%85hexo">安装Hexo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%88%87%E6%8D%A2hexo%E4%B8%BB%E9%A2%98">切换Hexo主题&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">Docker安装与配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#jenkins%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8">Jenkins安装与使用&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gitlab%E5%AE%89%E8%A3%85">Gitlab安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="#linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%B8%8E%E7%94%A8%E5%A4%84">Linux目录结构与用处&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="账户初始化">账户初始化&lt;/h2>
&lt;p>&lt;strong>本文的Linux账号名皆以lelouch为例&lt;/strong>！！！&lt;/p>
&lt;p>账户的创建与权限修改都是系统用户操作，所以这一节的命令都是使用&lt;code>root&lt;/code>用户执行的。&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>adduser lelouch&lt;/code>命令创建账户，本文的用户名皆以&lt;strong>lelouch&lt;/strong>为例。&lt;code>adduser&lt;/code>是交互式命令，按照指令创建即可。&lt;/li>
&lt;li>为新创建的用户添加&lt;code>sudo&lt;/code>权限：&lt;code>echo 'lelouch ALL=(ALL:ALL) ALL' &amp;gt; /etc/sudoers.d/lelouch&lt;/code>。若无&lt;code>sudo&lt;/code>命令，则用&lt;code>apt install sudo&lt;/code>安装。（这样添加sudo权限不用来回改sudoers文件的写权限）&lt;/li>
&lt;li>切换到lelouch用户：&lt;code>su lelouch&lt;/code>，进行下一步操作。&lt;/li>
&lt;/ol>
&lt;h2 id="安装常用软件">安装常用软件&lt;/h2>
&lt;p>以下命令都是以lelouch用户执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo apt update
&lt;span class="ln">2&lt;/span>............
&lt;span class="ln">3&lt;/span>$ sudo apt install vim python3 python3-pip netcat unzip redis rar sqlite3 default-jdk tree build-essential tcpdump curl wget git cmake net-tools nginx
&lt;span class="ln">4&lt;/span>..............
&lt;span class="ln">5&lt;/span>$ sudo apt autoremove
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上需要的软件因人而异。如果发现自己那个命令是因为没装而出现&lt;code>command not found&lt;/code>可以参考这个网站：&lt;a href="https://command-not-found.com/">https://command-not-found.com/&lt;/a>。&lt;/p>
&lt;h3 id="更换常用源">更换常用源&lt;/h3>
&lt;p>如果你有代理，那么不必换成国内源。&lt;/p>
&lt;h4 id="apt换成国内源">apt换成国内源&lt;/h4>
&lt;p>打开&lt;code>/etc/apt/sources.list&lt;/code>文件，替换其中所有内容为国内源地址。以下为Debian 10 buster版本源的地址，选择其中一个源就行（最好复制一份原有内容到别处作为备份）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 阿里apt源&lt;/span>
&lt;span class="ln"> 2&lt;/span>deb http://mirrors.aliyun.com/debian/ buster main non-free contrib
&lt;span class="ln"> 3&lt;/span>deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib
&lt;span class="ln"> 4&lt;/span>deb http://mirrors.aliyun.com/debian-security buster/updates main
&lt;span class="ln"> 5&lt;/span>deb-src http://mirrors.aliyun.com/debian-security buster/updates main
&lt;span class="ln"> 6&lt;/span>deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib
&lt;span class="ln"> 7&lt;/span>deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib
&lt;span class="ln"> 8&lt;/span>deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib
&lt;span class="ln"> 9&lt;/span>deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 网易163源&lt;/span>
&lt;span class="ln">11&lt;/span>deb http://mirrors.163.com/debian/ buster main non-free contrib
&lt;span class="ln">12&lt;/span>deb http://mirrors.163.com/debian/ buster-updates main non-free contrib
&lt;span class="ln">13&lt;/span>deb http://mirrors.163.com/debian/ buster-backports main non-free contrib
&lt;span class="ln">14&lt;/span>deb-src http://mirrors.163.com/debian/ buster main non-free contrib
&lt;span class="ln">15&lt;/span>deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib
&lt;span class="ln">16&lt;/span>deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib
&lt;span class="ln">17&lt;/span>deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib
&lt;span class="ln">18&lt;/span>deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，使用&lt;code>sudo apt update&lt;/code>更新即可完成换源。&lt;/p>
&lt;h4 id="pip换成国内源">pip换成国内源&lt;/h4>
&lt;p>我们使用&lt;code>pip config set global.index-url&lt;/code>来指定下载的源。如果你的&lt;code>pip&lt;/code>命令是&lt;code>pip3&lt;/code>那么下面的命令都换成&lt;code>pip3&lt;/code>。由于&lt;code>pip&lt;/code>默认要求是https传输，而国内的源都是http的，因此直接换会有&lt;code>The repository located at http://xxxxxxxxxxxx is not a trusted or secure host and is being ignored.&lt;/code>这个错误，所以我们还要再后面加上信任国内源&lt;code>pip config set global.trusted-host&lt;/code>的设置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 清华源&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;span class="ln"> 3&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.trusted-host pypi.tuna.tsinghua.edu.cn
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 阿里源&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.index-url https://mirrors.aliyun.com/pypi/simple/
&lt;span class="ln"> 6&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.trusted-host mirrors.aliyun.com
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># 腾讯源&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.index-url http://mirrors.cloud.tencent.com/pypi/simple
&lt;span class="ln"> 9&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.trusted-host mirrors.cloud.tencent.com
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 豆瓣源&lt;/span>
&lt;span class="ln">11&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.index-url http://pypi.douban.com/simple/
&lt;span class="ln">12&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.trusted-host pypi.douban.com
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 升级 pip 为最新版本&lt;/span>
&lt;span class="ln">15&lt;/span>$ sudo pip install pip -U
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="npm换成国内源">npm换成国内源&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ npm config &lt;span class="nb">set&lt;/span> registry https://registry.npm.taobao.org
&lt;span class="ln">2&lt;/span>$ npm info underscore
&lt;span class="ln">3&lt;/span>&lt;span class="c1">#如果上面配置正确这个命令会有字符串response&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 其他还有华为的源&lt;/span>
&lt;span class="ln">5&lt;/span>$ npm config &lt;span class="nb">set&lt;/span> registry https://mirrors.huaweicloud.com/repository/npm/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>npm每次会在我主的文件夹创建一个&lt;code>node_modules,package.json,packet-lock.json&lt;/code>等文件，很烦。&lt;/p>
&lt;h4 id="docker换成国内源">docker换成国内源&lt;/h4>
&lt;p>目前默认的源速度还不错，如果确实需要更换源，则要在配置文件中添加&lt;code>registry-mirrors&lt;/code>的配置。Linux下的默认配置文件是&lt;code>/etc/docker/daemon.json&lt;/code>，没有此文件就创建一个。在文件中添加源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># https://&amp;lt;my-docker-mirror-host&amp;gt;表示要替换的源地址&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s2">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;https://&amp;lt;my-docker-mirror-host&amp;gt;&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>https://&amp;lt;my-docker-mirror-host&amp;gt;&lt;/code>可以替换成：&lt;/p>
&lt;ul>
&lt;li>Docker中国区官方镜像：&lt;a href="https://registry.docker-cn.com">https://registry.docker-cn.com&lt;/a>&lt;/li>
&lt;li>网易：&lt;a href="http://hub-mirror.c.163.com">http://hub-mirror.c.163.com&lt;/a>&lt;/li>
&lt;li>ustc：&lt;a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn&lt;/a>&lt;/li>
&lt;li>中国科技大学：&lt;a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn&lt;/a>&lt;/li>
&lt;li>阿里云容器服务：&lt;a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>更改镜像后重启docker，&lt;code>sudo systemctl restart docker&lt;/code>。&lt;/p>
&lt;h4 id="github加速">github加速&lt;/h4>
&lt;p>你都要用github了，还没代理吗？&lt;/p>
&lt;p>实在需要访问加速，可查看国内的镜像地址&lt;a href="https://github.com.cnpmjs.org">https://github.com.cnpmjs.org&lt;/a>，&lt;a href="https://hub.fastgit.org">https://hub.fastgit.org&lt;/a>可惜经常被限流，多刷新几次。如果用谷歌浏览器，可以下载github加速插件（可惜被Wall，自己去别的地方找）。修改HOSTS文件的方法也失灵时不灵。&lt;/p>
&lt;p>如果需要下载加速，可尝试&lt;a href="https://toolwa.com/github/">https://toolwa.com/github/&lt;/a>。&lt;/p>
&lt;p>最方便稳定的还是代理。&lt;/p>
&lt;h2 id="配置环境变量">配置环境变量&lt;/h2>
&lt;p>Linux中有多个配置环境变量的文件，分为系统级（对所有用户生效）和用户级两种。其顺序为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>/etc/environment -&amp;gt; /etc/profile&lt;span class="o">(&lt;/span>/etc/profile.d&lt;span class="o">)&lt;/span> -&amp;gt;
&lt;span class="ln">2&lt;/span>&lt;span class="o">(&lt;/span>~/.bash_profile &lt;span class="p">|&lt;/span> ~/.bash_login &lt;span class="p">|&lt;/span> ~/.profile&lt;span class="o">)&lt;/span> -&amp;gt;
&lt;span class="ln">3&lt;/span>~/.bashrc -&amp;gt; &lt;span class="o">(&lt;/span>/etc/bashrc &lt;span class="p">|&lt;/span> /etc/bash.bashrc&lt;span class="o">)&lt;/span> -&amp;gt;
&lt;span class="ln">4&lt;/span>~/.bash_logout
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>系统级：
&lt;ol>
&lt;li>&lt;code>/etc/environment&lt;/code>:是系统在登录时读取的&lt;strong>第一个&lt;/strong>文件，该文件设置的是整个系统的环境，只要启动系统就会读取该文件，用于为所有进程设置环境变量。系统使用此文件时并不是执行此文件中的命令，而是根据而是根据&lt;code>KEY=VALUE&lt;/code>模式的代码，对KEY赋值以VALUE，因此文件中如果要定义PATH环境变量，只需加入一行形如&lt;code>PATH=$PATH:/xxx/bin&lt;/code>的代码即可。&lt;/li>
&lt;li>&lt;code>/etc/profile&lt;/code>:此文件是系统登录时执行的&lt;strong>第二个&lt;/strong>文件。 为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从&lt;code>/etc/profile.d&lt;/code>目录的配置文件中搜集shell的设置。（&lt;code>/etc/profile&lt;/code>可以用于设定针对全系统所有用户的环境变量，环境变量周期是永久性）。&lt;/li>
&lt;li>&lt;code>/etc/bashrc&lt;/code>:是针对所有用户的bash初始化文件，在此中设定的环境变量将应用于所有用户的shell中，此文件会在&lt;strong>用户每次打开shell时执行一次&lt;/strong>。（即每次新开一个终端，都会执行&lt;code>/etc/bashrc&lt;/code>）。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>用户级（这些文件处于用户根目录下）：
&lt;ol>
&lt;li>&lt;code>~/.profile&lt;/code>:对应当前登录用户的profile文件，用于定制当前用户的个人工作环境(变量是永久性)，每个用户都可使用该文件输入专用于自己使用的shell信息,&lt;strong>当用户登录时,该文件仅仅执行一次&lt;/strong>!&lt;/li>
&lt;li>&lt;code>~/.bashrc&lt;/code>:该文件包含专用于你的bash shell的bash信息，当登录时以及&lt;strong>每次打开新的shell时，该文件被读取&lt;/strong>。(&lt;code>~/.bashrc&lt;/code>只针对当前用户，变量的生命周期是永久的)。&lt;/li>
&lt;li>&lt;code>~/.bash_profile or ~./bash_login:~/.bash_profile&lt;/code>是交互式login 方式进入&lt;code>bash&lt;/code>运行的，&lt;code>~/.bashrc&lt;/code>是交互式&lt;code>non-login&lt;/code>方式进入&lt;code>bash&lt;/code>运行的通常二者设置大致相同，所以通常前者会调用后者。每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次。&lt;/li>
&lt;li>&lt;code>~/.bash_logout&lt;/code>:当&lt;strong>每次退出系统&lt;/strong>（退出bash shell）时，执行该文件。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>系统级环境变量如&lt;code>/etc/profile&lt;/code>中设定的变量(全局)的可以作用于任何用户,而用户级环境变量如&lt;code>~/.bashrc&lt;/code>等中设定的变量(局部)只能继承&lt;code>/etc/profile&lt;/code>中的变量,他们是”父子”关系。&lt;/p>
&lt;p>另外，如果只是临时的增加变量，使用&lt;code>export&lt;/code>命令声明即可，变量在关闭shell时失效。所添加变量的优先级取决于&lt;code>export&lt;/code>命令中变量的顺序如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 低优先级&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$NEW_VAR&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 高优先级&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$NEW_VAR&lt;/span>:&lt;span class="nv">$PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ssh与sshd设置">SSH与sshd设置&lt;/h2>
&lt;p>一般情况下，Debain这类Linux发行版自带ssh服务器（openssh-server）和客户端（openssh-client）。&lt;/p>
&lt;p>&lt;strong>服务端设置&lt;/strong>：修改sshd的端口，端口设置在&lt;code>/etc/ssh/sshd_config&lt;/code>，其他还要注意以下配置项：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 修改端口，默认22，最好改成别的,比如5122&lt;/span>
&lt;span class="ln"> 2&lt;/span>Port &lt;span class="m">22&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">#AddressFamily any&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 监听IP地址，0.0.0.0表示任意IP&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">#ListenAddress 0.0.0.0&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">#ListenAddress ::&lt;/span>
&lt;span class="ln"> 7&lt;/span>............
&lt;span class="ln"> 8&lt;/span>............
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 是否允许root通过ssh登录，如果你只有root用户，千万不要设置成no&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 其他情况下最好设置成no&lt;/span>
&lt;span class="ln">11&lt;/span>PermitRootLogin yes
&lt;span class="ln">12&lt;/span>&lt;span class="c1">#StrictModes yes&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">#MaxAuthTries 6&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1">#MaxSessions 10&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># 通过公钥登录，如果需要就去掉前面的注释符&lt;/span>
&lt;span class="ln">16&lt;/span>PubkeyAuthentication yes
&lt;span class="ln">17&lt;/span>&lt;span class="c1"># 指定存放客户端ssh公钥的文件的位置&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c1"># Expect .ssh/authorized_keys2 to be disregarded by default in future.&lt;/span>
&lt;span class="ln">19&lt;/span>AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
&lt;span class="ln">20&lt;/span>............
&lt;span class="ln">21&lt;/span>............
&lt;span class="ln">22&lt;/span>&lt;span class="c1"># 这里是否保持客户端长连接可以设置成60&lt;/span>
&lt;span class="ln">23&lt;/span>ClientAliveInterval &lt;span class="m">60&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c1">#ClientAliveCountMax 3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后需要重启ssh生效。&lt;/p>
&lt;p>&lt;strong>客户端设置&lt;/strong>：windows系统，推荐使用&lt;strong>MobaXterm&lt;/strong>，&lt;a href="https://mobaxterm.mobatek.net/">https://mobaxterm.mobatek.net/&lt;/a>。记住，将settings-&amp;gt;ssh-&amp;gt;SSH keepalive选上。不然会自动断开连接。Linux系统使用默认的bash就可以。&lt;/p>
&lt;p>如果需要使用&lt;strong>公钥登录服务端&lt;/strong>，则还要生成公私钥对。公私钥对是客户端生成的，将客户端的公钥内容复制到服务端的&lt;code>.ssh/authorized_keys&lt;/code>文件中，如果需有多个公钥则一行一个的复制粘贴。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 生成公私钥对，下面一路回车即可&lt;/span>
&lt;span class="ln">2&lt;/span>$ ssh-keygen -t rsa
&lt;span class="ln">3&lt;/span>Generating public/private rsa key pair.
&lt;span class="ln">4&lt;/span>Enter file in which to save the key &lt;span class="o">(&lt;/span>++++++++++&lt;span class="o">)&lt;/span>:
&lt;span class="ln">5&lt;/span>Created directory &lt;span class="s1">&amp;#39;++++++++++&amp;#39;&lt;/span>.
&lt;span class="ln">6&lt;/span>Enter passphrase &lt;span class="o">(&lt;/span>empty &lt;span class="k">for&lt;/span> no passphrase&lt;span class="o">)&lt;/span>:
&lt;span class="ln">7&lt;/span>Enter same passphrase again:
&lt;span class="ln">8&lt;/span>Your identification has been saved in ++++++++++/id_rsa.
&lt;span class="ln">9&lt;/span>Your public key has been saved in ++++++++++/id_rsa.pub.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>'++++++++++'指的是公私钥对存放的位置，打开该位置，然后将&lt;code>id_rsa.pub&lt;/code>文件中的内容复制出来，放到&lt;strong>服务端&lt;/strong>的&lt;code>.ssh/authorized_keys&lt;/code>文件中，即可通过公钥登录ssh服务端。&lt;/p>
&lt;h2 id="nginx设置">Nginx设置&lt;/h2>
&lt;p>安装nginx：&lt;code>sudo apt install nginx&lt;/code>。需要指出nginx的命令默认放在&lt;code>/usr/sbin/nginx&lt;/code>，根据所以只有&lt;code>$PATH&lt;/code>包含了此路径且有权限才可以使用。而&lt;code>/sbin&lt;/code>这种一般是root用户才能使用的，所以运行nginx的命令要加&lt;code>sudo&lt;/code>。&lt;/p>
&lt;p>Nginx软件本身的设置在&lt;code>/etc/nginx/nginx.conf&lt;/code>，如果不是对Nginx与http协议很熟悉，建议不要更改。我们一般要改的网站设置放在&lt;code>/etc/nginx/sites-available&lt;/code>文件下，默认有一个&lt;code>default&lt;/code>文件，里面存放了一个默认的网站设置，下面我举个完整配置的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>server &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1"># 这里指定Nginx监听的端口，即网站的端口IPv4，IPv6&lt;/span>
&lt;span class="ln"> 3&lt;/span> listen &lt;span class="m">8888&lt;/span> default_server&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> listen &lt;span class="o">[&lt;/span>::&lt;span class="o">]&lt;/span>:8888 default_server&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1"># SSL configuration SSL设置，即Https监听设置 默认443端口&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1"># listen 443 ssl default_server;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1"># listen [::]:443 ssl default_server;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1"># Self signed certs generated by the ssl-cert package&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1"># Don&amp;#39;t use them in a production server!&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1"># include snippets/snakeoil.conf;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># 指定此网站的目录，以此为网站的根目录&lt;/span>
&lt;span class="ln">16&lt;/span> root /var/www/html&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1"># Add index.php to the list if you are using PHP&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1"># 打开的默认文件，如果没有指定文件，默认寻找以下几个文件&lt;/span>
&lt;span class="ln">20&lt;/span> index index.html index.htm index.nginx-debian.html&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> server_name _&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c1"># 对网站根目录的设置&lt;/span>
&lt;span class="ln">24&lt;/span> location / &lt;span class="o">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="c1"># First attempt to serve request as file, then&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1"># as directory, then fall back to displaying a 404.&lt;/span>
&lt;span class="ln">27&lt;/span> try_files &lt;span class="nv">$uri&lt;/span> &lt;span class="nv">$uri&lt;/span>/ &lt;span class="o">=&lt;/span>404&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># 以根目录的基准下面一个加密文件夹的设置&lt;/span>
&lt;span class="ln">30&lt;/span> location /encryption/ &lt;span class="o">{&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="c1"># 运行目录遍历&lt;/span>
&lt;span class="ln">32&lt;/span> autoindex on&lt;span class="p">;&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="c1"># 不允许查看文件大小&lt;/span>
&lt;span class="ln">34&lt;/span> autoindex_exact_size off&lt;span class="p">;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c1"># 设置默认字符集&lt;/span>
&lt;span class="ln">36&lt;/span> charset utf-8&lt;span class="p">;&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="c1"># 请输入验证码的提示&lt;/span>
&lt;span class="ln">38&lt;/span> auth_basic &lt;span class="s2">&amp;#34;Please complete user authentication&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="c1"># 存放加密认证文件的位置，这个是自己指定的，使用Apache的htpasswd工具来创建密码文件&lt;/span>
&lt;span class="ln">40&lt;/span> auth_basic_user_file /etc/nginx/vhost/htpasswd&lt;span class="p">;&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="c1"># 这里是PHP的设置，不用PHP的可以不管&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="c1"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="c1">#location ~ \.php$ {&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="c1"># include snippets/fastcgi-php.conf;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="c1"># # With php5-cgi alone:&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="c1"># fastcgi_pass 127.0.0.1:9000;&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="c1"># # With php5-fpm:&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="c1"># fastcgi_pass unix:/var/run/php5-fpm.sock;&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="c1">#}&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="c1"># .htaccess可以实现每个文件夹更精细的功能，不详细展开，可参考官方文档&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="c1"># deny access to .htaccess files, if Apache&amp;#39;s document root&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="c1"># concurs with nginx&amp;#39;s one&lt;/span>
&lt;span class="ln">56&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="c1">#location ~ /\.ht {&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="c1"># deny all;&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="c1">#}&lt;/span>
&lt;span class="ln">60&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置文件中以每一个&lt;code>server{...}&lt;/code>为一个网址的配置内容。如果需要在同一个Nginx部署多个网站，可以通过&lt;strong>端口&lt;/strong>或者&lt;strong>别名&lt;/strong>区分。虽然说可以把多个网站配置放在同一个文件中，我还是建议在&lt;code>/etc/nginx/sites-available&lt;/code>文件下为每一个网站单独建个文件。比如说有两个网站，我们可以分别在&lt;code>/etc/nginx/sites-available&lt;/code>建立&lt;code>website1,website2&lt;/code>两个文件，每个文件中分别放一个&lt;code>server{...}&lt;/code>配置。&lt;/p>
&lt;p>刚开始的时候，我不清楚&lt;code>/etc/nginx/sites-available&lt;/code>，&lt;code>/etc/nginx/sites-enabled&lt;/code>的区别。其实，&lt;code>sites-enabled&lt;/code>文件下放置都是来自&lt;code>sites-enabled&lt;/code>下文件的软链接。Nginx只读取&lt;code>sites-enabled&lt;/code>下的软连接内容，也就是说Nginx只上线&lt;code>sites-enabled&lt;/code>下的配置网站。我们写把配置都写在&lt;code>sites-enabled&lt;/code>文件夹中，如果认为某个网站配置（比如&lt;code>website2&lt;/code>文件）没有问题可以上线了，就在&lt;code>sites-enabled&lt;/code>文件夹中使用&lt;code>ln -s /etc/nginx/sites-available/website2 /etc/nginx/sites-enabled/website2&lt;/code>，让Nginx读取website2的配置，然后我们使用&lt;code>nginx -t&lt;/code>测试配置文件是否正确，如果正确则显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
&lt;span class="ln">2&lt;/span>nginx: configuration file /etc/nginx/nginx.conf &lt;span class="nb">test&lt;/span> is successful
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后即可重启Nginx，是新的配置生效。&lt;/p>
&lt;h2 id="anaconda安装">Anaconda安装&lt;/h2>
&lt;p>由于国外的源速度较慢，我们使用清华源来安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh
&lt;span class="ln"> 2&lt;/span>--2021-11-19 00:46:58-- https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh
&lt;span class="ln"> 3&lt;/span>Resolving mirrors.tuna.tsinghua.edu.cn &lt;span class="o">(&lt;/span>mirrors.tuna.tsinghua.edu.cn&lt;span class="o">)&lt;/span>... 101.6.15.130, 2402:f000:1:400::2
&lt;span class="ln"> 4&lt;/span>Connecting to mirrors.tuna.tsinghua.edu.cn &lt;span class="o">(&lt;/span>mirrors.tuna.tsinghua.edu.cn&lt;span class="o">)&lt;/span>&lt;span class="p">|&lt;/span>101.6.15.130&lt;span class="p">|&lt;/span>:443... connected.
&lt;span class="ln"> 5&lt;/span>HTTP request sent, awaiting response... &lt;span class="m">200&lt;/span> OK
&lt;span class="ln"> 6&lt;/span>Length: &lt;span class="m">667976437&lt;/span> &lt;span class="o">(&lt;/span>637M&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>application/octet-stream&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 7&lt;/span>Saving to: ‘Anaconda3-5.3.1-Linux-x86_64.sh’
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>Anaconda3-5.3.1-Linux-x86_64.sh 100%&lt;span class="o">[=============================================================&lt;/span>&amp;gt;&lt;span class="o">]&lt;/span> 637.03M 10.5MB/s in 56s
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>2021-11-19 00:47:55 &lt;span class="o">(&lt;/span>11.3 MB/s&lt;span class="o">)&lt;/span> - ‘Anaconda3-5.3.1-Linux-x86_64.sh’ saved &lt;span class="o">[&lt;/span>667976437/667976437&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载好之后，在下载目录目录中，出现一个Anaconda3-5.3.1-Linux-x86_64.sh这样子的文件，运行它就好,切换到该文件目录运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bash Anaconda3-5.3.1-Linux-x86_64.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后接下来会要有几次配置环境变量操作，一般默认就行。注意，安装完后需要退出终端后，再次进入才能输入conda命令。&lt;/p>
&lt;p>如果显示&amp;quot;command not found&amp;quot;，则将&lt;code>conda&lt;/code>添加到环境变量中&lt;code>echo 'export PATH=&amp;quot;~/anaconda3/bin:$PATH&amp;quot;' &amp;gt;&amp;gt; ~/.bashrc&lt;/code>，更新bashrc以立即生效，&lt;code>source ~/.bashrc&lt;/code>。配置好PATH后，可以通过which conda或conda –version命令检查是否正确。&lt;/p>
&lt;h2 id="jupyter-notebook">Jupyter notebook&lt;/h2>
&lt;p>python3 pip 安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ pip3 install jupyter
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 如果出现&amp;#34;Faied building wheel for cffi&amp;#34;的错误则安装以下：&lt;/span>
&lt;span class="ln">3&lt;/span>$ sudo apt-get install libssl-dev libffi-dev python3-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用nvm安装nodejs">使用NVM安装Nodejs&lt;/h2>
&lt;p>首先安装NVM，其官方说明文件在&lt;a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm&lt;/a>，有具体的安装脚本。&lt;/p>
&lt;p>nvm安装完后就可以开始管理nodejs的版本了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 最新的lts版本&lt;/span>
&lt;span class="ln">2&lt;/span>nvm install --lts
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 目前最新的lts版本是v16.13.0 （2021.11.18）&lt;/span>
&lt;span class="ln">4&lt;/span>$ node -v
&lt;span class="ln">5&lt;/span>v16.13.0
&lt;span class="ln">6&lt;/span>$ npm -v
&lt;span class="ln">7&lt;/span>8.1.0
&lt;span class="ln">8&lt;/span>$ nvm -v
&lt;span class="ln">9&lt;/span>0.39.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即得到最新的稳定版node与npm。&lt;/p>
&lt;h3 id="安装hexo">安装Hexo&lt;/h3>
&lt;p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。官方文档：&lt;a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ npm install hexo-cli -g
&lt;span class="ln"> 2&lt;/span>$ mkdir -p nodejs &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> nodejs
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># 使用hexo，初始化&lt;/span>
&lt;span class="ln"> 4&lt;/span>$ hexo init hexoblog
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># 生成静态文件&lt;/span>
&lt;span class="ln"> 6&lt;/span>$ hexo generate
&lt;span class="ln"> 7&lt;/span>INFO Validating config
&lt;span class="ln"> 8&lt;/span>INFO Start processing
&lt;span class="ln"> 9&lt;/span>INFO Files loaded in &lt;span class="m">80&lt;/span> ms
&lt;span class="ln">10&lt;/span>WARN No layout: 2021/11/19/hello-world/index.html
&lt;span class="ln">11&lt;/span>WARN No layout: archives/index.html
&lt;span class="ln">12&lt;/span>WARN No layout: archives/2021/index.html
&lt;span class="ln">13&lt;/span>WARN No layout: archives/2021/11/index.html
&lt;span class="ln">14&lt;/span>WARN No layout: index.html
&lt;span class="ln">15&lt;/span>INFO Generated: archives/index.html
&lt;span class="ln">16&lt;/span>INFO Generated: archives/2021/index.html
&lt;span class="ln">17&lt;/span>INFO Generated: archives/2021/11/index.html
&lt;span class="ln">18&lt;/span>INFO Generated: index.html
&lt;span class="ln">19&lt;/span>INFO Generated: 2021/11/19/hello-world/index.html
&lt;span class="ln">20&lt;/span>INFO &lt;span class="m">5&lt;/span> files generated in &lt;span class="m">14&lt;/span> ms
&lt;span class="ln">21&lt;/span>&lt;span class="c1"># 测试网页&lt;/span>
&lt;span class="ln">22&lt;/span>$ hexo server
&lt;span class="ln">23&lt;/span>INFO Validating config
&lt;span class="ln">24&lt;/span>INFO Start processing
&lt;span class="ln">25&lt;/span>INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="切换hexo主题">切换Hexo主题&lt;/h3>
&lt;h2 id="docker安装与配置">Docker安装与配置&lt;/h2>
&lt;p>官方文档安装指南：&lt;a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/&lt;/a>&lt;/p>
&lt;p>x86/amd64系统请查看Install using the repository这一节，如果是在树莓派上安装docker，查看Install using the convenience script这一节。&lt;/p>
&lt;p>安装完之后查看&lt;a href="https://docs.docker.com/engine/install/linux-postinstall/">https://docs.docker.com/engine/install/linux-postinstall/&lt;/a>来自己选取一些需要的配置。比如我这里需要这节中的非&lt;code>sudo&lt;/code>使用Docker，则参看“Manage Docker as a non-root user”这一节。&lt;/p>
&lt;h2 id="jenkins安装与使用">Jenkins安装与使用&lt;/h2>
&lt;p>Jenkins官方安装指：&lt;a href="https://www.jenkins.io/doc/book/installing/linux/#debianubuntu">https://www.jenkins.io/doc/book/installing/linux/#debianubuntu&lt;/a>&lt;/p>
&lt;p>如果jenkins未启动，通过执行以下命令启用并启动Jenkins服务：&lt;code>sudo systemctl enable --now jenkins&lt;/code>&lt;/p>
&lt;p>初次访问jenkins(默认8080端口)，需要复制&lt;code>/var/lib/jenkins/secrets/initialAdminPassword&lt;/code>文件夹下的密码。接下来要安装jenkins插件，在下一个屏幕上，安装向导将询问您是否要安装建议的插件或要选择特定的插件。对于初学者，单击Install suggested plugins（安装社区推荐的插件）框即可，安装过程将立即开始。漫长的等待之后，系统将提示您设置第一个管理员用户。填写所需的信息，然后保存并继续。然后使用其默认生成的IP(或域名)以及端口即可。&lt;/p>
&lt;p>完成后，我们将被重定向到以前面的步骤之一创建的admin用户身份登录的Jenkins仪表板。至此，我们已经在系统上成功安装了Jenkins。&lt;/p>
&lt;p>PS：安装完成后，如果apt库立的jenkins库总是拖速度，可以把jenkins源删掉&lt;code>sudo rm /etc/apt/sources.list.d/jenkins.list&lt;/code>。&lt;/p>
&lt;h2 id="gitlab安装">Gitlab安装&lt;/h2>
&lt;p>Gitlab有debian的官方安装教程，请参考&lt;a href="https://about.gitlab.com/install/#debian">https://about.gitlab.com/install/#debian&lt;/a>。&lt;/p>
&lt;h2 id="linux目录结构与用处">Linux目录结构与用处&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>/bin&lt;/strong>：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。&lt;/li>
&lt;li>/boot：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&lt;/li>
&lt;li>/dev：dev是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。&lt;/li>
&lt;li>&lt;strong>/etc&lt;/strong>：etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的&lt;strong>配置文件&lt;/strong>和子目录。&lt;strong>常见的配置文件都在这里&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>/home&lt;/strong>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。&lt;strong>一般用来存放各个用户自己的用户程序和数据&lt;/strong>。&lt;/li>
&lt;li>/lib（还包括/lib32,/lib64,/libx32）：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。&lt;/li>
&lt;li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。&lt;/li>
&lt;li>/media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。&lt;/li>
&lt;li>/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。&lt;/li>
&lt;li>/opt：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。&lt;/li>
&lt;li>/proc：proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的&lt;strong>内容不在硬盘上而是在内存里&lt;/strong>，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：&lt;code>echo 1 &amp;gt; /proc/sys/net/ipv4/icmp_echo_ignore_all&lt;/code>；但是对这个文件中修改都是只在本次开机运行期间有效。&lt;/li>
&lt;li>/root：该目录为系统管理员，也称作超级权限者的用户主目录。&lt;/li>
&lt;li>/sbin：s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。&lt;/li>
&lt;li>/srv：该目录存放一些服务启动之后需要提取的数据。&lt;/li>
&lt;li>/sys：这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。&lt;/li>
&lt;li>/tmp：tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。&lt;/li>
&lt;li>&lt;strong>/usr&lt;/strong>： usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，&lt;strong>类似于 windows 下的 program files 目录&lt;/strong>。/usr 是系统核心所在，包含了所有的共享文件。它是 unix 系统中最重要的目录之一，涵盖了二进制文件，各种文档，各种头文件，还有各种库文件；还有诸多程序，例如 ftp，telnet 等等。
&lt;ul>
&lt;li>&lt;strong>/usr/bin&lt;/strong> : 所有可执行文件，如 gcc，firefox 等（指不包含在 /sbin 和 /bin 内的）；&lt;/li>
&lt;li>/usr/include : 各种头文件，编译文件等时需要使用；&lt;/li>
&lt;li>/usr/include/’package-name’ : 程序特定的头文件；&lt;/li>
&lt;li>/usr/lib : 所以可执行文件所需要的库文件；&lt;/li>
&lt;li>/usr/local : /usr 通常只包含系统发行时自带的程序，而 /usr/local 则是本地系统管理员用来自由添加程序的目录；
&lt;ul>
&lt;li>/usr/local/bin 本地增加的命令&lt;/li>
&lt;li>/usr/local/lib 本地增加的库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>/usr/share : 它包含了各种程序间的共享文件，如字体，图标，文档等。（/usr/local 对应的目录是 /usr/loca/share）&lt;/li>
&lt;li>/usr/src : linux 内核的源码和说明文档等；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>/var&lt;/strong>：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。&lt;/li>
&lt;li>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。&lt;/li>
&lt;/ul></description></item><item><title>linux-su_sudo-各用户环境空间</title><link>https://surprisedcat.github.io/projectnotes/linux-su_sudo-%E5%90%84%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E7%A9%BA%E9%97%B4/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-su_sudo-%E5%90%84%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83%E7%A9%BA%E9%97%B4/</guid><description>
&lt;h2 id="linux中susu--sudo各用户环境空间---omit-in-toc---">Linux中su，su -，sudo各用户环境空间&lt;!-- omit in toc -->&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#su%E4%B8%8Esu--">su与su -&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sudo%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98">sudo的环境变量问题&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89sudo-su">为什么有&lt;code>sudo su&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%9C%89%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%98%8E%E6%98%8E%E5%AE%89%E8%A3%85%E4%BA%86%E4%BD%86%E6%98%AF%E5%8D%B4command-not-found">有些命令明明安装了但是却&amp;quot;command not found&amp;quot;&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们在需要root权限时，常用&lt;code>su,su -,sudo&lt;/code>三种命令，它们的全称是：&lt;/p>
&lt;ul>
&lt;li>sudo = Super user do 超级用户do&lt;/li>
&lt;li>su = Shift user 切换用户&lt;/li>
&lt;/ul>
&lt;p>其中，su命令会直接切换到root，而sudo只是临时使用root身份。同时&lt;code>su&lt;/code>命令要求输入的密码是root用户的密码，&lt;code>sudo&lt;/code>需要输入当前用户的密码（注意，当你是root用户是，切换到本机的其他任何用户都是不需要输入密码的）。除却表面上的区别，他们深层的环境变量也是不一样的，本文将详细说明。&lt;/p>
&lt;h2 id="su与su--">su与su -&lt;/h2>
&lt;p>联系：都是切换到root&lt;/p>
&lt;p>区别：前者只是切换了root身份，但Shell&lt;strong>环境仍然是普通用户&lt;/strong>的Shell；而后者连用户和Shell&lt;strong>环境一起切换成root身份了&lt;/strong>。只有切换了Shell环境才不会出现PATH环境变量错误。&lt;code>su&lt;/code>切换成root用户以后，&lt;code>pwd&lt;/code>一下，发现工作目录仍然是普通用户的工作目录；而用&lt;code>su -&lt;/code>命令切换以后，工作目录变成root的工作目录了。用&lt;code>echo $PATH&lt;/code>命令看一下&lt;code>su&lt;/code>和&lt;code>su -&lt;/code>以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用&lt;code>su -&lt;/code>命令。&lt;/p>
&lt;p>使用&lt;code>su -&lt;/code>命令，环境变量发生了变化。补充，如果需要切换到其他用户且环境也跟着切换，则用&lt;code>su - username&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ su -
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># env&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">SHELL&lt;/span>&lt;span class="o">=&lt;/span>/bin/bash
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">HISTSIZE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3000&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">LANGUAGE&lt;/span>&lt;span class="o">=&lt;/span>en_US.utf8
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">HISTTIMEFORMAT&lt;/span>&lt;span class="o">=&lt;/span>%F %T
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="o">=&lt;/span>/root &lt;span class="c1"># 这里切换到了/root&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">LOGNAME&lt;/span>&lt;span class="o">=&lt;/span>root
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">HOME&lt;/span>&lt;span class="o">=&lt;/span>/root
&lt;span class="ln">10&lt;/span>&lt;span class="nv">LANG&lt;/span>&lt;span class="o">=&lt;/span>en_US.utf8
&lt;span class="ln">11&lt;/span>&lt;span class="nv">PROMPT_COMMAND&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">history&lt;/span> -a&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">TERM&lt;/span>&lt;span class="o">=&lt;/span>xterm
&lt;span class="ln">13&lt;/span>&lt;span class="nv">USER&lt;/span>&lt;span class="o">=&lt;/span>root
&lt;span class="ln">14&lt;/span>&lt;span class="nv">SHLVL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin &lt;span class="c1"># 这里的PATH变成了root的PATH&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nv">MAIL&lt;/span>&lt;span class="o">=&lt;/span>/var/mail/root
&lt;span class="ln">17&lt;/span>&lt;span class="nv">_&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/env
&lt;span class="ln">18&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>su&lt;/code>命令，环境变量不变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ su
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># env&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">SHELL&lt;/span>&lt;span class="o">=&lt;/span>/bin/bash
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">NVM_INC&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch/.nvm/versions/node/v16.13.0/include/node
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">CONDA_EXE&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch/anaconda3/bin/conda
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">_CE_M&lt;/span>&lt;span class="o">=&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">HISTSIZE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3000&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">LANGUAGE&lt;/span>&lt;span class="o">=&lt;/span>en_US.utf8
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">HISTTIMEFORMAT&lt;/span>&lt;span class="o">=&lt;/span>%F %T
&lt;span class="ln">10&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch &lt;span class="c1"># 这里没有变&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">LOGNAME&lt;/span>&lt;span class="o">=&lt;/span>lelouch
&lt;span class="ln">12&lt;/span>&lt;span class="nv">XDG_SESSION_TYPE&lt;/span>&lt;span class="o">=&lt;/span>tty
&lt;span class="ln">13&lt;/span>&lt;span class="nv">HOME&lt;/span>&lt;span class="o">=&lt;/span>/root
&lt;span class="ln">14&lt;/span>&lt;span class="nv">LANG&lt;/span>&lt;span class="o">=&lt;/span>en_US.utf8
&lt;span class="ln">15&lt;/span>&lt;span class="nv">LS_COLORS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">rs&lt;/span>&lt;span class="o">=&lt;/span>0:di&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>34:ln&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>36:mh&lt;span class="o">=&lt;/span>00:pi&lt;span class="o">=&lt;/span>40&lt;span class="p">;&lt;/span>33:so&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:do&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:bd&lt;span class="o">=&lt;/span>40&lt;span class="p">;&lt;/span>33&lt;span class="p">;&lt;/span>01:cd&lt;span class="o">=&lt;/span>40&lt;span class="p">;&lt;/span>33&lt;span class="p">;&lt;/span>01:or&lt;span class="o">=&lt;/span>40&lt;span class="p">;&lt;/span>31&lt;span class="p">;&lt;/span>01:mi&lt;span class="o">=&lt;/span>00:su&lt;span class="o">=&lt;/span>37&lt;span class="p">;&lt;/span>41:sg&lt;span class="o">=&lt;/span>30&lt;span class="p">;&lt;/span>43:ca&lt;span class="o">=&lt;/span>30&lt;span class="p">;&lt;/span>41:tw&lt;span class="o">=&lt;/span>30&lt;span class="p">;&lt;/span>42:ow&lt;span class="o">=&lt;/span>34&lt;span class="p">;&lt;/span>42:st&lt;span class="o">=&lt;/span>37&lt;span class="p">;&lt;/span>44:ex&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>32:*.tar&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tgz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.arc&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.arj&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.taz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lha&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lz4&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lzh&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lzma&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tlz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.txz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tzo&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.t7z&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.zip&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.z&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.dz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.gz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lrz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.lzo&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.xz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.zst&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tzst&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.bz2&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.bz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tbz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tbz2&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.tz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.deb&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.rpm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.jar&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.war&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.ear&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.sar&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.rar&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.alz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.ace&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.zoo&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.cpio&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.7z&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.rz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.cab&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.wim&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.swm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.dwm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.esd&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>31:*.jpg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.jpeg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mjpg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mjpeg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.gif&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.bmp&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.pbm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.pgm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.ppm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.tga&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.xbm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.xpm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.tif&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.tiff&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.png&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.svg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.svgz&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mng&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.pcx&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mov&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mpg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mpeg&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.m2v&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mkv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.webm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.ogm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mp4&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.m4v&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.mp4v&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.vob&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.qt&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.nuv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.wmv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.asf&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.rm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.rmvb&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.flc&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.avi&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.fli&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.flv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.gl&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.dl&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.xcf&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.xwd&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.yuv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.cgm&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.emf&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.ogv&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.ogx&lt;span class="o">=&lt;/span>01&lt;span class="p">;&lt;/span>35:*.aac&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.au&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.flac&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.m4a&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.mid&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.midi&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.mka&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.mp3&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.mpc&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.ogg&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.ra&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.wav&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.oga&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.opus&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.spx&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:*.xspf&lt;span class="o">=&lt;/span>00&lt;span class="p">;&lt;/span>36:
&lt;span class="ln">16&lt;/span>&lt;span class="nv">PROMPT_COMMAND&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">history&lt;/span> -a&lt;span class="p">;&lt;/span> &lt;span class="nb">history&lt;/span> -a&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nv">SSH_CONNECTION&lt;/span>&lt;span class="o">=&lt;/span>223.72.75.152 &lt;span class="m">29724&lt;/span> 172.17.0.7 &lt;span class="m">5122&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nv">NVM_DIR&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch/.nvm
&lt;span class="ln">19&lt;/span>&lt;span class="nv">XDG_SESSION_CLASS&lt;/span>&lt;span class="o">=&lt;/span>user
&lt;span class="ln">20&lt;/span>&lt;span class="nv">TERM&lt;/span>&lt;span class="o">=&lt;/span>xterm
&lt;span class="ln">21&lt;/span>&lt;span class="nv">_CE_CONDA&lt;/span>&lt;span class="o">=&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">USER&lt;/span>&lt;span class="o">=&lt;/span>lelouch
&lt;span class="ln">23&lt;/span>&lt;span class="nv">CONDA_SHLVL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="nv">DISPLAY&lt;/span>&lt;span class="o">=&lt;/span>localhost:10.0
&lt;span class="ln">25&lt;/span>&lt;span class="nv">SHLVL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="c1"># SHLVL 是记录多个Bash进程实例嵌套深度的累加器，su实在原有shell下开子shell，而su - 是完全重开&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nv">NVM_CD_FLAGS&lt;/span>&lt;span class="o">=&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="nv">XDG_SESSION_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">101&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="nv">CONDA_PYTHON_EXE&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch/anaconda3/bin/python
&lt;span class="ln">29&lt;/span>&lt;span class="nv">XDG_RUNTIME_DIR&lt;/span>&lt;span class="o">=&lt;/span>/run/user/1000
&lt;span class="ln">30&lt;/span>&lt;span class="nv">SSH_CLIENT&lt;/span>&lt;span class="o">=&lt;/span>223.72.75.152 &lt;span class="m">29724&lt;/span> &lt;span class="m">5122&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games &lt;span class="c1"># 这里的PATH不变，保持lelouch用户的PATH变量&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="nv">DBUS_SESSION_BUS_ADDRESS&lt;/span>&lt;span class="o">=&lt;/span>unix:path&lt;span class="o">=&lt;/span>/run/user/1000/bus
&lt;span class="ln">33&lt;/span>&lt;span class="nv">MAIL&lt;/span>&lt;span class="o">=&lt;/span>/var/mail/root
&lt;span class="ln">34&lt;/span>&lt;span class="nv">NVM_BIN&lt;/span>&lt;span class="o">=&lt;/span>/home/lelouch/.nvm/versions/node/v16.13.0/bin
&lt;span class="ln">35&lt;/span>&lt;span class="nv">SSH_TTY&lt;/span>&lt;span class="o">=&lt;/span>/dev/pts/0
&lt;span class="ln">36&lt;/span>&lt;span class="nv">_&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/env
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sudo的环境变量问题">sudo的环境变量问题&lt;/h2>
&lt;p>&lt;code>sudo&lt;/code>执行命令的流程是当前用户切换到root（或其它指定切换到的用户），然后以root（或其它指定的切换到的用户）身份执行命令，执行完成后，直接退回到当前用户。&lt;/p>
&lt;p>由上述流程可发现&lt;code>sudo&lt;/code>命令的初衷是让用户临时有root权限，因此&lt;strong>只会对环境变量做最小修改&lt;/strong>。其他皆继承原有用户的环境变量。最典型的就是&lt;code>$PATH&lt;/code>变量。如果不在配置文件中做修改，&lt;code>sudo&lt;/code>命令下的环境&lt;code>$PATH&lt;/code>变量和原来是一样的。可是，有很多命令是在&lt;code>/sbin&lt;/code>这类文件夹里的，这些是要通过&lt;code>sudo&lt;/code>的配置文件&lt;code>/etc/sudoers&lt;/code>来进行授权的，因此为了能让用户使用root的命令，一般会在&lt;code>/etc/sudoers&lt;/code>文件中对，环境变量进行适当修改，增加普通用户的权限，比如对&lt;code>$PATH&lt;/code>变量的修改就是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># sudoers文件中的Defaults选项来修改sudo的默认参数、环境、行为&lt;/span>
&lt;span class="ln">2&lt;/span>Defaults &lt;span class="nv">secure_path&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>总结：&lt;code>sudo&lt;/code>的环境是对原用户环境的最小修改，如果需要修改默认环境、动作，则需&lt;code>/etc/sudoers&lt;/code>文件进行修改配置。&lt;/p>
&lt;h2 id="为什么有sudo-su">为什么有&lt;code>sudo su&lt;/code>&lt;/h2>
&lt;p>因为使用&lt;code>su&lt;/code>命令或直接以root用户身份登录有风险，所以，一些 Linux发行版（如 Ubuntu）默认禁用 root 用户帐户。鼓励用户在需要root权限时使用&lt;code>sudo&lt;/code>命令。&lt;/p>
&lt;p>然而，您还是可以成功执行&lt;code>su&lt;/code>命令，而不用输入root用户的密码。那就是使用&lt;code>sudo su&lt;/code>。&lt;/p>
&lt;p>由于你使用&lt;code>sudo&lt;/code>运行命令，你只需要输入当前用户的密码。所以，一旦完成操作，&lt;code>su&lt;/code>命令将会以root用户身份运行，这意味着它不会再要求输入任何密码。&lt;/p>
&lt;h2 id="有些命令明明安装了但是却command-not-found">有些命令明明安装了但是却&amp;quot;command not found&amp;quot;&lt;/h2>
&lt;p>这就是各用户&lt;code>$PATH&lt;/code>环境变量不同的问题。典型的就是root用户和非root用户的&lt;code>$PATH&lt;/code>环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 非root用户&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PATH&lt;/span>
&lt;span class="ln">3&lt;/span>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># root用户&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># echo $PATH&lt;/span>
&lt;span class="ln">6&lt;/span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>各个&lt;code>/sbin&lt;/code>文件的“s”就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。&lt;/p>
&lt;p>我们只要把命令的路径添加到&lt;code>$PATH&lt;/code>中即可直接运行命令。&lt;/p></description></item><item><title>Shell 概要</title><link>https://surprisedcat.github.io/projectnotes/shell-%E6%A6%82%E8%A6%81/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-%E6%A6%82%E8%A6%81/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#shell%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5%E4%B8%AD%E8%8B%B1%E6%96%87">shell关键概念中英文&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell%E8%84%9A%E6%9C%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E8%A1%8C">shell脚本的第一行&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell%E8%84%9A%E6%9C%AC%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91%E7%AC%A6">shell脚本的重定向符&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7">一些特殊符号&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%8F%98%E9%87%8F">变量&lt;/a>&lt;/li>
&lt;li>&lt;a href="#path%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8">PATH路径中:的作用&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%AE%BF%E9%97%AEshell%E7%9A%84%E7%9A%84%E5%8F%82%E6%95%B0">访问Shell的的参数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%B7%9F%E8%B8%AA">简单的命令跟踪&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84">shell脚本中的“.”&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="shell-概述---omit-in-toc---">Shell 概述&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="shell关键概念中英文">shell关键概念中英文&lt;/h2>
&lt;ul>
&lt;li>blank：包含空格&lt;code>space&lt;/code>和制表符&lt;code>tab&lt;/code>&lt;/li>
&lt;li>control operator, 控制符：包含&lt;code>newline, '||', '&amp;amp;&amp;amp;', '&amp;amp;', ';', ';;', ';&amp;amp;', ';;&amp;amp;', '|', '|&amp;amp;', '(', ')'&lt;/code>&lt;/li>
&lt;li>field, 字段：shell扩展之一带来的文本单位。扩展后，当执行命令时，生成的字段将用作命令名称和参数&lt;/li>
&lt;li>job, 作业：在同一个进程组中的一系列进程，可由管道或衍生的进程组成&lt;/li>
&lt;li>job control, 作业控制：一种机制，用户可以通过该机制选择性地停止（挂起）并重新开始（恢复）进程的执行。&lt;/li>
&lt;li>metacharacter, 元字符：当不在引号中时，用于分割单词的字符，包括&lt;code>space, tab, newline, '|', '&amp;amp;', ';', '(', ')', '&amp;lt;', '&amp;gt;'&lt;/code>&lt;/li>
&lt;li>operator, 操作符：分为控制符或重定向符，操作符由至少一个元字符组成&lt;/li>
&lt;li>process group, 进程组：一系列具有相同组进程ID的进程&lt;/li>
&lt;li>reserved word, 保留字：对shell具有特殊含义的单词。，大多数保留字用于流程控制，如&lt;code>for, while, if&lt;/code>&lt;/li>
&lt;li>signal, 信号：一种机制，内核可以通过该机制将系统中发生的事件通知给进程&lt;/li>
&lt;li>token, 标记：可以被shell认为是一个独立单元的一串字符，分为单词word或操作符operator&lt;/li>
&lt;li>word, 单词：可以被shell认为是一个单元的一串字符，单词不能包括不带引号的元字符。&lt;/li>
&lt;/ul>
&lt;h2 id="shell脚本的第一行">shell脚本的第一行&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&amp;gt; &lt;span class="c1">#! /bin/sh -&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>-符号表示没有其他参数，防止一些欺骗攻击&lt;/li>
&lt;li>shell脚本的第一行长度一般不要超过64个字符&lt;/li>
&lt;/ul>
&lt;h2 id="shell脚本的重定向符">shell脚本的重定向符&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;gt;&lt;/strong> 表示将命令输出的内容重定向到其他位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ cat &amp;gt; nusers
&lt;span class="ln">2&lt;/span>who &lt;span class="p">|&lt;/span> wc -l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即将&lt;code>who | wc -l&lt;/code>复制到&lt;code>nusers&lt;/code>文件中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;gt;&amp;gt;&lt;/strong> 表示已用附加的方式重定向到指定文件。区别在于如果目标文件存在，会将内容附加到文档后面，而不会覆盖文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;lt;表示从其他地方而不是键盘接受输入&lt;code>patch --verbose --backup -p1 &amp;lt; /tmp/cx&lt;/code>，表示从/tmp/cx文件输入内容&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="一些特殊符号">一些特殊符号&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>;&lt;/strong> 表示一条命令输入结束，命令按顺序执行&lt;/li>
&lt;li>&lt;strong>＆&lt;/strong> 表示后台执行&amp;amp;之前的命令，直接在前台执行&amp;amp;之后的命令。&lt;/li>
&lt;li>&lt;strong>&amp;amp;&amp;amp;&lt;/strong> 用法&lt;code>command 1 &amp;amp;&amp;amp; command 2&lt;/code>，表示当&lt;code>command 1&lt;/code>执行成功后，再执行&lt;code>command 2&lt;/code>，如果不成功，则不执行&lt;code>command 2&lt;/code>。&lt;/li>
&lt;li>&lt;strong>||&lt;/strong> 用法&lt;code>command 1 || command 2&lt;/code>，表示若&lt;code>command 1&lt;/code>执行失败，则执行&lt;code>command 2&lt;/code>，如果执行成功，则不执行&lt;code>command 2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="变量">变量&lt;/h2>
&lt;p>Shell脚本中变量可以是（并且通常是）空值，&lt;code>null&lt;/code>。
变量赋值的时候&lt;code>VarName=VarValue&lt;/code>,如果&lt;code>VarValue&lt;/code>中间&lt;strong>有空格&lt;/strong>，则需要使用&lt;strong>双引号&lt;/strong>，包括&lt;code>VarValue&lt;/code>。变量引用的时候需要使用$符号,&lt;code>$VarName&lt;/code>;如果想在CMD终端显示有空格的&lt;code>VarValue&lt;/code>，需要使用&lt;code>echo&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nv">fullname&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$fullname&lt;/span>
&lt;span class="ln">3&lt;/span>hello world
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="path路径中的作用">PATH路径中:的作用&lt;/h2>
&lt;blockquote>
&lt;p>表示从哪里开始搜寻命令&lt;/p>
&lt;/blockquote>
&lt;h2 id="访问shell的的参数">访问Shell的的参数&lt;/h2>
&lt;p>访问shell的参数也就是说shell的命令行参数，例如&lt;code>myshell para1 para2&lt;/code>;在Shell函数里面用&lt;code>$1,$2,$3,.....,$9,${10}&lt;/code>表示。当参数&lt;strong>大于10个&lt;/strong>时，由于历史原因，需要用&lt;strong>大括号&lt;/strong>包裹起来。&lt;/p>
&lt;p>删除一个变量可以使用&lt;code>unset&lt;/code>命令，变量名&lt;strong>不用加$&lt;/strong>,即&lt;code>unset x&lt;/code>&lt;/p>
&lt;p>设置环境变量&lt;code>export VarName=VarValue&lt;/code>，使用&lt;code>env&lt;/code>命令可以查看所有的环境变量&lt;/p>
&lt;p>预定义变量和位置变量（位置变量也是预定义变量的一种，只是比较常见单独拿出来说）&lt;/p>
&lt;p>预定义变量有3个，&lt;code>$?,$$.$!&lt;/code>;位置变量有：&lt;code>$n,$*,$@,$#&lt;/code>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$0&lt;/td>
&lt;td>当前脚本的文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$n&lt;/td>
&lt;td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$#&lt;/td>
&lt;td>传递给脚本或函数的参数个数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$*&lt;/td>
&lt;td>传递给脚本或函数的所有参数。这种方式将所有参数作为一个整体。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$@&lt;/td>
&lt;td>传递给脚本或函数的所有参数。被双引号(&amp;quot; &amp;quot;)包含时，与 $* 稍有不同，会将每一个变量法分开表示。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$?&lt;/td>
&lt;td>上个命令的退出状态，或函数的返回值。&lt;strong>$?&lt;/strong>:表示上一个命令执行的结果，如果正常执行则返回0，非正常执行则为错误代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$$&lt;/td>
&lt;td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$!&lt;/td>
&lt;td>后台最后一个进程所表示的PID&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="简单的命令跟踪">简单的命令跟踪&lt;/h2>
&lt;p>在Shell中输入&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>set -x&lt;/code> 表示每一个命令使用+表示执行到哪一个命令&lt;br>
&lt;code>set +x&lt;/code> 表示取消跟踪&lt;br>
&lt;code>shell -x CMD&lt;/code> 表示追踪此CMD命令&lt;/p>
&lt;/blockquote>
&lt;h2 id="shell脚本中的">shell脚本中的“.”&lt;/h2>
&lt;p>shell脚本中，使用“&lt;code>.&lt;/code>”等同于使用&lt;code>source&lt;/code>，相当于在脚本中执行另一个脚本，但是执行的时候&lt;strong>共用一个shell&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>source&lt;/code>命令用法： &lt;code>source FileName&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>作用:在当前bash环境下读取并执行&lt;code>FileName&lt;/code>中的命令。该命令通常用命令“&lt;code>.&lt;/code>”来替代。&lt;code>source filepath&lt;/code>或者&lt;code>. filepath&lt;/code>，&lt;code>sh filepath&lt;/code>或者&lt;code>./filepath&lt;/code>区别：&lt;/p>
&lt;ol>
&lt;li>&lt;code>sh filepath&lt;/code>会重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell是新建的，其改变的变量不会被带回父shell，除非使用export。&lt;/li>
&lt;li>&lt;code>source filename&lt;/code>其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。&lt;/li>
&lt;/ol></description></item><item><title>python-深入理解Matplotlib3D绘图函数plot_surface的rstride和cstride参数</title><link>https://surprisedcat.github.io/projectnotes/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3matplotlib3d%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0plot_surface%E7%9A%84rstride%E5%92%8Ccstride%E5%8F%82%E6%95%B0/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3matplotlib3d%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0plot_surface%E7%9A%84rstride%E5%92%8Ccstride%E5%8F%82%E6%95%B0/</guid><description>
&lt;h2 id="深入理解-matplotlib-3d-绘图函数-plot_surface-的-rstride-和-cstride-参数---omit-in-toc---">深入理解 Matplotlib 3D 绘图函数 plot_surface 的 rstride 和 cstride 参数&lt;!-- omit in toc -->&lt;/h2>
&lt;p>今晚开始接触 Matplotlib 的 3D 绘图函数 plot_surface，真的非常强大，图片质量可以达到出版级别，而且 3D 图像可以旋转 ，可以从不同角度来看某个 3D 立体图，但是我发现各大中文开源社区有关 3D 绘图的代码都是千篇一律的，现除了看源码说明，我几乎得不到半点有关 plot_surface 的重要参数说明，而且我感觉纯英文的源码说明晦涩难懂，而且没有任何配图，初学者看得是云里雾里，经过一晚上的调试，我才完全弄明白所有参数的含义，以及如何改变这些参数控制图形的显示，现分享给大家Talk is cheap, show the code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># author: inspurer(月小水长)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># pc_type lenovo&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># create_date: 2019/1/23&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># file_name: 3DTest&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># github https://github.com/inspurer&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># qq_mail 2391527690@qq.com&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2">绘制3d图形
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">mpl_toolkits.mplot3d&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Axes3D&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 定义figure&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">fig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">figure&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># 创建3d图形的两种方式&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c1"># 将figure变为3d&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="n">ax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Axes3D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#ax = fig.add_subplot(111, projection=&amp;#39;3d&amp;#39;)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># 定义x, y&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c1"># 生成网格数据&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">meshgrid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="c1"># 计算每个点对的长度&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">R&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1"># 计算Z轴的高度&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">31&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1"># 绘制3D曲面&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="c1"># rstride:行之间的跨度 cstride:列之间的跨度&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="c1"># rcount:设置间隔个数，默认50个，ccount:列的间隔个数 不能与上面两个参数同时出现&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="c1"># cmap是颜色映射表&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="c1"># from matplotlib import cm&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="c1"># ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = cm.coolwarm)&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="c1"># cmap = &amp;#34;rainbow&amp;#34; 亦可&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1"># 我的理解的 改变cmap参数可以控制三维曲面的颜色组合, 一般我们见到的三维曲面就是 rainbow 的&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="c1"># 你也可以修改 rainbow 为 coolwarm, 验证我的结论&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot_surface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rstride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cstride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_cmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rainbow&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">43&lt;/span>
&lt;span class="ln">44&lt;/span>&lt;span class="c1"># 绘制从3D曲面到底部的投影,zdir 可选 &amp;#39;z&amp;#39;|&amp;#39;x&amp;#39;|&amp;#39;y&amp;#39;| 分别表示投影到z,x,y平面&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="c1"># zdir = &amp;#39;z&amp;#39;, offset = -2 表示投影到z = -2上&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contour&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_cmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;rainbow&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">47&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="c1"># 设置z轴的维度，x,y类似&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="n">ax&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_zlim&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;p>&lt;img src="../images/matplotlib_3d.png" alt="matplot3d">
其中大部分的参数说明我已经在注释了，应该很容易理解，其中的 rstride （row stride)和 cstride (column stride) (stride是步长的意思，row : 行，column : 列）参数也有了初步的介绍，下面重点讨论如何理解他们。&lt;/p>
&lt;h2 id="初探">初探&lt;/h2>
&lt;p>旋转3D图形：&lt;/p>
&lt;p>&lt;img src="../images/rototate_python.gif" alt="旋转3D图形">&lt;/p>
&lt;p>我发现无论是x向，还是y向，条纹数都是 32&lt;/p>
&lt;p>而这刚好是我们&lt;code>x = np.arange(-4, 4, 0.25)&lt;/code>中[4-（-4）]/0.25 = 32&lt;/p>
&lt;p>而&lt;code>ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = plt.get_cmap('rainbow'))&lt;/code>中rstride = 1, cstride = 1,r（row)对应x向，c(column)对应y向，rstride = 1说明在x向的条纹间隔为1个x向的间隔0.25，cstride = 1说明在y向的条纹间隔为1个y向的间隔0.25.而把&lt;code>rstride = 1, cstride = 1&lt;/code>去掉之后，我发现图形不变，说明1个距离是默认值。而且这两个参数只能是正整数，最小正整数就是1（默认值），所以为了图形的平滑，基本上我们不需要修改这个参数。&lt;/p>
&lt;h2 id="验证">验证&lt;/h2>
&lt;h3 id="修改参数使-rstride--4">修改参数，使 rstride = 4&lt;/h3>
&lt;p>其结果如下：&lt;/p>
&lt;p>&lt;img src="../images/matplotlib_rstride4.gif" alt="rstride=4">
32 / 4 = 8,x向的条纹数变成了 8 ，这符合我们的预期，看来我们得推测是正确的。&lt;/p>
&lt;h3 id="再修改参数使-cstride-也--4">再修改参数，使 cstride 也 = 4&lt;/h3>
&lt;p>其结果如下：&lt;/p>
&lt;p>&lt;img src="../images/matplotlib_cstride4.gif" alt="cstride=4">&lt;/p>
&lt;p>可以看到无论是x向，还是y向，条纹数都变成了 8 ，同时由于间距变大，图形也比原来更粗糙了。&lt;/p></description></item><item><title>数据库-左右内外连接与关键字1对n关系</title><link>https://surprisedcat.github.io/projectnotes/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%B7%A6%E5%8F%B3%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%971%E5%AF%B9n%E5%85%B3%E7%B3%BB/</link><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%B7%A6%E5%8F%B3%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%971%E5%AF%B9n%E5%85%B3%E7%B3%BB/</guid><description>
&lt;h2 id="数据库表连接与关键字对应---omit-in-toc---">数据库表连接与关键字对应&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="数据库表连接">数据库表连接&lt;/h2>
&lt;p>连接问题主要处理的是在两张表合并查询时，如果一个表中的关键字在另一个表中不存在的问题。&lt;/p>
&lt;p>数据库常见连接为：内连接和外连接，外连接分为左外连接、右外连接和全外连接。&lt;/p>
&lt;h2 id="合并中的关键字对应">合并中的关键字对应&lt;/h2>
&lt;p>一对一 一对多 多对多；复制呈多份&lt;/p></description></item><item><title>算法-字符串匹配</title><link>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</guid><description>
&lt;h2 id="字符串匹配算法---omit-in-toc---">字符串匹配算法&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="暴力查找">暴力查找&lt;/h2>
&lt;h2 id="kmp算法">KMP算法&lt;/h2>
&lt;h2 id="boyer-moore算法">Boyer-Moore算法&lt;/h2>
&lt;h2 id="rabin-karp指纹字符串查找">Rabin-Karp指纹字符串查找&lt;/h2></description></item><item><title>算法-图中找环</title><link>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E5%9B%BE%E4%B8%AD%E6%89%BE%E7%8E%AF/</link><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E5%9B%BE%E4%B8%AD%E6%89%BE%E7%8E%AF/</guid><description>
&lt;h2 id="图中找环---omit-in-toc---">图中找环&lt;!-- omit in toc -->&lt;/h2>
&lt;p>无向图与有向图&lt;/p>
&lt;h2 id="拓扑排序">拓扑排序&lt;/h2>
&lt;h2 id="深度遍历">深度遍历&lt;/h2>
&lt;h2 id="并查集">并查集&lt;/h2></description></item><item><title>算法-排序算法精炼</title><link>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%B2%BE%E7%82%BC/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%B2%BE%E7%82%BC/</guid><description>
&lt;h2 id="排序算法精炼---omit-in-toc---">排序算法精炼&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="tips">TIPS&lt;/h2>
&lt;p>本文讨论的都是升序排序（从小到大）。冒泡，选择，插入是基础算法。&lt;/p>
&lt;p>稳定排序：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。&lt;/p>
&lt;p>不稳定排序：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。&lt;/p>
&lt;h2 id="冒泡算法">冒泡算法&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，交换排序&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：两层循环（显然复杂度$n^2$），内循环的作用是让最大值“浮”到末尾，每次内循环浮动一个值。“浮”这个过程就是通过比较相邻元素然后交换。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：内循环可以用一个是否存在交换的swapFlag来优化，查看是否提前完成。还有就是内循环的中止项需要考虑。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度$O(n^2)$，空间复杂度$O(1)$；稳定排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">bubble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">index_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index_1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">index_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">swapFlag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index_2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">index_1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 将index_2作为最大值转移到最后,由于后面有index_2+1，所以这里只需要到len(l)-index_1-1&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">swapFlag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index_2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">index_2&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">swapFlag&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">index_1&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="选择排序">选择排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，选择排序&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：最简单直观，两层循环$O(n^2)$。内循环遍历未排序数组找到最大小，与未排序的第一位元素交换。每次内循环搞定一个值。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度$O(n^2)$，空间复杂度$O(1)$；不稳定排序。表现最稳定的排序算法之一，因为无论什么数据进去都是$O(n^2)$的时间复杂度&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">sel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1"># 最后一个必然排好，不需要&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">minEle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">minIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index1&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">minEle&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">minEle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">minIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index2&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">index2&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">minIndex&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">minIndex&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">index1&lt;/span>&lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="插入排序">插入排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，插入排序&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：两层循环$O(n^2)$。内循环从未排序的数组中随便哪一个，然后根据大小插入到已排序数组中。插入排序都采用in-place在数组上实现，不用额外内存，保证空间复杂度为$O(1)$&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：注意在while内循环终止时&lt;code>temp&lt;/code>大于&lt;code>l[index2]&lt;/code>，因此应该是&lt;code>l[index2+1] = temp&lt;/code>&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度$O(n^2)$，空间复杂度$O(1)$；稳定排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index1&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="c1"># 注意在while内循环中temp大于l[index2]&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="以上是三种基本算法">以上是三种基本算法&lt;/h2>
&lt;h2 id="希尔排序shell-sort">希尔排序（Shell Sort）&lt;/h2>
&lt;p>1959年Shell发明，第一个突破O(n2)的排序算法。&lt;/p>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，插入排序。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：简单插入排序的改进版。它与插入排序的不同之处在于，先按照间隔对子序列排序，逐渐缩小间隔直至1，完成最终排序。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：最坏情况为$O(n^2)$，平均情况好于最坏情况，空间复杂度为$O(1)$，不稳定排序。&lt;/p>
&lt;p>用的少，略。&lt;/p>
&lt;h2 id="归并排序">归并排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：归并排序大类&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：分治(Divide and Conquer)，递归。分成子序列至单个元素再合并。和选择排序一样，归并排序的性能不受输入数据的影响，但时间表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度，代价是额外的空间。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：关键是理解递归。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度$O(n\log n)$，空间复杂度$O(n)$，稳定排序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">sortRecursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">l1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sortRecursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">l2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sortRecursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">l3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">l2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">l3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">index1&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">l3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">index2&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">index1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">l3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index1&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">index2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">l3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index2&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速排序">快速排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，交换排序。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：快速排序首先选择一个中枢变量（一般选第一个元素），将比中枢变量小的放到左边，大的放到右边，形成&lt;strong>分区&lt;/strong>。再将左右分区依照选中枢变量--&amp;gt;分区的方式递归分区，直到只有一个元素，那么整个数组就排序完成了。我觉得是分治和冒泡排序的结合。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：算法实现时，都用的是in-place操作，其实另开空间更能体现算法思想。in-place将第一个元素后的空间作为存放左边分区的空间，最后再将第一位的pivot元素与左边分区的最后一个元素交换，实现最终分区。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：平均来说，快速排序的平均复杂度为$O(c_q n\log n)$，最坏情况为$c_q O(n^2)$。但是需要指出这个&lt;strong>常用系数$c_q$在几种排序算法中较小&lt;/strong>，因此在不太大的数组排序中，快排优势与归并和堆排序。空间复杂度取决于&lt;strong>递归的次数&lt;/strong>最好为$O(\log n)$，最坏为$O(n)$，此外快排也是不稳定排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">pivot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">p_current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="c1"># 选择第一个元素为pivot变量&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 分区&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">pivot&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># pivot元素在第一个，把小于pivot的元素从第二位开始逐个往后放&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">p_current&lt;/span>&lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1"># 把pivot与小于pivot的最后一个元素交换，让pivot元素成为分界线&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">p_current&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="堆排序">堆排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：比较排序大类，选择排序小类，没想到把堆排序和选择排序是亲戚。&lt;/p>
&lt;p>TIPS：堆是一种完全二叉树。大顶堆就是每个父节点都比其子节点大，小顶堆就是每个父节点都比子节点小。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：用给定数组建立大顶堆，&lt;strong>我们每次都选择大顶堆的树根节点（顶部节点），相当于选择排序中选取最大点&lt;/strong>。然后将其于未排序的最后节点交换，排在最后的就是有序区域。由于交换后可能破坏了堆的结构，因此堆无序区域进行调整。因此得到最大元素，直至完成排序。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：每次调整堆的过程叫做“Heapify”，是一个递归调整的过程。在第一次建立堆时，从最后一个非叶子节点从后往前以此调整。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：每次调整堆的最好、平均、最坏复杂度都是$O(\log n)$，一共需要调整$n$次，所以总体复杂度为$O(n\log n)$，其性能稳定性继承了选择排序的风格，空间复杂度为$O(1)$，这个排序和选择排序一样也是不稳定的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s2">堆中父子节点关系
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s2">parentIndex = int((childIndex-1)/2)
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s2">leftChildIndex = 2 * parentIndex + 1
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s2">rightChildIndex = 2 * parentIndex + 2
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">heapify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 修改顶部元素后重新堆化&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">maxIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">leftChildIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">leftChildIndex&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">leftChildIndex&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">maxIndex&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">maxIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">leftChildIndex&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">rightChildIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">rightChildIndex&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rightChildIndex&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">maxIndex&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">maxIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rightChildIndex&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">maxIndex&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">maxIndex&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">maxIndex&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">heapify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">maxIndex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">build_heap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 将任一数列变成大顶堆&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">lastNodeIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">lastNodeParentIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">lastNodeIndex&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 从最后一个非叶子节点，往前依次heapify&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lastNodeParentIndex&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">heapify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">heapSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build_heap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 顶元素与最后一个未排序元素交换&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heapify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="以上都是通过比较来排序还有一些非比较的排序方法有以下三类">以上都是通过比较来排序，还有一些非比较的排序方法，有以下三类&lt;/h2>
&lt;h2 id="计数排序">计数排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：非比较排序。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：计数排序要求输入的数据必须是&lt;strong>有确定范围的整数&lt;/strong>。从新数组取元素应从后往前取，保证稳定性。&lt;/p>
&lt;p>&lt;strong>优化思路&lt;/strong>：由于元素最小值可能远大于0，所以可以通过 &lt;code>所有元素-MIN&lt;/code>的方式来做偏置，降低所要开辟的空间。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度$O(n+k)$（未优化），其中$k$是元素最大值。空间复杂度也是$O(n+k)$，稳定排序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">countingSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 避免max函数出错&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">maxNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">newArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxNum&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">newArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="c1"># 将l中的元素作为newArr中的序号&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">sortedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newArr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 从后往前取，保证稳定性&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">newArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sortedIndex&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">sortedIndex&lt;/span> &lt;span class="o">-=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">newArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="桶排序">桶排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：非比较排序。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：假设输入数据服从均匀分布，将数据&lt;strong>分到有限数量的桶里&lt;/strong>，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。&lt;strong>进桶粗排，桶内细排&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：在额外空间充足的情况下，尽量增大桶的数量，可以令桶的个数等于元素的个数。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：平均时间复杂度$O(n+k)$，最坏时间复杂度$O(n^{2})$(所有元素放到一个桶里)。空间复杂度$O(n+k)$，其中k是桶的个数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">bucketSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">minNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">maxNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">minNum&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">maxNum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 数据都一样&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1"># 假设我们令桶的个数等于元素的个数&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">bucketNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1"># 桶的大小&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">bucketRange&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">maxNum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">minNum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">bucketNum&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1"># 桶数组&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">bucketList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bucketNum&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1"># 将元素分配到桶中&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">bucketList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">minNum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">bucketRange&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 先通过桶粗排序&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bucketList&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 排除空桶&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 在桶内部使用了系统默认的排序方法&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="基数排序">基数排序&lt;/h2>
&lt;p>&lt;strong>分类&lt;/strong>：非比较排序。&lt;/p>
&lt;p>&lt;strong>核心思想&lt;/strong>：从低位开始，先以个位数的大小来对数据进行排序，接着以十位数的大小来多数进行排序，接着以百位数的大小......（但是我没明白为什么这样排完之后就可以了）。本质是多关键字排序，也可以算是桶排序的一种。&lt;/p>
&lt;p>&lt;strong>细节&lt;/strong>：&lt;code>while&lt;/code>内循环实际上是以0-9为10个桶的桶排序。但是我没明白这种排序的实际机制。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：时间复杂度为$O(n*k)$，其中$k$是最大数字的位数。空间复杂度为$O(n+k)$，稳定排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">baseSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">maxNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">maxNum&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">base&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1"># 以0-9为10个桶,while内循实际上是桶排序&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">bucketList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">bucketList&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bucketList&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">base&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>排序算法分类&lt;/p>
&lt;ul>
&lt;li>比较类排序：通过比较来决定元素间的相对次序，由于其&lt;strong>时间复杂度不能突破O(nlogn)&lt;/strong>，因此也称为非线性时间比较类排序。&lt;/li>
&lt;li>非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以&lt;strong>线性时间运行&lt;/strong>，因此也称为线性时间非比较类排序。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.png" alt="排序算法分类">&lt;/p>
&lt;p>排序算法复杂度
&lt;img src="../images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="排序算法复杂度">&lt;/p></description></item><item><title>python-语法装饰器</title><link>https://surprisedcat.github.io/projectnotes/python-%E8%AF%AD%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E8%AF%AD%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>
&lt;h2 id="python转载一周一个python语法糖一装饰器---omit-in-toc---">python(转载)一周一个Python语法糖：（一）装饰器&lt;!-- omit in toc -->&lt;/h2>
&lt;p>作者：寒夏凉秋 
原文链接:&lt;a href="https://www.jianshu.com/p/fd746acbdf1e">https://www.jianshu.com/p/fd746acbdf1e&lt;/a>&lt;/p>
&lt;h2 id="decorator">Decorator&lt;/h2>
&lt;p>首先，我们来认识一下装饰器是什么：
装饰器是给现有的模块增添新的小功能
（在不改变原有模块功能的基础上）&lt;/p>
&lt;blockquote>
&lt;p>假如我有个简单笔，它只能用一种颜色进行写字
我现在给它加上一只笔芯，它能换种颜色写字（又能换回来~）
这就是装饰器的朴素比喻&lt;/p>
&lt;/blockquote>
&lt;h2 id="一初探装饰器">一、初探装饰器&lt;/h2>
&lt;p>手动写个装饰器吧&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># 自定义装饰函数&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">#这里装饰器的作用是在函数调用前增加一句话表示装饰成功&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;this is decorator for &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapper&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello,&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">#用赋值的形式进行装饰器&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cool&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>this is decorator for hello
&lt;span class="ln">2&lt;/span>hello, cool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，我们要知道，在python中，函数也是一种&lt;strong>对象&lt;/strong>（万物皆对象！）&lt;/p>
&lt;ol>
&lt;li>函数可以赋值给一个变量（学过C语言的可以联想下函数指针）&lt;/li>
&lt;li>函数可以定义在另一个函数内部&lt;/li>
&lt;/ol>
&lt;p>这也意味着一个函数可以返回另一个函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这一句代码中，将&lt;code>hello函数&lt;/code>作为&lt;code>变量&lt;/code>传入&lt;code>decorator装饰器&lt;/code>中，然后&lt;code>hello方法&lt;/code>在&lt;code>decorator&lt;/code>中的函数&lt;code>wrapper函数&lt;/code>实现，同时包装新的功能，将&lt;code>新的函数wrapper&lt;/code>作为变量返回 ，所以&lt;code>hello&lt;/code>的新值是经过&lt;code>decorator&lt;/code>装饰的&lt;code>wrapper&lt;/code>新方法。&lt;/p>
&lt;p>&lt;strong>所以，装饰器装饰函数的时候，将函数作为变量传入装饰器内部，实际调用的是装饰器内部的函数（添加新功能之后的函数）&lt;/strong>。&lt;/p>
&lt;h2 id="二-语法糖">二、 @语法糖&lt;/h2>
&lt;p>Python 中装饰器语法并不用每次都用赋值语句。&lt;/p>
&lt;p>在函数定义的时候就加上&lt;code>@+装饰器名字&lt;/code>即可。&lt;/p>
&lt;p>再来我们刚才的例子吧：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;this is decorator for &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapper&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nd">@decorator&lt;/span> &lt;span class="c1"># @decorator &amp;lt;== hello=decorator(hello)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello,&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cool&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行的效果和上面一样。&lt;/p>
&lt;h3 id="装饰器的顺序">装饰器的顺序&lt;/h3>
&lt;p>比如我们有两个装饰器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@decorator_one&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nd">@decorator_two&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这句代码实际上类似于：&lt;code>hello=decorator_one(decorator_two(hello))&lt;/code>；&lt;strong>两个装饰器一层层地往外装饰&lt;/strong>。&lt;/p>
&lt;h3 id="带参数的装饰器">带参数的装饰器&lt;/h3>
&lt;p>我们说过，装饰器其实也是一种函数，所以它自身也是能带参数的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似于&lt;code>func = decorator(arg1,arg2)(func)&lt;/code>。实际执行了两次函数（两个括号）。&lt;/p>
&lt;p>来个实际点的例子吧：
我们手写html的时候需要各种补全（那个用编辑器的当然爽得飞起！）但是，如果是在python中用字符串去表示html标签的时候，就~坑爹了。总不能每个标签我都写一个方法吧&lt;/p>
&lt;p>最方便的方法，写一个带参数的装饰器！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">real_decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">css_class&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; class=&amp;#39;&lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> \
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">kwargs&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;css_class&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">fn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">css_class&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">real_decorator&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nd">@makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bold_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nd">@makeHtmlTag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;italic_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>b
&lt;span class="ln">2&lt;/span>i
&lt;span class="ln">3&lt;/span>italic_css hello
&lt;span class="ln">4&lt;/span>bold_css wrapped
&lt;span class="ln">5&lt;/span>&amp;lt;b class=&amp;#39;bold_css&amp;#39;&amp;gt;&amp;lt;i class=&amp;#39;italic_css&amp;#39;&amp;gt;hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于几点说明：&lt;/p>
&lt;p>（1）在装饰器makeHtmlTag中，*args代表了参数元组，假如你传入的的参数分别是1，2，3，4，则args=（1，2，3，4）；**kwds则参数字典，返回一个key为参数变量名，value为变量值的字典。这样我们就可以很方便地不用改动函数本身去获取函数传递的参数并进行装饰了&lt;/p>
&lt;p>（2）使用装饰器的时候有个缺陷就是不能在过程中更改某个装饰器的参数值（比如该例子中 hello 的便签就永远是b,i了）&lt;/p>
&lt;p>如果你觉得这样写太！麻！烦！了！什！么！鬼！&lt;/p>
&lt;p>为什么我要在函数体中再定义一个函数体！！！！&lt;/p>
&lt;p>难道还要我一层层剥开你的心吗？&lt;/p>
&lt;h3 id="用类的方式去写一个装饰器">用类的方式去写一个装饰器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tag&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_css_class&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; class=&amp;#39;&lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">css_class&lt;/span>&lt;span class="p">)&lt;/span> \
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">css_class&lt;/span> &lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__call__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">wrapped&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_css_class&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span> \
&lt;span class="ln">11&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kwargs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;gt;&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">wrapped&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nd">@makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bold_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nd">@makeHtmlTagClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">css_class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;italic_css&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hao Chen&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于说明：&lt;/p>
&lt;ol>
&lt;li>我们将整个类作为一个装饰器，工作流程：
&lt;ol>
&lt;li>通过__init__（）方法初始化类&lt;/li>
&lt;li>通过__call__（）方法调用真正的装饰方法&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>当装饰器有参数的时候，init() 成员就不能传入fn了，而fn是在call的时候传入的。（fn代表要装饰的函数）&lt;/li>
&lt;/ol></description></item><item><title>matlab-与c混合编程</title><link>https://surprisedcat.github.io/projectnotes/matlab-%E4%B8%8Ec%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/matlab-%E4%B8%8Ec%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</guid><description>
&lt;h2 id="matlab与c混合编程---omit-in-toc---">Matlab与C混合编程&lt;!-- omit in toc -->&lt;/h2>
&lt;p>MATLAB是一种解释性语言，不需要编译，调试比较方便，但是缺点是速度慢。这一点在执行复杂的科学算法的时候体现极为明显。而C语言虽然相对比 较复杂，但是执行效率很高，MATLAB很多内置函数都是用C写的。另外有时候很多算法已经已C语言的形式写好，于是我们会想到是否有方法将C语言代码与 MATLAB连接起来。MATLAB提供一个C语言中的MEX函数库，可以实现以上功能。&lt;/p>
&lt;p>MEX文件是由&lt;strong>原C代码加上MEX文件专用的接口函数&lt;/strong>后编译而成的，本质是一个加了MATLAB调用规范的DLL文件。DLL函数本质上是实现h头文件中的接口声明的。所以可以这样理解，MEX文件实现了一种接口，它把在Matlab中调用函数时输入的自变量通过特定的接口调入了C函数，得出的结果再通过该接口调回Matlab。该特定接口的操作，包含在mexFunction这个函数中，由使用者具体设定。&lt;/p>
&lt;h2 id="mex文件怎么用">Mex文件怎么用&lt;/h2></description></item><item><title>Shell手册</title><link>https://surprisedcat.github.io/projectnotes/shell-cheatsheet/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/shell-cheatsheet/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#getting-started">Getting started&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#example">Example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#variables">Variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="#string-quotes">String quotes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell-execution">Shell execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conditional-execution">Conditional execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#functions-example">Functions Example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conditionals-example">Conditionals example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#strict-mode">Strict mode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#brace-expansion">Brace expansion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#parameter-expansions">Parameter expansions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#basics">Basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="#substitution">Substitution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#comments">Comments&lt;/a>&lt;/li>
&lt;li>&lt;a href="#substrings">Substrings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#length">Length&lt;/a>&lt;/li>
&lt;li>&lt;a href="#manipulation">Manipulation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#default-values">Default values&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#loops">Loops&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#basic-for-loop">Basic for loop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#c-like-for-loop">C-like for loop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ranges">Ranges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#with-step-size">With step size&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#reading-lines">Reading lines&lt;/a>&lt;/li>
&lt;li>&lt;a href="#forever">Forever&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#functions">Functions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#defining-functions">Defining functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#returning-values">Returning values&lt;/a>&lt;/li>
&lt;li>&lt;a href="#raising-errors">Raising errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="#arguments">Arguments&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conditionals">Conditionals&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#conditions">Conditions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#more-conditions">More conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#file-conditions">File conditions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-example">Test Example&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#arrays">Arrays&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#defining-arrays">Defining arrays&lt;/a>&lt;/li>
&lt;li>&lt;a href="#working-with-arrays">Working with arrays&lt;/a>&lt;/li>
&lt;li>&lt;a href="#operations">Operations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iteration">Iteration&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#dictionaries">Dictionaries&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#defining">Defining&lt;/a>&lt;/li>
&lt;li>&lt;a href="#working-with-dictionaries">Working with dictionaries&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iteration-operation">Iteration Operation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#iterate-over-values">Iterate over values&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iterate-over-keys">Iterate over keys&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#options">Options&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#set-options">set Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#glob-options">Glob options&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#history">History&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#commands">Commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#expansions">Expansions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#operation-info">Operation Info&lt;/a>&lt;/li>
&lt;li>&lt;a href="#slices">Slices&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#miscellaneous">Miscellaneous&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#numeric-calculations">Numeric calculations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#subshells">Subshells&lt;/a>&lt;/li>
&lt;li>&lt;a href="#redirection">Redirection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inspecting-commands">Inspecting commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trap-errors">Trap errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caseswitch">Case/switch&lt;/a>&lt;/li>
&lt;li>&lt;a href="#source-relative">Source relative&lt;/a>&lt;/li>
&lt;li>&lt;a href="#printf">printf&lt;/a>&lt;/li>
&lt;li>&lt;a href="#directory-of-script">Directory of script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#getting-options">Getting options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#heredoc">Heredoc&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reading-input">Reading input&lt;/a>&lt;/li>
&lt;li>&lt;a href="#special-variables">Special variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="#go-to-previous-directory">Go to previous directory&lt;/a>&lt;/li>
&lt;li>&lt;a href="#check-for-commands-result">Check for command's result&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grep-check">Grep check&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#also-see">Also see&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>This is a quick reference to getting started with Bash scripting.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/bash/">Learn bash in y minutes&lt;/a> &lt;em>(learnxinyminutes.com)&lt;/em>&lt;/li>
&lt;li>&lt;a href="http://mywiki.wooledge.org/BashGuide">Bash Guide&lt;/a> &lt;em>(mywiki.wooledge.org)&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/usr/bin/env bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="nv">$NAME&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="variables">Variables&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$NAME&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$NAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="string-quotes">String quotes&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hi &lt;/span>&lt;span class="nv">$NAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="c1">#=&amp;gt; Hi John&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;Hi $NAME&amp;#39;&lt;/span> &lt;span class="c1">#=&amp;gt; Hi $NAME&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shell-execution">Shell execution&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m in &lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m in `pwd`&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># Same&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="http://wiki.bash-hackers.org/syntax/expansion/cmdsubst">Command substitution&lt;/a>&lt;/p>
&lt;h3 id="conditional-execution">Conditional execution&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git commit &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git push
&lt;span class="ln">2&lt;/span>git commit &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Commit failed&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="functions-example">Functions Example&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>get_name&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;You are &lt;/span>&lt;span class="k">$(&lt;/span>get_name&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See: &lt;a href="#functions">Functions&lt;/a>&lt;/p>
&lt;h3 id="conditionals-example">Conditionals example&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;String is empty&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">elif&lt;/span> &lt;span class="o">[[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;String is not empty&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See: &lt;a href="#conditionals">Conditionals&lt;/a>&lt;/p>
&lt;h3 id="strict-mode">Strict mode&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">set&lt;/span> -euo pipefail
&lt;span class="ln">2&lt;/span>&lt;span class="nv">IFS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">$&amp;#39;\n\t&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See: &lt;a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/">Unofficial bash strict mode&lt;/a>&lt;/p>
&lt;h3 id="brace-expansion">Brace expansion&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="o">{&lt;/span>A,B&lt;span class="o">}&lt;/span>.js
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>{A,B}&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>A B&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>{A,B}.js&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>A.js B.js&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>{1..5}&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>1 2 3 4 5&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See: &lt;a href="http://wiki.bash-hackers.org/syntax/expansion/brace">Brace expansion&lt;/a>&lt;/p>
&lt;h2 id="parameter-expansions">Parameter expansions&lt;/h2>
&lt;h3 id="basics">Basics&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">/J/j&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;john&amp;#34; (substitution)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;Jo&amp;#34; (slicing)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;Jo&amp;#34; (slicing)&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;Joh&amp;#34; (slicing)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:(-1)&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;n&amp;#34; (slicing from right)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:(-2):&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;h&amp;#34; (slicing from right)&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">food&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">Cake&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; $food or &amp;#34;Cake&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">length&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;Jo&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See: &lt;a href="http://wiki.bash-hackers.org/syntax/pe">Parameter expansion&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/path/to/foo.cpp&amp;#34;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">%.cpp&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># /path/to/foo&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">%.cpp&lt;/span>&lt;span class="si">}&lt;/span>.o &lt;span class="c1"># /path/to/foo.o&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">%/*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># /path/to&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">##*.&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># cpp (extension)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">##*/&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># foo.cpp (basepath)&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">#*/&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># path/to/foo.cpp&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">##*/&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># foo.cpp&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">/foo/bar&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># /path/to/bar.cpp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Hello world&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">5&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># &amp;#34;world&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">: -5:&lt;/span>&lt;span class="nv">5&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># &amp;#34;world&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">SRC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/path/to/foo.cpp&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nv">BASE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">SRC&lt;/span>&lt;span class="p">##*/&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;foo.cpp&amp;#34; (basepath)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">SRC&lt;/span>&lt;span class="p">%&lt;/span>&lt;span class="nv">$BASE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;/path/to/&amp;#34; (dirpath)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="substitution">Substitution&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>${FOO%suffix}&lt;/code>&lt;/td>
&lt;td>Remove suffix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO#prefix}&lt;/code>&lt;/td>
&lt;td>Remove prefix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO%%suffix}&lt;/code>&lt;/td>
&lt;td>Remove long suffix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO##prefix}&lt;/code>&lt;/td>
&lt;td>Remove long prefix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO/from/to}&lt;/code>&lt;/td>
&lt;td>Replace first match&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO//from/to}&lt;/code>&lt;/td>
&lt;td>Replace all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO/%from/to}&lt;/code>&lt;/td>
&lt;td>Replace suffix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO/#from/to}&lt;/code>&lt;/td>
&lt;td>Replace prefix&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Single line comment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>: &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s1">This is a
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s1">multi line
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s1">comment
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="substrings">Substrings&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>${FOO:0:3}&lt;/code>&lt;/td>
&lt;td>Substring &lt;em>(position, length)&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO:(-3):3}&lt;/code>&lt;/td>
&lt;td>Substring from the right&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="length">Length&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>${#FOO}&lt;/code>&lt;/td>
&lt;td>Length of &lt;code>$FOO&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="manipulation">Manipulation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;HELLO WORLD!&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;hELLO WORLD!&amp;#34; (lowercase 1st letter)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">,,&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;hello world!&amp;#34; (all lowercase)&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hello world!&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">^&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;Hello world!&amp;#34; (uppercase 1st letter)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">STR&lt;/span>&lt;span class="p">^^&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#34;HELLO WORLD!&amp;#34; (all uppercase)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="default-values">Default values&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>${FOO:-val}&lt;/code>&lt;/td>
&lt;td>&lt;code>$FOO&lt;/code>, or &lt;code>val&lt;/code> if unset (or null)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO:=val}&lt;/code>&lt;/td>
&lt;td>Set &lt;code>$FOO&lt;/code> to &lt;code>val&lt;/code> if unset (or null)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO:+val}&lt;/code>&lt;/td>
&lt;td>&lt;code>val&lt;/code> if &lt;code>$FOO&lt;/code> is set (and not null)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>${FOO:?message}&lt;/code>&lt;/td>
&lt;td>Show error message and exit if &lt;code>$FOO&lt;/code> is unset (or null)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Omitting the &lt;code>:&lt;/code> removes the (non)nullity checks, e.g. &lt;code>${FOO-val}&lt;/code> expands to &lt;code>val&lt;/code> if unset otherwise &lt;code>$FOO&lt;/code>.&lt;/p>
&lt;h2 id="loops">Loops&lt;/h2>
&lt;h3 id="basic-for-loop">Basic for loop&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> i in /etc/rc.*&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c-like-for-loop">C-like for loop&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="nv">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">;&lt;/span> i &amp;lt; &lt;span class="m">100&lt;/span> &lt;span class="p">;&lt;/span> i++&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ranges">Ranges&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>1..5&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Welcome &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="with-step-size">With step size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>5..50..5&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Welcome &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reading-lines">Reading lines&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>cat file.txt &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$line&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="forever">Forever&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> ···
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="defining-functions">Defining functions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>myfunc&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Same as above (alternate syntax)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">function&lt;/span> myfunc&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>myfunc &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="returning-values">Returning values&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>myfunc&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">local&lt;/span> &lt;span class="nv">myresult&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;some value&amp;#39;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$myresult&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>myfunc&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="raising-errors">Raising errors&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>myfunc&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> myfunc&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;success&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;failure&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="arguments">Arguments&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$#&lt;/code>&lt;/td>
&lt;td>Number of arguments&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$*&lt;/code>&lt;/td>
&lt;td>All positional arguments (as a single word)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$@&lt;/code>&lt;/td>
&lt;td>All positional arguments (as separate strings)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$1&lt;/code>&lt;/td>
&lt;td>First argument&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$_&lt;/code>&lt;/td>
&lt;td>Last argument of the previous command&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>$@&lt;/code> and &lt;code>$*&lt;/code> must be quoted in order to perform as described.
Otherwise, they do exactly the same thing (arguments as separate strings).&lt;/p>
&lt;p>See &lt;a href="http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables">Special parameters&lt;/a>.&lt;/p>
&lt;h2 id="conditionals">Conditionals&lt;/h2>
&lt;h3 id="conditions">Conditions&lt;/h3>
&lt;p>Note that &lt;code>[[&lt;/code> is actually a command/program that returns either &lt;code>0&lt;/code> (true) or &lt;code>1&lt;/code> (false). Any program that obeys the same logic (like all base utils, such as &lt;code>grep(1)&lt;/code> or &lt;code>ping(1)&lt;/code>) can be used as condition, see examples.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[[ -z STRING ]]&lt;/code>&lt;/td>
&lt;td>Empty string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -n STRING ]]&lt;/code>&lt;/td>
&lt;td>Not empty string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ STRING == STRING ]]&lt;/code>&lt;/td>
&lt;td>Equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ STRING != STRING ]]&lt;/code>&lt;/td>
&lt;td>Not Equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -eq NUM ]]&lt;/code>&lt;/td>
&lt;td>Equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -ne NUM ]]&lt;/code>&lt;/td>
&lt;td>Not equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -lt NUM ]]&lt;/code>&lt;/td>
&lt;td>Less than&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -le NUM ]]&lt;/code>&lt;/td>
&lt;td>Less than or equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -gt NUM ]]&lt;/code>&lt;/td>
&lt;td>Greater than&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ NUM -ge NUM ]]&lt;/code>&lt;/td>
&lt;td>Greater than or equal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ STRING =~ STRING ]]&lt;/code>&lt;/td>
&lt;td>Regexp&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(( NUM &amp;lt; NUM ))&lt;/code>&lt;/td>
&lt;td>Numeric conditions&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="more-conditions">More conditions&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[[ -o noclobber ]]&lt;/code>&lt;/td>
&lt;td>If OPTIONNAME is enabled&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ ! EXPR ]]&lt;/code>&lt;/td>
&lt;td>Not&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ X &amp;amp;&amp;amp; Y ]]&lt;/code>&lt;/td>
&lt;td>And&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`[[ X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="file-conditions">File conditions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[[ -e FILE ]]&lt;/code>&lt;/td>
&lt;td>Exists&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -r FILE ]]&lt;/code>&lt;/td>
&lt;td>Readable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -h FILE ]]&lt;/code>&lt;/td>
&lt;td>Symlink&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -d FILE ]]&lt;/code>&lt;/td>
&lt;td>Directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -w FILE ]]&lt;/code>&lt;/td>
&lt;td>Writable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -s FILE ]]&lt;/code>&lt;/td>
&lt;td>Size is &amp;gt; 0 bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -f FILE ]]&lt;/code>&lt;/td>
&lt;td>File&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ -x FILE ]]&lt;/code>&lt;/td>
&lt;td>Executable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>---&lt;/td>
&lt;td>---&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ FILE1 -nt FILE2 ]]&lt;/code>&lt;/td>
&lt;td>1 is more recent than 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ FILE1 -ot FILE2 ]]&lt;/code>&lt;/td>
&lt;td>2 is more recent than 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[[ FILE1 -ef FILE2 ]]&lt;/code>&lt;/td>
&lt;td>Same files&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="test-example">Test Example&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># String&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;String is empty&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">elif&lt;/span> &lt;span class="o">[[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;String is not empty&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This never happens&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Combinations&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> X &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> Y &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">3&lt;/span> ...
&lt;span class="ln">4&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Equal&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$A&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$B&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Regex&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ . &lt;span class="o">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">$a&lt;/span> &amp;lt; &lt;span class="nv">$b&lt;/span> &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s2"> is smaller than &lt;/span>&lt;span class="nv">$b&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -e &lt;span class="s2">&amp;#34;file.txt&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;file exists&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="arrays">Arrays&lt;/h2>
&lt;h3 id="defining-arrays">Defining arrays&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;Apple&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;Banana&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;Orange&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>Fruits&lt;span class="o">[&lt;/span>0&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>Fruits&lt;span class="o">[&lt;/span>1&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Banana&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>Fruits&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Orange&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="working-with-arrays">Working with arrays&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Element #0&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[-1]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Last element&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># All elements, space-separated&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Number of elements&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># String length of the 1st element&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[3]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># String length of the Nth element&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]:&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Range (from position 3, length 2)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!Fruits[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Keys of all elements, space-separated&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="operations">Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;Watermelon&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># Push&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">+=(&lt;/span>&lt;span class="s1">&amp;#39;Watermelon&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># Also Push&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">=(&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]/Ap*/&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="c1"># Remove by regex match&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">unset&lt;/span> Fruits&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span> &lt;span class="c1"># Remove one item&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># Duplicate&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Fruits&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Veggies&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># Concatenate&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nv">lines&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="sb">`&lt;/span>cat &lt;span class="s2">&amp;#34;logfile&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># Read from file&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> i in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">arrayName&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dictionaries">Dictionaries&lt;/h2>
&lt;h3 id="defining">Defining&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">declare&lt;/span> -A sounds
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sounds&lt;span class="o">[&lt;/span>dog&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;bark&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>sounds&lt;span class="o">[&lt;/span>cow&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;moo&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>sounds&lt;span class="o">[&lt;/span>bird&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;tweet&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>sounds&lt;span class="o">[&lt;/span>wolf&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;howl&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Declares &lt;code>sound&lt;/code> as a Dictionary object (aka associative array).&lt;/p>
&lt;h3 id="working-with-dictionaries">Working with dictionaries&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">sounds&lt;/span>&lt;span class="p">[dog]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Dog&amp;#39;s sound&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">sounds&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># All values&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!sounds[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># All keys&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">sounds&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># Number of elements&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">unset&lt;/span> sounds&lt;span class="o">[&lt;/span>dog&lt;span class="o">]&lt;/span> &lt;span class="c1"># Delete dog&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="iteration-operation">Iteration Operation&lt;/h3>
&lt;h4 id="iterate-over-values">Iterate over values&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> val in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">sounds&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$val&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iterate-over-keys">Iterate over keys&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> key in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!sounds[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$key&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="options">Options&lt;/h2>
&lt;h3 id="set-options">set Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">set&lt;/span> -o noclobber &lt;span class="c1"># Avoid overlay files (echo &amp;#34;hi&amp;#34; &amp;gt; foo)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">set&lt;/span> -o errexit &lt;span class="c1"># Used to exit upon error, avoiding cascading errors&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">set&lt;/span> -o pipefail &lt;span class="c1"># Unveils hidden failures&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">set&lt;/span> -o nounset &lt;span class="c1"># Exposes unset variables&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="glob-options">Glob options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">shopt&lt;/span> -s nullglob &lt;span class="c1"># Non-matching globs are removed (&amp;#39;*.foo&amp;#39; =&amp;gt; &amp;#39;&amp;#39;)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">shopt&lt;/span> -s failglob &lt;span class="c1"># Non-matching globs throw errors&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">shopt&lt;/span> -s nocaseglob &lt;span class="c1"># Case insensitive globs&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">shopt&lt;/span> -s dotglob &lt;span class="c1"># Wildcards match dotfiles (&amp;#34;*.sh&amp;#34; =&amp;gt; &amp;#34;.foo.sh&amp;#34;)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">shopt&lt;/span> -s globstar &lt;span class="c1"># Allow ** for recursive matches (&amp;#39;lib/**/*.rb&amp;#39; =&amp;gt; &amp;#39;lib/a/b/c.rb&amp;#39;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set &lt;code>GLOBIGNORE&lt;/code> as a colon-separated list of patterns to be removed from glob
matches.&lt;/p>
&lt;h2 id="history">History&lt;/h2>
&lt;h3 id="commands">Commands&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Command&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>history&lt;/code>&lt;/td>
&lt;td>Show history&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shopt -s histverify&lt;/code>&lt;/td>
&lt;td>Don't execute expanded result immediately&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="expansions">Expansions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>!$&lt;/code>&lt;/td>
&lt;td>Expand last parameter of most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!*&lt;/code>&lt;/td>
&lt;td>Expand all parameters of most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!-n&lt;/code>&lt;/td>
&lt;td>Expand &lt;code>n&lt;/code>th most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!n&lt;/code>&lt;/td>
&lt;td>Expand &lt;code>n&lt;/code>th command in history&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!&amp;lt;command&amp;gt;&lt;/code>&lt;/td>
&lt;td>Expand most recent invocation of command &lt;code>&amp;lt;command&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="operation-info">Operation Info&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>!!&lt;/code>&lt;/td>
&lt;td>Execute last command again&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!!:s/&amp;lt;FROM&amp;gt;/&amp;lt;TO&amp;gt;/&lt;/code>&lt;/td>
&lt;td>Replace first occurrence of &lt;code>&amp;lt;FROM&amp;gt;&lt;/code> to &lt;code>&amp;lt;TO&amp;gt;&lt;/code> in most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!!:gs/&amp;lt;FROM&amp;gt;/&amp;lt;TO&amp;gt;/&lt;/code>&lt;/td>
&lt;td>Replace all occurrences of &lt;code>&amp;lt;FROM&amp;gt;&lt;/code> to &lt;code>&amp;lt;TO&amp;gt;&lt;/code> in most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!$:t&lt;/code>&lt;/td>
&lt;td>Expand only basename from last parameter of most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!$:h&lt;/code>&lt;/td>
&lt;td>Expand only directory from last parameter of most recent command&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>!!&lt;/code> and &lt;code>!$&lt;/code> can be replaced with any valid expansion.&lt;/p>
&lt;h3 id="slices">Slices&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>!!:n&lt;/code>&lt;/td>
&lt;td>Expand only &lt;code>n&lt;/code>th token from most recent command (command is &lt;code>0&lt;/code>; first argument is &lt;code>1&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!^&lt;/code>&lt;/td>
&lt;td>Expand first argument from most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!$&lt;/code>&lt;/td>
&lt;td>Expand last token from most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!!:n-m&lt;/code>&lt;/td>
&lt;td>Expand range of tokens from most recent command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>!!:n-$&lt;/code>&lt;/td>
&lt;td>Expand &lt;code>n&lt;/code>th token to last from most recent command&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>!!&lt;/code> can be replaced with any valid expansion i.e. &lt;code>!cat&lt;/code>, &lt;code>!-2&lt;/code>, &lt;code>!42&lt;/code>, etc.&lt;/p>
&lt;h2 id="miscellaneous">Miscellaneous&lt;/h2>
&lt;h3 id="numeric-calculations">Numeric calculations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">$((&lt;/span>a &lt;span class="o">+&lt;/span> &lt;span class="m">200&lt;/span>&lt;span class="k">))&lt;/span> &lt;span class="c1"># Add 200 to $a&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="nv">$RANDOM&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="m">200&lt;/span>&lt;span class="k">))&lt;/span> &lt;span class="c1"># Random number 0..199&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="subshells">Subshells&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nb">cd&lt;/span> somedir&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;I&amp;#39;m now in &lt;/span>&lt;span class="nv">$PWD&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># still in first directory&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="redirection">Redirection&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>python hello.py &amp;gt; output.txt &lt;span class="c1"># stdout to (file)&lt;/span>
&lt;span class="ln">2&lt;/span>python hello.py &amp;gt;&amp;gt; output.txt &lt;span class="c1"># stdout to (file), append&lt;/span>
&lt;span class="ln">3&lt;/span>python hello.py 2&amp;gt; error.log &lt;span class="c1"># stderr to (file)&lt;/span>
&lt;span class="ln">4&lt;/span>python hello.py 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="c1"># stderr to stdout&lt;/span>
&lt;span class="ln">5&lt;/span>python hello.py 2&amp;gt;/dev/null &lt;span class="c1"># stderr to (null)&lt;/span>
&lt;span class="ln">6&lt;/span>python hello.py &lt;span class="p">&amp;amp;&lt;/span>&amp;gt;/dev/null &lt;span class="c1"># stdout and stderr to (null)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>python hello.py &amp;lt; foo.txt &lt;span class="c1"># feed foo.txt to stdin for python&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inspecting-commands">Inspecting commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">command&lt;/span> -V &lt;span class="nb">cd&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1">#=&amp;gt; &amp;#34;cd is a function/alias/whatever&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="trap-errors">Trap errors&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;echo Error at about $LINENO&amp;#39;&lt;/span> ERR
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>traperr&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_SOURCE&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> at about &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_LINENO&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">set&lt;/span> -o errtrace
&lt;span class="ln">6&lt;/span>&lt;span class="nb">trap&lt;/span> traperr ERR
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="caseswitch">Case/switch&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;span class="ln">2&lt;/span> start &lt;span class="p">|&lt;/span> up&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> vagrant up
&lt;span class="ln">4&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span> *&lt;span class="o">)&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Usage: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> {start|stop|ssh}&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="source-relative">Source relative&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">source&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">%/*&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/../share/foo.sh&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="printf">printf&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;Hello %s, I&amp;#39;m %s&amp;#34;&lt;/span> Sven Olga
&lt;span class="ln">2&lt;/span>&lt;span class="c1">#=&amp;gt; &amp;#34;Hello Sven, I&amp;#39;m Olga&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;1 + 1 = %d&amp;#34;&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1">#=&amp;gt; &amp;#34;1 + 1 = 2&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;This is how you print a float: %f&amp;#34;&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="c1">#=&amp;gt; &amp;#34;This is how you print a float: 2.000000&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="directory-of-script">Directory of script&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">%/*&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="getting-options">Getting options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ ^- &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ! &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;--&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="nv">$1&lt;/span> in
&lt;span class="ln"> 2&lt;/span> -V &lt;span class="p">|&lt;/span> --version &lt;span class="o">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$version&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">exit&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln"> 6&lt;/span> -s &lt;span class="p">|&lt;/span> --string &lt;span class="o">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> shift&lt;span class="p">;&lt;/span> &lt;span class="nv">string&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln"> 9&lt;/span> -f &lt;span class="p">|&lt;/span> --flag &lt;span class="o">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nv">flag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">esac&lt;/span>&lt;span class="p">;&lt;/span> shift&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;--&amp;#39;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> shift&lt;span class="p">;&lt;/span> &lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heredoc">Heredoc&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt;END
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s">hello world
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s">END&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reading-input">Reading input&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;Proceed? [y/n]: &amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">read&lt;/span> ans
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$ans&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">read&lt;/span> -n &lt;span class="m">1&lt;/span> ans &lt;span class="c1"># Just one character&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="special-variables">Special variables&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Expression&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$?&lt;/code>&lt;/td>
&lt;td>Exit status of last task&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$!&lt;/code>&lt;/td>
&lt;td>PID of last background task&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$$&lt;/code>&lt;/td>
&lt;td>PID of shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$0&lt;/code>&lt;/td>
&lt;td>Filename of the shell script&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$_&lt;/code>&lt;/td>
&lt;td>Last argrument of the previous command&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See &lt;a href="http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables">Special parameters&lt;/a>.&lt;/p>
&lt;h3 id="go-to-previous-directory">Go to previous directory&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># /home/user/foo&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">cd&lt;/span> bar/
&lt;span class="ln">3&lt;/span>&lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># /home/user/foo/bar&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">cd&lt;/span> -
&lt;span class="ln">5&lt;/span>&lt;span class="nb">pwd&lt;/span> &lt;span class="c1"># /home/user/foo&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="check-for-commands-result">Check for command's result&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> ping -c &lt;span class="m">1&lt;/span> google.com&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;It appears you have a working internet connection&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="grep-check">Grep check&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="k">if&lt;/span> grep -q &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span> ~/.bash_history&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;You appear to have typed &amp;#39;foo&amp;#39; in the past&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="also-see">Also see&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://wiki.bash-hackers.org/">Bash-hackers wiki&lt;/a> &lt;em>(bash-hackers.org)&lt;/em>&lt;/li>
&lt;li>&lt;a href="http://wiki.bash-hackers.org/syntax/shellvars">Shell vars&lt;/a> &lt;em>(bash-hackers.org)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/bash/">Learn bash in y minutes&lt;/a> &lt;em>(learnxinyminutes.com)&lt;/em>&lt;/li>
&lt;li>&lt;a href="http://mywiki.wooledge.org/BashGuide">Bash Guide&lt;/a> &lt;em>(mywiki.wooledge.org)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.shellcheck.net/">ShellCheck&lt;/a> &lt;em>(shellcheck.net)&lt;/em>&lt;/li>
&lt;/ul></description></item><item><title>机器学习-什么是keras</title><link>https://surprisedcat.github.io/projectnotes/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%BB%80%E4%B9%88%E6%98%AFkeras/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%BB%80%E4%B9%88%E6%98%AFkeras/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#%E5%89%8D%E7%AB%AFkeras%E5%90%8E%E7%AB%AFtensorflowtheanocntk">前端Keras+后端TensorFlow\Theano\CNTK&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3">工程相关&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tensorflow-2%E7%9A%84keras">Tensorflow 2的keras&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="keras---omit-in-toc---">Keras&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Keras 是一个Python深度学习框架，可以方便地定义和训练几乎所有类型地深度学习模型。Keras最开始是为研究人员开发的，其目的在于快速实验&lt;/p>
&lt;p>keras具有以下重要特性：&lt;/p>
&lt;ol>
&lt;li>相同的代码可以在CPU或GPU上无缝切换运行&lt;/li>
&lt;li>具有用户友好的API，便于快速开发深度学习模型的原型&lt;/li>
&lt;li>内置支持卷积网络（用于计算机视觉）、循环网络（用于序列处理）以及二者的任意组合。&lt;/li>
&lt;li>支持任意网络架构：多输入或多输出模型、层共享、模型共享等。&lt;/li>
&lt;/ol>
&lt;h2 id="前端keras后端tensorflowtheanocntk">前端Keras+后端TensorFlow\Theano\CNTK&lt;/h2>
&lt;p>keras是一个模型级的库，为开发深度学习模型提供了高层次的构建模块。它依赖一个专门的、高度优化的张量库来完成这些运算，这个张量库就是Keras的后端引擎。Keras有三个后端实现:TensorFlow后端、Theano后端和微软认知工具包（CNTK）。这三个不同的后端引擎都可以无缝嵌入到Keras中。&lt;/p>
&lt;p>&lt;img src="../images/keras%E7%BB%93%E6%9E%84.jpg" alt="keras结构">&lt;/p>
&lt;p>通过TensorFlow,Keras可以在CPU和GPU上无缝运行，在CPU上运行时，TensorFlow本身封装了一个低层次的张量运算库，叫做Eigen;在GPU上运行时，TensorFlow封装了一个高度优化的深度学习运算库，叫做NVIDIA CUDA深度卷积神经网络（cuDNN）。&lt;/p>
&lt;h2 id="工程相关">工程相关&lt;/h2>
&lt;p>目前：2020.7 默认的backend是tensorflow&lt;/p>
&lt;p>在python中&lt;code>import keras&lt;/code>时会显示目前使用的后端。&lt;/p>
&lt;h2 id="tensorflow-2的keras">Tensorflow 2的keras&lt;/h2>
&lt;p>随着 TensorFlow 2.0 的发布，不少开发者产生了一些疑惑：作为 Keras 用户，TensorFlow 2.0 的发布跟我有关系吗？TensorFlow 中的 &lt;code>tf.keras&lt;/code> 和 Keras 有什么区别？我该用哪一个训练神经网络？在本文中，作者给出的答案是：你应该在以后所有的深度学习项目和实验中都使用 &lt;code>tf.keras&lt;/code>。&lt;/p></description></item><item><title>tensorflow-保存和载入模型</title><link>https://surprisedcat.github.io/projectnotes/tensorflow-%E4%BF%9D%E5%AD%98%E5%92%8C%E8%BD%BD%E5%85%A5%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/tensorflow-%E4%BF%9D%E5%AD%98%E5%92%8C%E8%BD%BD%E5%85%A5%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h2 id="tensorflow-中模型的保证与载入---omit-in-toc---">Tensorflow 中模型的保证与载入&lt;!-- omit in toc -->&lt;/h2>
&lt;p>Tensorflow中模型保存有着关键作用，无论是隔段时间保存以防止突发状况，还是保存训练完毕的模型以供使用，都需要使用tensorflow中的模型保存功能。有时候，可能也需要用到训练好的模型（迁移学习，预学习），并在这个基础上再次训练（fine tuning）。这时候我们需要掌握如何操作这些模型数据。&lt;/p>
&lt;h2 id="模型文件">模型文件&lt;/h2>
&lt;p>目前使用tensorflow 1.X版本，指定的模型保存目录下有4个，3类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="p">|&lt;/span>--checkpoint_dir
&lt;span class="ln">2&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>--checkpoint
&lt;span class="ln">3&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>--MyModel.meta
&lt;span class="ln">4&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>--MyModel.data-00000-of-00001
&lt;span class="ln">5&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>--MyModel.index
&lt;span class="ln">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>checkpoint：该文件是文本文件，里面记录了保存的最新的checkpoint文件以及其它checkpoint文件列表。例如最近保存的默认5个文件名称。&lt;/li>
&lt;li>meta文件：保存的是图结构，meta文件是pb（protocol buffer）格式文件，包含变量、op、集合等。&lt;/li>
&lt;li>ckpt文件：包含name-global_step.data-xxxx-of-xxxx和.index文件，都是二进制文件，保存了所有的weights、biases、gradients等变量。.index是索引，.data文件保存具体数值，一般参数很多时很大。&lt;/li>
&lt;/ul>
&lt;h2 id="保存tensorflow模型">保存Tensorflow模型&lt;/h2>
&lt;p>Tensorflow使用tf.train.Saver类来保存模型，值得注意的是，在tensorflow中，变量是存在于Session环境中，也就是说，只有在Session环境下才会存有变量值，因此，保存模型时需要传入session：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Saver&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;Mypath/checkpoint_dir/MyModel&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下Copy from &lt;a href="https://blog.csdn.net/huachao1001/article/details/78501928">https://blog.csdn.net/huachao1001/article/details/78501928&lt;/a>&lt;/p>
&lt;p>如果想要在1000次迭代后，再保存模型，只需设置global_step参数即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Mypath/checkpoint_dir/MyModel&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">global_step&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存的模型文件名称会在后面加-1000,如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>checkpoint
&lt;span class="ln">2&lt;/span>MyModel-1000.data-00000-of-00001
&lt;span class="ln">3&lt;/span>MyModel-1000.index
&lt;span class="ln">4&lt;/span>MyModel-1000.meta
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在实际训练中，我们可能会在每1000次迭代中保存一次模型数据，但是由于图是不变的，没必要每次都去保存，可以通过如下方式指定不保存图：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Mypath/checkpoint_dir/MyModel&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">global_step&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">write_meta_graph&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另一种比较实用的是，如果你希望每2小时保存一次模型，并且只保存最近的5个模型文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Saver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_to_keep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keep_checkpoint_every_n_hours&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：tensorflow默认只会保存最近的5个模型文件，如果你希望保存更多，可以通过max_to_keep来指定&lt;/p>
&lt;/blockquote>
&lt;p>如果我们不对tf.train.Saver指定任何参数，默认会保存所有变量。如果你不想保存所有变量，而只保存一部分变量，可以通过指定variables/collections。在创建tf.train.Saver实例时，通过将需要保存的变量构造list或者dictionary，传入到Saver中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random_normal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;w1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random_normal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;w2&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Saver&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1"># 只保存w1 , w2&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">sess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">global_variables_initializer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Mypath/checkpoint_dir/MyModel&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">global_step&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="导入tensorflow已有模型">导入Tensorflow已有模型&lt;/h2>
&lt;p>Tensorflow将图和变量数据分开保存为不同的文件。因此，在导入模型时，也要分为2步：构造网络图和加载参数。&lt;/p>
&lt;h3 id="导入网络图">导入网络图&lt;/h3>
&lt;p>一个比较笨的方法是，手敲代码，实现跟模型一模一样的图结构。其实，我们既然已经保存了图，那就没必要在去手写一次图结构代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">import_meta_graph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Mypath/checkpoint_dir/MyModel-1000.meta&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="加载参数">加载参数&lt;/h3>
&lt;p>仅仅有图并没有用，更重要的是，我们需要前面训练好的模型参数（即weights、biases等），本文第2节提到过，变量值需要依赖于Session，因此在加载参数时，先要构造好Session：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">sess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">new_saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">import_meta_graph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Mypath/checkpoint_dir/MyModel-1000.meta&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">new_saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">restore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">latest_checkpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Mypath/checkpoint_dir&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 选取最新的check point&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，W1和W2加载进了图，并且可以被访问。&lt;/p>
&lt;p>还有一种导入模型的方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">ckpt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_checkpoint_state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MODEL_SAVE_PATH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 若模型存在，则加载出模型到当前对话，在测试数据集上进行准确率验证，并打印出当前轮数下的准确率&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">ckpt&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">ckpt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model_checkpoint_path&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="c1"># 默认恢复最新的模型&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">restore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ckpt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model_checkpoint_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="c1"># 根据模型名称获取global_step&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">global_step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ckpt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model_checkpoint_path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以遍历所有保存的模型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ckpt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all_model_checkpoint_paths&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ckpt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all_model_checkpoint_paths&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用恢复的模型">使用恢复的模型&lt;/h2>
&lt;p>前面我们理解了如何保存和恢复模型，很多时候，我们希望使用一些已经训练好的模型，如prediction、fine-tuning以及进一步训练等。这时候，我们可能需要获取训练好的模型中的一些中间结果值，可以通过&lt;code>graph.get_tensor_by_name('w1:0')&lt;/code>来获取，注意&lt;code>w1:0&lt;/code>是tensor的name。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">placeholder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;float&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;w1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">placeholder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;float&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;w2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bias&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">#定义一个op，用于后面恢复&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">w3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">w4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;op_to_restore&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="n">sess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">global_variables_initializer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">#创建一个Saver对象，用于保存所有变量&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Saver&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">#通过传入数据，执行op&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">feed_dict&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">}))&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c1">#打印 24.0 ==&amp;gt;(w1+w2)*b1&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1">#现在保存模型&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;./checkpoint_dir/MyModel&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">global_step&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来我们使用&lt;code>graph.get_tensor_by_name()&lt;/code>方法来操纵这个保存的模型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#先加载图和参数变量&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">import_meta_graph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./checkpoint_dir/MyModel-1000.meta&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="n">saver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">restore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">latest_checkpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./checkpoint_dir&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># 访问placeholders变量，并且创建feed-dict来作为placeholders的新值&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">graph&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_default_graph&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">graph&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_tensor_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;w1:0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">graph&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_tensor_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;w2:0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">feed_dict&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">13.0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">17.0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1">#接下来，访问你想要执行的op&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">op_to_restore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">graph&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_tensor_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;op_to_restore:0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op_to_restore&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">feed_dict&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c1">#打印结果为60.0==&amp;gt;(13+17)*2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果只想恢复图的一部分，并且再加入其它的op用于fine-tuning。只需通过&lt;code>graph.get_tensor_by_name()&lt;/code>方法获取需要的op，并且在此基础上建立图，看一个简单例子，假设我们需要在训练好的VGG网络使用图，并且修改最后一层，将输出改为2，用于fine-tuning新数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">......&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">......&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">saver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">train&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">import_meta_graph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;vgg.meta&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 访问图&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">graph&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_default_graph&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">#访问用于fine-tuning的output&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">fc7&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">graph&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_tensor_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fc7:0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">#如果你想修改最后一层梯度，需要如下&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">fc7&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stop_gradient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fc7&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># It&amp;#39;s an identity function&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">fc7_shape&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">fc7&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_shape&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">as_list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">new_outputs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">weights&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">truncated_normal&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">fc7_shape&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">num_outputs&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">stddev&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">0.05&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="n">biases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.05&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">num_outputs&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">matmul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fc7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">weights&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">biases&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="n">pred&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">softmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># Now, you run this with fine-tuning data in sess.run()&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>tensorflow-tf.shape(x)、x.shape和x.get_shape()的区别</title><link>https://surprisedcat.github.io/projectnotes/tensorflow-tf.shapexx.shape%E5%92%8Cx.get_shape%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/tensorflow-tf.shapexx.shape%E5%92%8Cx.get_shape%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>
&lt;h2 id="tfshapexxshape和xget_shape的区别---omit-in-toc---">tf.shape(x)、x.shape和x.get_shape()的区别&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="对于tensor来说">对于Tensor来说&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nb">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">constant&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_shape&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">Out&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">tensorflow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">python&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">framework&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tensor_shape&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TensorShape&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">tensorflow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">python&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">framework&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tensor_shape&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TensorShape&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">tensorflow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">python&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">framework&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Tensor&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到&lt;code>x.shape&lt;/code>和&lt;code>x.get_shape()&lt;/code>都是返回TensorShape类型对象，而&lt;code>tf.shape(x)&lt;/code>返回的是Tensor类型对象。&lt;/p>
&lt;p>具体来说&lt;code>tf.shape()&lt;/code>返回的是tensor，想要获取tensor具体的shape结果需要&lt;code>sess.run&lt;/code>才行。而&lt;code>tf.get_shape&lt;/code>和&lt;code>x.shape&lt;/code>返回的是一个元组，因此要想操作维度信息，则需要调用TensorShape的&lt;code>tf.as_list()&lt;/code>方法，返回的是Python的list。&lt;/p>
&lt;p>需要注意的是&lt;code>tf.get_shape()&lt;/code>返回的是元组，不能放到&lt;code>sess.run()&lt;/code>里面，这个里面只能放operation和tensor&lt;/p>
&lt;h2 id="对于placeholder来说">对于placeholder来说&lt;/h2>
&lt;p>对&lt;code>tf.placeholder&lt;/code>占位符来说，如果shape设置的其中某一个是None，那么对于&lt;code>tf.shape，sess.run&lt;/code>会报错，而&lt;code>tf.get_shape&lt;/code>不会，它会在None位置显示“?”表示此位置的shape暂时未知。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Variable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">placeholder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">int32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Tensor(&amp;#34;Shape:0&amp;#34;, shape=(7,), dtype=int32)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 元组 (1, 2, 3, 4, 5, 6, 7)&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">s11&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">s21&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Tensor(&amp;#34;Shape_1:0&amp;#34;, shape=(2,), dtype=int32)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s21&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 因为第一位设置的是None，所以这里的第一位显示问号表示暂时不确认 (?, 3)&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">sess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">global_variables_initializer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># [1 2 3 4 5 6 7]&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s11&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1"># InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor &amp;#39;b&amp;#39; with dtype int32&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># [[Node: b = Placeholder[dtype=DT_INT32, shape=[], _device=&amp;#34;/job:localhost/replica:0/task:0/cpu:0&amp;#34;]()]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>tensorflow-tf.control_dependencies()作用及用法</title><link>https://surprisedcat.github.io/projectnotes/tensorflow-tf.control_dependencies%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95/</link><pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/tensorflow-tf.control_dependencies%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95/</guid><description>
&lt;h2 id="tensorflow-tfcontrol_dependencies作用及用法---omit-in-toc---">tensorflow tf.control_dependencies()作用及用法&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在有些机器学习程序中我们想要指定某些操作执行的依赖关系，这时我们可以使用&lt;code>tf.control_dependencies()&lt;/code>来实现。
&lt;code>control_dependencies(control_inputs)&lt;/code>返回一个控制依赖的上下文管理器，使用&lt;code>with关&lt;/code>键字可以让在这个上下文环境中的操作都在&lt;code>control_inputs&lt;/code> 执行。&lt;/p>
&lt;h2 id="原型分析">原型分析&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">control_inputs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>arguments：control_inputs: A list of &lt;code>Operation&lt;/code> or &lt;code>Tensor&lt;/code> objects
which must be executed or computed before running the operations
defined in the context. （注意这里control_inputs是list）
return： A context manager that specifies control dependencies
for all operations constructed within the context.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="c1"># `d` and `e` will only run after `a`, `b`, and `c` have executed.&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以嵌套&lt;code>control_dependencies&lt;/code> 使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="c1"># Ops constructed here run after `a` and `b`.&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="c1"># Ops constructed here run after `a`, `b`, `c`, and `d`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以传入&lt;code>None&lt;/code> 来消除依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="c1"># Ops constructed here run after `a` and `b`.&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="c1"># Ops constructed here run normally, not waiting for either `a` or `b`.&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="c1"># Ops constructed here run after `c` and `d`, also not waiting&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="c1"># for either `a` or `b`.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：控制依赖只对那些在上下文环境中建立的操作有效，仅仅在context中使用一个操作或张量是没用的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># WRONG&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">my_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tensor&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">matmul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tensor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tensor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1"># The matmul op is created outside the context, so no control&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1"># dependency will be added.&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">t&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># RIGHT&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">my_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tensor&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1"># The matmul op is created in the context, so a control dependency&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1"># will be added.&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">matmul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tensor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tensor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：在训练模型时我们每步训练可能要执行两种操作，op a, b 这时我们就可以使用如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">with&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">control_dependencies&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">no_op&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;train&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#tf.no_op；什么也不做&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 在这样简单的要求下，可以将上面代码替换为：&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">sess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他关于&lt;code>tf.identity()&lt;/code>的奇怪操作可见&lt;a href="https://blog.csdn.net/u012436149/article/details/72084744">https://blog.csdn.net/u012436149/article/details/72084744&lt;/a>&lt;/p>
&lt;p>使用&lt;code>tf.no_op()&lt;/code>是一个占位符，表示什么都不做，但是会返回一个operation，用以保证&lt;code>tf.control_dependencies()&lt;/code>被执行，和&lt;code>tf.group&lt;/code>操作类似。&lt;/p>
&lt;p>版权声明：本文为CSDN博主「PKU_Jade」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/PKU_Jade/article/details/73498753">https://blog.csdn.net/PKU_Jade/article/details/73498753&lt;/a>&lt;/p></description></item><item><title>tensorflow-1和2的区别直观理解</title><link>https://surprisedcat.github.io/projectnotes/tensorflow-1%E5%92%8C2%E7%9A%84%E5%8C%BA%E5%88%AB%E7%9B%B4%E8%A7%82%E7%90%86%E8%A7%A3/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/tensorflow-1%E5%92%8C2%E7%9A%84%E5%8C%BA%E5%88%AB%E7%9B%B4%E8%A7%82%E7%90%86%E8%A7%A3/</guid><description>
&lt;h2 id="tensorflow-1-和-2-区别直观理解---omit-in-toc---">Tensorflow 1 和 2 区别直观理解&lt;!-- omit in toc -->&lt;/h2>
&lt;ol>
&lt;li>1.X的感觉和过去用的ns3很像，默认方式是先要定义一个静态结构，然后训练操作流程时独立的。这样运行效率比较高，但是调试起来费劲。最直观的一点，就是一些在函数中预先定义静态结构“彷佛”是不执行的，这造成有些写在后面的语句彷佛先执行了一样。2.X默认采用动态图处理的方式，和python风格更接近（Eager execution）。&lt;/li>
&lt;li>1.X版本有很多额外的概念比如，graph，session，run，placeholder，feed_dict这些，这些其实和静态模型构建息息相关，在2.X版本中不再使用了。&lt;/li>
&lt;li>1.X的tensorflow像一个平台工具，只是借用了python语言，tensorflow 1.X本身更像是一种描述神经网络模型的语言，2.X版本更像python的一个包。&lt;/li>
&lt;li>1.X中的变量空间和命名空间使得变量管理比较复杂，并大量依赖隐式全局名称空间（这点类似c++），还有一些必须的初始化比如&lt;code>tf.global_variables_initializer()&lt;/code>， 2.X消除了所有这些机制，支持跟踪变量。（根据这第1点和第4点我特别怀疑1.X的设计者C++用的很6）&lt;/li>
&lt;li>2.X版本中默认使用keras作为高级API， 1.X中需要自己装。在1.X中使用keras反而更容易移植到2.X。&lt;/li>
&lt;li>1.X中一些API很难找，而且位置分类有很多争议，2.X版本重新归纳整理了API。&lt;/li>
&lt;/ol></description></item><item><title>python-子类如何调用父类的__init__方法</title><link>https://surprisedcat.github.io/projectnotes/python-%E5%AD%90%E7%B1%BB%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84__init__%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-%E5%AD%90%E7%B1%BB%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84__init__%E6%96%B9%E6%B3%95/</guid><description>
&lt;h2 id="转载python子类如何调用父类的__init__方法---omit-in-toc---">转载：python子类如何调用父类的__init__方法&lt;!-- omit in toc -->&lt;/h2>
&lt;p>版权声明：本文为CSDN博主「liuchunming033」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/liuchunming033/article/details/48498061">https://blog.csdn.net/liuchunming033/article/details/48498061&lt;/a>&lt;/p>
&lt;p>Python&lt;strong>不会自动调用父类的constructor&lt;/strong>，你得亲自专门调用它。&lt;/p>
&lt;p>有两种常用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">父类名&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">参数&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#注意名字是父类 &lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">子类名&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">参数&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#注意名字是子类，而且init后是self之外的参数&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一种方法，这种初始化的方式书写上比较简单，也比较容易阅读，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># coding=utf-8&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;jim&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Programmer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;Dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Programmer&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="n">coder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Programmer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该例子中，Programmer实例初始化的时候调用父类的__init__方法对flag属性进行初始化，初始化之后的属性值是False。注意，调用父类__init__方法的时候，传递的参数数量要与父类中的__init__保持一致。&lt;/p>
&lt;p>程序运行结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">Person&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Programmer&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">False&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">True&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">dotjar&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：运行的时候如果你的环境里有多个python解释器，一定要选对解释器了，否则有的时候可能会出错。运行程序的时候，最后打个断点debug一下，看看程序运行的步骤。&lt;/p>
&lt;p>第二种方法，举个栗子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># coding=utf-8&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;jim&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flag&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Programmer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Dotjar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">19&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Programmer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Programmer&amp;#39;s age:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">coder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Programmer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dotjar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">coder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子对第一个例子进行了修改，首先父类中的__init__方法带有2个初始化属性，flag和name。子类的__init__方法比父类的__init__方法多了一个age属性，这个age属性只能在子类的__init__方法中初始化（因为父类中没有嘛，调用父类的__init__只能初始化父类和子类共有的属性）。
程序的输出是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">Person&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Programmer&lt;/span>&lt;span class="s1">&amp;#39;s age: 19&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">True&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dotjar&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">False&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">dotjar&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>python-pylint无法载入动态库成员方法的处理</title><link>https://surprisedcat.github.io/projectnotes/python-pylint%E6%97%A0%E6%B3%95%E8%BD%BD%E5%85%A5%E5%8A%A8%E6%80%81%E5%BA%93%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%84%E7%90%86/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-pylint%E6%97%A0%E6%B3%95%E8%BD%BD%E5%85%A5%E5%8A%A8%E6%80%81%E5%BA%93%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%84%E7%90%86/</guid><description>
&lt;h2 id="pylint无法载入第三方库成员方法处理以cv2为例---omit-in-toc---">Pylint无法载入第三方库成员方法处理，以cv2为例&lt;!-- omit in toc -->&lt;/h2>
&lt;p>You can generate a pylint config file in the root of your project with this command: (I find this to be helpful if you work in a team or on different computers from the same repo)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>pylint --generate-rcfile &amp;gt; .pylintrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the beginning of the generated .pylintrc file you will see&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># A comma-separated list of package or module names from where C extensions may&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># be loaded. Extensions are loading into the active Python interpreter and may&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># run arbitrary code.&lt;/span>
&lt;span class="ln">4&lt;/span>extension-pkg-whitelist&lt;span class="o">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add cv2 so you end up with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># A comma-separated list of package or module names from where C extensions may&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># be loaded. Extensions are loading into the active Python interpreter and may&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># run arbitrary code.&lt;/span>
&lt;span class="ln">4&lt;/span>extension-pkg-whitelist&lt;span class="o">=&lt;/span>cv2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save the file. The lint errors should disappear.&lt;/p></description></item><item><title>python-numpy随机种子</title><link>https://surprisedcat.github.io/projectnotes/python-numpy%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-numpy%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90/</guid><description>
&lt;h2 id="numpy-随机种子---omit-in-toc---">numpy 随机种子&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="numpyrandomseed的使用">&lt;code>numpy.random.seed()&lt;/code>的使用&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>seed( )&lt;/code> 用于指定随机数生成时所用算法开始的整数值，如果使用相同的&lt;code>seed( )值&lt;/code>，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同。&lt;/p>
&lt;/blockquote>
&lt;p>需要指出的是，&lt;code>numpy.random.seed()&lt;/code>是&lt;strong>一次有效&lt;/strong>的。也就是说，&lt;code>numpy.random.seed()&lt;/code>设置了之后只对后面最近的random随机数有效，举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 第一个for循环&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第一个for循环&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-----------------&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># 第二个for循环&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第二个for循环&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>第一个for循环
&lt;span class="ln"> 2&lt;/span>0.417022004702574
&lt;span class="ln"> 3&lt;/span>0.7203244934421581
&lt;span class="ln"> 4&lt;/span>0.00011437481734488664
&lt;span class="ln"> 5&lt;/span>0.30233257263183977
&lt;span class="ln"> 6&lt;/span>0.14675589081711304
&lt;span class="ln"> 7&lt;/span>-----------------
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>第二个for循环
&lt;span class="ln">10&lt;/span>0.417022004702574
&lt;span class="ln">11&lt;/span>0.417022004702574
&lt;span class="ln">12&lt;/span>0.417022004702574
&lt;span class="ln">13&lt;/span>0.417022004702574
&lt;span class="ln">14&lt;/span>0.417022004702574
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个&lt;code>for&lt;/code>循环中，只设置了一次&lt;code>seed&lt;/code>，所以之后的随机值都是不一样的。而第二个&lt;code>for&lt;/code>循环中，每次都设置了&lt;code>seed&lt;/code>才得到一样的值。仔细看，可以发现第一个&lt;code>for&lt;/code>循环里第一个随机值和第二个&lt;code>for&lt;/code>循环里的值也是一样的，都是以&lt;code>seed(5)&lt;/code>为种子生成的随机值。&lt;/p>
&lt;h2 id="numpyrandomrandomstate使用">&lt;code>numpy.random.RandomState()&lt;/code>使用&lt;/h2>
&lt;p>&lt;code>numpy.random.RandomState()&lt;/code>是一个伪随机数生成器。和&lt;code>seed()&lt;/code>一样&lt;strong>也是一次有效的&lt;/strong>，但是它指定了一个state变量，只有在这个state变量下，才会使用&lt;code>RandomState()&lt;/code>的种子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 设置随机种子&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">rng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RandomState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 没有使用rng变量&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 使用rng变量&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">rng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RandomState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>0.00011437481734488664
&lt;span class="ln">2&lt;/span>0.22199317108973948
&lt;span class="ln">3&lt;/span>0.22199317108973948
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子看出，虽然距离&lt;code>RandomState(5)&lt;/code>最近的是&lt;code>np.random.rand()&lt;/code>，但是没有使用&lt;code>RandomState(5)&lt;/code>的种子。&lt;/p></description></item><item><title>python-None的判断</title><link>https://surprisedcat.github.io/projectnotes/python-none%E7%9A%84%E5%88%A4%E6%96%AD/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-none%E7%9A%84%E5%88%A4%E6%96%AD/</guid><description>
&lt;h2 id="python中进行none判断时为什么用is而不是---omit-in-toc---">Python中进行&lt;code>None&lt;/code>判断时，为什么用&lt;code>is&lt;/code>而不是==&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="is和none区别在哪里">&lt;code>is&lt;/code>和&lt;code>None&lt;/code>区别在哪里&lt;/h2>
&lt;ul>
&lt;li>&lt;code>is&lt;/code> 比较的是对象标识符，用来检查对象的标识符是否一致，即两个对象在内存中的地址是否一致。在使用&lt;code>a is b&lt;/code>的时候，相当于是做&lt;code>id(a)==id(b)&lt;/code>判断。&lt;/li>
&lt;li>&lt;code>==&lt;/code> 比较两个对象的值是否相等，相当于调用&lt;code>__eq__()&lt;/code>方法，即&lt;code>a==b&lt;/code>等同于&lt;code>a.__eq__(b)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="进行none判断时为什么用is">进行&lt;code>None&lt;/code>判断时，为什么用&lt;code>is&lt;/code>&lt;/h2>
&lt;p>这在&lt;code>PEP8&lt;/code>中有所规定:&lt;/p>
&lt;blockquote>
&lt;p>&amp;quot;Comparisons to singletons like None should always be done with 'is' or 'is not', never the equality operators.&amp;quot; --- From PEP8&lt;/p>
&lt;/blockquote>
&lt;p>如上所述&lt;code>None&lt;/code>在Python里是个&lt;strong>单例对象&lt;/strong>，一个变量如果是&lt;code>None&lt;/code>，它一定和&lt;code>None&lt;/code>指向同一个内存地址。&lt;code>None&lt;/code>是python中的一个特殊的常量，表示一个空的对象。空值是Python中的一个特殊值，&lt;strong>数据为空并不代表是空对象&lt;/strong>，例如&lt;code>[]，''，()，{}&lt;/code>等都不是&lt;code>None&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">([]&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>None&lt;/code>和任何对象比较返回值都是&lt;code>False&lt;/code>，除了自己。&lt;code>==None&lt;/code>背后调用&lt;code>的__eq__()&lt;/code>，而&lt;code>__eq__()&lt;/code>可以被重载，e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">test&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__eq__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># False&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然很多时候用&lt;code>==None&lt;/code>会得到我们内心想要的结果，但是如果一个对象的&lt;code>__eq__()&lt;/code>方法被重载，&lt;code>==&lt;/code>操作可能会影响结果的判断。对了，像PyCharm这样的IDE一般会提示&lt;code>==None&lt;/code>不符合&lt;code>PEP8&lt;/code>规范，不知大家注意过没有。&lt;/p>
&lt;p>另外从代码执行效率上来看，&lt;strong>&lt;code>is&lt;/code> is a LOT faster than &lt;code>==&lt;/code>&lt;/strong>。&lt;/p></description></item><item><title>python-is与==区别</title><link>https://surprisedcat.github.io/projectnotes/python-is%E4%B8%8E%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-is%E4%B8%8E%E5%8C%BA%E5%88%AB/</guid><description>
&lt;h2 id="python中is与的区别---omit-in-toc---">Python中is与==的区别&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：id(身份标识)、python type()(数据类型)和value(值)。is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。下面来看看具体区别在哪。&lt;/p>
&lt;p>==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等，例如下面两个字符串间的比较：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;iplaypython.com&amp;#39;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;iplaypython.com&amp;#39;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。通过对下面几个列表间的比较，你就会明白is同一性运算符的工作原理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">z&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">z&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">3075326572&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="mi">3075326572&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="mi">3075328140&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前三个例子都是True，这什么最后一个是False呢？x、y和z的值是相同的，所以前两个是True没有问题。至于最后一个为什么是False，看看三个对象的id分别是什么就会明白了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>==比较操作符：用来比较两个对象是否相等，&lt;strong>value&lt;/strong>做为判断因素；
is同一性运算符：比较判断两个对象是否相同，&lt;strong>id&lt;/strong>做为判断因素。&lt;/p></description></item><item><title>python-for迭代与生成</title><link>https://surprisedcat.github.io/projectnotes/python-for%E8%BF%AD%E4%BB%A3%E4%B8%8E%E7%94%9F%E6%88%90/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-for%E8%BF%AD%E4%BB%A3%E4%B8%8E%E7%94%9F%E6%88%90/</guid><description>
&lt;h2 id="转载为什么for循环可以遍历listpython中迭代器与生成器---omit-in-toc---">转载：为什么for循环可以遍历list：Python中迭代器与生成器&lt;!-- omit in toc -->&lt;/h2>
&lt;blockquote>
&lt;p>作者：奥辰 原文链接：&lt;a href="https://www.cnblogs.com/chenhuabin/p/11288797.html">https://www.cnblogs.com/chenhuabin/p/11288797.html&lt;/a>&lt;/p>
&lt;p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="#1-%E5%BC%95%E8%A8%80">1 引言&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1">2 迭代器与可迭代对象&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#21-%E8%BF%AD%E4%BB%A3%E5%99%A8">2.1 迭代器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#22-%E8%BF%AD%E4%BB%A3%E5%99%A8">2.2 迭代器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#23-for%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%9C%AC%E8%B4%A8">2.3 for循环的本质&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#3-%E7%94%9F%E6%88%90%E5%99%A8">3 生成器&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#31-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8">3.1 迭代器与生成器&lt;/a>&lt;/li>
&lt;li>&lt;a href="#32-%E7%94%9F%E6%88%90%E5%99%A8%E8%A7%A3%E6%9E%90%E5%BC%8F">3.2 生成器解析式&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#4-%E6%80%BB%E7%BB%93">4 总结&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="1-引言">1 引言&lt;/h2>
&lt;p>只要你学了Python语言，就不会不知道for循环，也肯定用for循环来遍历一个列表（list)，那为什么for循环可以遍历list，而不能遍历int类型对象呢？怎么让一个自定义的对象可遍历？&lt;/p>
&lt;p>这篇博客中，我们来一起探索一下这个问题，在这个过程中，我们会介绍到迭代器、可迭代对象、生成器，更进一步的，我们会详细介绍他们的原理、异同。&lt;/p>
&lt;h2 id="2-迭代器与可迭代对象">2 迭代器与可迭代对象&lt;/h2>
&lt;p>在开始下面内容之前，我们先说说标题中的“迭代”一词。什么是迭代？我认为，迭代一个完整过程中的一个重复，或者说每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值，举一个类比来说：一个人类家族的发展是一个完整过程，需要经过数代人的努力，每一代都会以接着上一代的成果继续发展，所以每一代都是迭代。&lt;/p>
&lt;h3 id="21-迭代器">2.1 迭代器&lt;/h3>
&lt;p>（1）怎么判断是否可迭代&lt;/p>
&lt;p>作为一门设计语言，Python提供了许多必要的数据类型，例如基本数据类型&lt;code>int、bool、str&lt;/code>，还有容器类型&lt;code>list、tuple、dict、set&lt;/code>。这些类型当中，有些是可迭代的，有些不可迭代，怎么判断呢？&lt;/p>
&lt;p>在Python中，我们把所有可以迭代的对象统称为可迭代对象，有一个类专门与之对应：&lt;code>Iterable&lt;/code>。所以，要判断一个类是否可迭代，只要判断是否是&lt;code>Iterable&lt;/code>类的实例即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">((),&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以，整型、布尔不可迭代，字符串、列表、字典、元组可迭代。&lt;/p>
&lt;p>怎么让一个对象可迭代呢？毕竟，很多时候，我们需要用到的对象不止Python内置的这些数据类型，还有自定义的数据类型。答案就是实现&lt;code>__iter__()&lt;/code>方法，只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A()是可迭代对象吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">Iterable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果输出为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是可迭代对象吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>瞧，我们在&lt;code>__iter__()&lt;/code>方法里面甚至没写任何东西，&lt;strong>反正我们在类A中定义则&lt;code>__iter__()&lt;/code>方法，那么，它就是一个可迭代对象&lt;/strong>。&lt;/p>
&lt;p>重要的事情说3遍：&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>只要一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象&lt;/strong>。&lt;/p>
&lt;h3 id="22-迭代器">2.2 迭代器&lt;/h3>
&lt;p>迭代器是对可迭代对象的改造升级，上面说过，一个对象定义了&lt;code>__iter__()&lt;/code>方法，那么它就是可迭代对象，进一步地，&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>来，跟我读三遍：&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果一个对象同时实现了&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，那么它就是迭代器&lt;/strong>。&lt;/p>
&lt;p>在Python中，也有一个类与迭代器对应：&lt;code>Iterator&lt;/code>。所以，要判断一个类是否是迭代器，只要判断是否是&lt;code>Iterator&lt;/code>类的实例即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B()是可迭代对象吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B()是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是可迭代对象吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可见，&lt;strong>迭代器一定是可迭代对象，但可迭代对象不一定是迭代器&lt;/strong>。&lt;/p>
&lt;p>所以整型、布尔一定不是迭代器，因为他们连可迭代对象都算不上。那么，字符串、列表、字典、元组是迭代器吗？猜猜！&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">((),&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>惊不惊喜，意不意外，字符串、列表、字典、元组都不是迭代器。那为什么它们可以在&lt;code>for&lt;/code>循环中遍历呢？而且，我想，看到这里，就算你已经可以在形式上区分可迭代对象和迭代器，但是你可能会问，这有什么卵用吗？确实，没多少卵用，因为我们还不知道&lt;code>__iter__()、__next__()&lt;/code>到底是个什么鬼东西。&lt;/p>
&lt;p>接下来，我们通过继续探究&lt;code>for&lt;/code>循环的本质来解答这些问题。&lt;/p>
&lt;h3 id="23-for循环的本质">2.3 for循环的本质&lt;/h3>
&lt;p>说到&lt;code>__iter__()&lt;/code>和&lt;code>__next__()&lt;/code>方法，就很有必要介绍一下&lt;code>iter()&lt;/code>和&lt;code>next()&lt;/code>方法了。&lt;/p>
&lt;p>（1）&lt;code>iter()&lt;/code>与&lt;code>__iter__()&lt;/code>&lt;/p>
&lt;p>&lt;code>__iter__()&lt;/code>的作用是返回一个迭代器，虽然上面说过，只要实现了&lt;code>__iter__()&lt;/code>方法就是可迭代对象，但是，没有实现功能（返回迭代器）总归是有问题的，就像一个村长，当选之后，那就是村长了，但是如果尸位素餐不做事，那总是有问题的。&lt;/p>
&lt;p>&lt;code>__iter__()&lt;/code>方法毕竟是一个特殊方法，不适合直接调用，所以Python提供了&lt;code>iter()&lt;/code>方法。&lt;code>iter()&lt;/code>是Python提供的一个内置方法，可以不用导入，直接调用即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A类的__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B类的__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对A类对象调用iter()方法前，a是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对A类对象调用iter()方法后，a1是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对B类对象调用iter()方法前，b是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;对B类对象调用iter()方法后，b1是迭代器吗：&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">对A类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法前&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">a是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">A类的__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">对A类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法后&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">a1是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">对B类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法前&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">b是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">B类的__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="n">对B类对象调用iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法后&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">b1是迭代器吗&lt;/span>&lt;span class="err">：&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于B类，因为B类本身就是迭代器，所以可以直接返回B类的实例，也就是说&lt;code>self&lt;/code>，当然，你要是返回其他迭代器也没毛病。对于类A，它只是一个可迭代对象，&lt;code>__iter__()&lt;/code>方法&lt;strong>需要返回一个迭代器&lt;/strong>，所以返回了B类的实例，如果返回的不是一个迭代器，调用&lt;code>iter()&lt;/code>方法时就会报以下错误：&lt;em>TypeError: iter() returned non-iterator of type 'A'&lt;/em>
。&lt;/p>
&lt;p>（2）&lt;code>next()&lt;/code>与&lt;code>__next__()&lt;/code>&lt;/p>
&lt;p>&lt;code>__next__()&lt;/code>的作用是返回遍历过程中的下一个元素，如果没有下一个元素则主动抛出&lt;code>StopIteration&lt;/code>异常。而&lt;code>next()&lt;/code>就是Python提供的一个用于调用&lt;code>__next__()&lt;/code>方法的内置方法。&lt;/p>
&lt;p>下面，我们通过&lt;code>next()&lt;/code>方法来遍历一个list：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">list_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#19&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="ne">TypeError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;list&amp;#39;&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="n">iterator&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">list_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#24&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为列表只是可迭代对象，不是迭代器，所以对list_1直接调用&lt;code>next()&lt;/code>方法会产生异常。对list_1调用&lt;code>iter()&lt;/code>后就可以获得是迭代器的list_2，对list_2每一次调用&lt;code>next()&lt;/code>方法都会取出一个元素，当没有下一个元素时继续调用&lt;code>next()&lt;/code>就抛出了&lt;code>StopIteration&lt;/code>异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 2&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 3&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lst&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A.__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　&lt;span class="k">return&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 8&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lst&lt;/span>
&lt;span class="ln">10&lt;/span> 　　&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">11&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B.__iter__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> 　　&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;span class="ln">14&lt;/span> 　　&lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">15&lt;/span> 　　&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">16&lt;/span> 　　 &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B.__next__()方法被调用&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> 　　 &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">18&lt;/span> 　　 &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">19&lt;/span> 　　 &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="ln">20&lt;/span> 　　 &lt;span class="k">except&lt;/span> &lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">21&lt;/span> 　　 &lt;span class="k">raise&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#78&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__next__&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">list&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="nb">range&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="n">During&lt;/span> &lt;span class="n">handling&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">above&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">another&lt;/span> &lt;span class="n">exception&lt;/span> &lt;span class="n">occurred&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#84&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#78&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="fm">__next__&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="k">raise&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A类实例化出来的实例a只是可迭代对象，不是迭代器，调用&lt;code>iter()&lt;/code>方法后，返回了一个B类的实例a1，每次对a1调用&lt;code>next()&lt;/code>方法，都用调用B类的&lt;code>__next__()&lt;/code>方法。&lt;/p>
&lt;p>接下来，我们用for循环遍历一下A类实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln"> 2&lt;/span>　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>通过&lt;code>for&lt;/code>循环对一个可迭代对象进行迭代时，&lt;code>for&lt;/code>循环内部机制会自动通过调用&lt;code>iter()&lt;/code>方法执行可迭代对象内部定义的&lt;code>__iter__()&lt;/code>方法来获取一个迭代器，然后一次又一次得迭代过程中通过调用&lt;code>next()&lt;/code>方法执行迭代器内部定义的&lt;code>__next__()&lt;/code>方法获取下一个元素，当没有下一个元素时，&lt;code>for&lt;/code>循环自动捕获并处理&lt;code>StopIteration&lt;/code>异常。如果你还没明白，请看下面用&lt;code>while&lt;/code>循环实现&lt;code>for&lt;/code>循环功能，整个过程、原理都是一样的&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 5&lt;/span>　　　　&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 6&lt;/span>　　　　　　&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>　　　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>　　　　&lt;span class="k">except&lt;/span> &lt;span class="ne">StopIteration&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span>　　　　　　&lt;span class="k">break&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1"># 作为一个迭代器，B类对象也可以通过for循环来迭代：&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="ln">21&lt;/span>　　　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;for循环中取出值:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__iter__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">for循环中取出值&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__next__&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="n">方法被调用&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看出来了吗？这就是for循环的本质。&lt;/p>
&lt;h2 id="3-生成器">3 生成器&lt;/h2>
&lt;h3 id="31-迭代器与生成器">3.1 迭代器与生成器&lt;/h3>
&lt;p>如果一个函数体内部使用&lt;code>yield&lt;/code>关键字，这个函数就称为生成器函数，生成器函数调用时产生的对象就是生成器。生成器是一个特殊的迭代器，在调用该生成器函数时，Python会自动在其内部添加&lt;code>__iter__()&lt;/code>方法和&lt;code>__next__()&lt;/code>方法。把生成器传给 &lt;code>next()&lt;/code> 函数时， 生成器函数会向前继续执行， 执行到函数定义体中的下一个&lt;code>yield&lt;/code>语句时， 返回产出的值， 并在函数定义体的当前位置暂停， 下一次通过&lt;code>next()&lt;/code>方法执行生成器时，又从上一次暂停位置继续向下……，最终， 函数内的所有&lt;code>yield&lt;/code>都执行完，如果继续通过&lt;code>yield&lt;/code>调用生成器， 则会抛出&lt;code>StopIteration&lt;/code> 异常——这一点与迭代器协议一致。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterable&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">gen&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第1次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第2次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln"> 8&lt;/span> 　　&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;第3次执行&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> 　　&lt;span class="k">yield&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="kc">True&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="n">gen&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x0000021CE9A39A98&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="n">第1次执行&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">第2次执行&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">第3次执行&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#120&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，生成器的执行机制与迭代器是极其相似的，生成器本就是迭代器，只不过，有些特殊。那么，生成器特殊在哪呢？或者说，有了迭代器，为什么还要用生成器？&lt;/p>
&lt;p>从上面的介绍和代码中可以看出，生成器采用的是一种惰性计算机制，一次调用也只会产生一个值，它不会将所有的值一次性返回给你，你需要一个那就调用一次&lt;code>next()&lt;/code>方法取一个值，&lt;em>这样做的好处是如果元素有很多（数以亿计甚至更多），如果用列表一次性返回所有元素，那么会消耗很大内存，如果我们只是想要对所有元素依次一个一个取出来处理，那么，使用生成器就正好，一次返回一个，并不会占用太大内存&lt;/em>。&lt;/p>
&lt;p>举个例子，假设我们现在要取1亿以内的所有偶数，如果用列表来实现，代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">fun_list&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">temp_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000000&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">temp_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">temp_list&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面程序会先获取所有符合要求的偶数，然后一次性返回。如果你运行了代码，你就会发现两个问题——运行时间很长、消耗很多内存。&lt;/p>
&lt;p>有时候，我们并不一定需要一次性获得所有的对象，需要一个使用一个就可以，这样的话，可以用生成器来实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">fun_gen&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln"> 2&lt;/span> 　　&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 3&lt;/span> 　　&lt;span class="k">while&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000000&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 4&lt;/span> 　　 &lt;span class="k">if&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 5&lt;/span> 　　 &lt;span class="k">yield&lt;/span> &lt;span class="n">index&lt;/span>
&lt;span class="ln"> 6&lt;/span> 　　 &lt;span class="n">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">fun_gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="n">fun_gen&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x00000222DC2F4360&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fun_gen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="mi">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看到了吗？对生成器没执行一次&lt;code>next()&lt;/code>方法，就会返回一个元素，这样的话无论在速度上还是机器性能消耗上都会好很多。如果你还没感受到生成器的优势，我再说一个应用场景，假如需要取出远程数据库中的100万条记录进行处理，如果一次性获取所有记录，网络带宽、内存都会有很大消耗，但是如果使用生成器，就可以取一条，就在本地处理一条。&lt;/p>
&lt;p>不过，生成器也有不足，正因为采用了&lt;strong>惰性计算&lt;/strong>，你不会知道下一个元素是什么，更不会知道后面还有多少元素，所以，对于列表、元组等结构，我们能调用&lt;code>len()&lt;/code>方法获知长度，但是对于生成器却不能。&lt;/p>
&lt;p>总结一下迭代器与生成器的异同：&lt;/p>
&lt;ol>
&lt;li>生成器是一种特殊的迭代器，拥有迭代器的所有特性；&lt;/li>
&lt;li>迭代器使用return返回值而生成器使用yield返回值每一次对生成器执行next()都会在yield处暂停；&lt;/li>
&lt;li>迭代器和生成器虽然都执行next()方法时返回下一个元素，迭代器在实例化前就已知所有元素，但是采用惰性计算机制，共有多少元素，下一个元素是什么都是未知的，每一次对生成器对象执行next()方法才会产生下一个元素。&lt;/li>
&lt;/ol>
&lt;h3 id="32-生成器解析式">3.2 生成器解析式&lt;/h3>
&lt;p>使用过列表解析式吗？语法格式为：&lt;code>[返回值 for 元素 in 可迭代对象 if 条件]&lt;/code>&lt;/p>
&lt;p>看下面代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">3&lt;/span> 　　&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">4&lt;/span> 　　&lt;span class="n">li&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以用列表解析式实现同样功能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">li&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nc">list&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>很简单对不对？简洁了很多，返回的li就是一个列表。咳咳……偏题了，我们要说的是生成器解析式，而且我相信打开我这篇博文的同学大多都熟悉列表解析式，回归正题。&lt;/p>
&lt;p>生成器解析式语法格式为：&lt;code>(返回值 for 元素 in 可迭代对象 if 条件)&lt;/code>&lt;/p>
&lt;p>你没看错，跟列表解析式相比，生成器解析式只是把方括号换成了原括号。来感受一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">g&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="nb">object&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">genexpr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x00000222DC2F4468&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;pyshell#38&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="ne">StopIteration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，生成器解析式返回的就是一个生成器对象，换句话说生成器解析式是生成器的一种定义方式，这种方式简单快捷，当然实现的功能不能太复杂。&lt;/p>
&lt;p>我的补充:&lt;code>{返回值 for 元素 in 可迭代对象 if 条件}&lt;/code> 是集合解析式。用法和列表解析式是一样的，就是把中括号 &lt;code>[ ]&lt;/code>换成大括号 &lt;code>{ }&lt;/code>&lt;/p>
&lt;p>需要注意得是，集合解析式，最终生成的也是集合，&lt;strong>集合里面的元素必须是hashable&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>Hashable:一个对象能被称为 hashable ， 它必须有个 hash 值，这个值在整个生命周期都不会变化，而且必须可以进行相等比较，所以一个对象可哈希，它必须实现&lt;code>__hash__()&lt;/code> 与 &lt;code>__eq__()&lt;/code> 方法。&lt;/p>
&lt;p>对于 Python 的内建类型来说，只要是创建之后无法修改的(immutable)类型都是 hashable 如字符串，可变动的都是 unhashable的比如：列表、字典、集合，他们在改变值的同时却没有改变&lt;code>id&lt;/code>,无法由地址定位值的唯一性,因而无法哈希。我们自定义的类的实例对象默认也是可哈希的（hashable），而hash值也就是它们的&lt;code>id()&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-总结">4 总结&lt;/h2>
&lt;p>本文全面总结了Python中可迭代对象、迭代器、生成器知识，我相信，只要你认真消化我这篇博文，就能深刻领悟迭代器生成器。&lt;/p></description></item><item><title>python-axis的方向</title><link>https://surprisedcat.github.io/projectnotes/python-axis%E7%9A%84%E6%96%B9%E5%90%91/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-axis%E7%9A%84%E6%96%B9%E5%90%91/</guid><description>
&lt;h2 id="python中axis的方向numpy-pandas-tensorflow---omit-in-toc---">Python中axis的方向（numpy， pandas， tensorflow）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>版权声明：本文为CSDN博主「fangjian1204」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：&lt;a href="https://blog.csdn.net/fangjian1204/article/details/53055219">https://blog.csdn.net/fangjian1204/article/details/53055219&lt;/a>&lt;/p>
&lt;h2 id="axis的作用即如何理解">axis的作用即如何理解&lt;/h2>
&lt;p>numpy是python进行科学计算必不可少的模块，随着深度学习越来越火，numpy也越来越流行。了解numpy的人知道，在numpy中，有很多的函数都涉及到axis，很多函数根据axis的取值不同，得到的结果也完全不同。可以说，axis让numpy的多维数组变的更加灵活，但也让numpy变得越发难以理解。这里通过详细的例子来学习下，axis到底是什么，它在numpy中的作用到底如何。&lt;/p>
&lt;p>为什么会有axis这个东西，原因很简单：numpy是针对矩阵或者多为数组进行运算的，而在多维数组中，对数据的操作有太多的可能，我们先来看一个例子。比如我们有一个二维数组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个数组代表了样本数据的特征，其中每一行代表一个样本的三个特征，每一列是不同样本的特征。如果在分析样本的过程中需要对每个样本的三个特征求和，该如何处理？简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那如果想求每种特征的最小值，该如何处理？也简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>又如果想得知所有样本所有特征的平均值呢？还是很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="mf">1.6666666666666667&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由此可以看出，通过不同的axis，numpy会沿着不同的方向进行操作：如果不设置，那么对所有的元素操作；如果axis=0，则沿着纵轴进行操作；axis=1，则沿着横轴进行操作。&lt;/p>
&lt;p>但这只是简单的二位数组，如果是多维的呢？可以总结为一句话：&lt;strong>设axis=i，则numpy沿着第i个下标变化的放下进行操作&lt;/strong>。例如刚刚的例子，可以将表示为：&lt;code>data =[[a00, a01],[a10,a11]]&lt;/code>，所以&lt;code>axis=0&lt;/code>时，沿着第0个下标变化的方向进行操作，也就是&lt;code>a00-&amp;gt;a10, a01-&amp;gt;a11&lt;/code>，也就是纵坐标的方向，&lt;code>axis=1&lt;/code>时也类似。下面我们举一个四维的求sum的例子来验证一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]]],&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当axis=0时，numpy验证第0维的方向来求和，也就是第一个元素值=a0000+a1000+a2000+a3000=11,第二个元素=a0001+a1001+a2001+a3001=5，同理可得最后的结果如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">7&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">9&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当axis=3时，numpy验证第3维的方向来求和，也就是第一个元素值=a0000+a0001+a0002=5,第二个元素=a0010+a0011+a0012=7，同理可得最后的结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[[&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">[[&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]]])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>图像处理-opencv中RGB与BGR通道</title><link>https://surprisedcat.github.io/projectnotes/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-opencv%E4%B8%ADrgb%E4%B8%8Ebgr%E9%80%9A%E9%81%93/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-opencv%E4%B8%ADrgb%E4%B8%8Ebgr%E9%80%9A%E9%81%93/</guid><description>
&lt;h2 id="基于python的opencv中rgb与bgr图片格式转换---omit-in-toc---">基于Python的OpenCV中RGB与BGR图片格式转换&lt;!-- omit in toc -->&lt;/h2>
&lt;p>我们在使用OpenCV时，经常需要将处理过的图片展示出来，由于OpenCV中显示图片的函数cv2.imshow()功能往往不能满足我们的需求，所以经常用Matplotlib显示图像，方便结果图片的放大、保存等操作。&lt;/p>
&lt;p>但是，OpenCV和Matplotlib中图片的像素排列方式略有不同。OpenCV中图片像素按照BGR方式排列，而Matpoltlib中图片按照RGB方式排序，这样使用OpenCV读入的图片经过Matplotlib展示时，就会出现反相问题。&lt;/p>
&lt;p>这里使用OpenCV的logo作为实验对象：&lt;/p>
&lt;p>&lt;img src="../images/opencv_logo.jpg" alt="OpenCV Logo">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;logo.png&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#使用OpenCV读入图像&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">#使用matplotliob展示图片&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/opencv_logo_br_reversed.jpg" alt="OpenCV Logo">&lt;/p>
&lt;p>与原图相比，上图的红色部分与蓝色部分交换了位置，意思是图片中红色像素和蓝色像素排列位置做了交换，印证了读入的BGR格式经过Matplotlib展示后变成了RGB格式。而且绿色的部分也有明显的色差。&lt;/p>
&lt;p>要想正确的显示图片，必须先把读入的BGR图片中的B通道和R通道交换位置。这里有两种可行的方法可以实现BGR TO RGB操作。&lt;/p>
&lt;h2 id="方法1先拆分通道bgr再合并通道rgb">方法1：先拆分通道B、G、R，再合并通道R、G、B&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>b,g,r = cv.split(img)#拆分通道
&lt;span class="ln">2&lt;/span>img_1 = cv.merge([r,g,b])#合并通道
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在拆分通道时，除了使用OpenCV的split（）方法，还可以用Numpy的索引：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到蓝色通道&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到绿色通道&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="p">[:,:,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c1">#得到红色通道&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Matplotlib中显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">122&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/opencv_logo_rgb_bgr.jpg" alt="opencv logo rgb bgr">&lt;/p>
&lt;p>在第二幅图片中，可以看到展示结果与原图一致。&lt;/p>
&lt;h2 id="方法2直接使用numpy索引">方法2：直接使用Numpy索引&lt;/h2>
&lt;p>我们都知道Numpy在计算这种大型矩阵时，索引的效率很高，所以下面的方法简单高效，及其推荐使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">img_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="p">[:,:,::&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">131&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Original&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">132&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subplot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">133&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imshow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Display_RGB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../images/opencv_logo_bgr2rgb.jpg" alt="opencv logo brg to rgb">&lt;/p>
&lt;p>可以看出，后面两幅图片与OpenCV的logo图片一致，都能正确的显示结果，但方法2更简单、高效、容易理解。&lt;/p></description></item><item><title>bugs-编程的bug们</title><link>https://surprisedcat.github.io/projectnotes/bugs-%E7%BC%96%E7%A8%8B%E7%9A%84bug%E4%BB%AC/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/bugs-%E7%BC%96%E7%A8%8B%E7%9A%84bug%E4%BB%AC/</guid><description>
&lt;h2 id="编程的bug们---omit-in-toc---">编程的bug们&lt;!-- omit in toc -->&lt;/h2>
&lt;p>积累在编程过程中遇到的神奇bug，不积跬步无以至千里，不积小流无以成江海。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E9%9B%B6%E5%AE%BD%E5%AD%97%E7%AC%A6zero-width-space">零宽字符zero-width space&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="零宽字符zero-width-space">零宽字符zero-width space&lt;/h2>
&lt;p>来源：在赋值网页上的js代码直接粘贴到IDE中运行，但是报错&lt;code>Uncaught SyntaxError SyntaxError: Invalid or unexpected token&lt;/code>，但是在文件中并未发现认为非法字符。&lt;/p>
&lt;p>发现：首先，光标移动时发现在有的位置多停留了，用hex editor打开文件，发现多了“E2 80 8b”这几个字符，随即到往上查询，发现这是零宽字符，属于一种特殊的Uicode字符，有很多神奇的用法，例如保密、水印、干扰复制等等。&lt;/p>
&lt;p>解决：删除特殊的零宽字符，并用hex editor检查。以后直接从网上复制文本需要注意这些看不见的字符啊。&lt;/p></description></item><item><title>raspberry-kubernetes-node</title><link>https://surprisedcat.github.io/projectnotes/raspberry-kubernetes-node/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-kubernetes-node/</guid><description>
&lt;h2 id="将树莓派变成kubernetes的一个节点---omit-in-toc---">将树莓派变成Kubernetes的一个节点&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="前提">前提&lt;/h2>
&lt;p>我在自己的主机上搭建了一个K8S集群，一个master节点，两个node节点，手边还有三个树莓派，想把他们也并到集群中。昨天我在docker中安装了docker，而kubernetes官网上也有arm的二进制文件，今天打算将这些文件配置到raspberry上，使之成为K8S集群的新节点。&lt;/p>
&lt;p>&lt;strong>需要指出的是&lt;/strong>，我原来的集群是X86_64架构的机器，raspberry是arm架构的，他们用的是不一样的镜像，在master节点需要指定不同架构的镜像给不同的node节点。&lt;/p>
&lt;h2 id="下载kubernetes-node节点">下载kubernetes node节点&lt;/h2>
&lt;p>本人使用的是k8s 1.8版本的（master节点是这个版本）$^{[1]}$
&lt;img src="../images/k8s-nodes.jpg" alt="K8S node 节点">&lt;/p>
&lt;p>解压后新建文件夹：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo mkdir -p /opt/kubernetes/&lt;span class="o">{&lt;/span>bin,cfg&lt;span class="o">}&lt;/span>
&lt;span class="ln">2&lt;/span>sudo mv kubelet kubectl kube-proxy /opt/kubernetes/bin/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编写kubernetes配置文件">编写Kubernetes配置文件&lt;/h2>
&lt;h3 id="创建kubeconfig配置文件">创建kubeconfig配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>sudo vim /opt/kubernetes/cfg/kubelet.kubeconfig
&lt;span class="ln"> 2&lt;/span>apiVersion: v1
&lt;span class="ln"> 3&lt;/span>kind: Config
&lt;span class="ln"> 4&lt;/span>clusters:
&lt;span class="ln"> 5&lt;/span> - cluster:
&lt;span class="ln"> 6&lt;/span> server: http://&lt;span class="o">{&lt;/span>master 节点 IP&lt;span class="o">}&lt;/span>:8080
&lt;span class="ln"> 7&lt;/span> name: &lt;span class="nb">local&lt;/span>
&lt;span class="ln"> 8&lt;/span>contexts:
&lt;span class="ln"> 9&lt;/span> - context:
&lt;span class="ln">10&lt;/span> cluster: &lt;span class="nb">local&lt;/span>
&lt;span class="ln">11&lt;/span> name: &lt;span class="nb">local&lt;/span>
&lt;span class="ln">12&lt;/span>current-context: &lt;span class="nb">local&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建配置文件kubeconfig用于kubelet连接master apiserver。&lt;/p>
&lt;h3 id="创建自身配置文件">创建自身配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>sudo vim /opt/kubernetes/cfg/kubelet
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># 启用日志标准错误&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">KUBE_LOGTOSTDERR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--logtostderr=true&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># 日志级别&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">KUBE_LOG_LEVEL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--v=4&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># Kubelet服务IP地址&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">NODE_ADDRESS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--address={本机IP}&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># Kubelet服务端口&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">NODE_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--port=10250&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># 自定义节点名称&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">NODE_HOSTNAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--hostname-override={本机IP}&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># kubeconfig路径，指定连接API服务器&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">KUBELET_KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># 允许容器请求特权模式，默认false&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nv">KUBE_ALLOW_PRIV&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--allow-privileged=false&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># DNS信息&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nv">KUBELET_DNS_IP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--cluster-dns=172.16.76.2&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nv">KUBELET_DNS_DOMAIN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--cluster-domain=cluster.local&amp;#34;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1"># 禁用使用Swap&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nv">KUBELET_SWAP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--fail-swap-on=false&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建systemd服务文件">创建systemd服务文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>sudo vim /lib/systemd/system/kubelet.service
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">[&lt;/span>Unit&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">Description&lt;/span>&lt;span class="o">=&lt;/span>Kubernetes Kubelet
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">After&lt;/span>&lt;span class="o">=&lt;/span>docker.service
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">Requires&lt;/span>&lt;span class="o">=&lt;/span>docker.service
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">[&lt;/span>Service&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">EnvironmentFile&lt;/span>&lt;span class="o">=&lt;/span>-/opt/kubernetes/cfg/kubelet
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>/opt/kubernetes/bin/kubelet &lt;span class="se">\
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_LOGTOSTDERR&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_LOG_LEVEL&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NODE_ADDRESS&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NODE_PORT&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NODE_HOSTNAME&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBELET_KUBECONFIG&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_ALLOW_PRIV&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBELET_DNS_IP&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBELET_DNS_DOMAIN&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBELET_SWAP&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nv">Restart&lt;/span>&lt;span class="o">=&lt;/span>on-failure
&lt;span class="ln">20&lt;/span>&lt;span class="nv">KillMode&lt;/span>&lt;span class="o">=&lt;/span>process
&lt;span class="ln">21&lt;/span>&lt;span class="o">[&lt;/span>Install&lt;span class="o">]&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>multi-user.target
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c1"># systemctl daemon-reload&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c1"># systemctl enable kubelet&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c1"># systemctl restart kubelet&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建kube-proxy配置文件">创建kube-proxy配置文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo vim /opt/kubernetes/cfg/kube-proxy
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 启用日志标准错误&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">KUBE_LOGTOSTDERR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--logtostderr=true&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># 日志级别&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nv">KUBE_LOG_LEVEL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--v=4&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="c1"># 自定义节点名称&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nv">NODE_HOSTNAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--hostname-override={本机IP}&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="c1"># API服务地址&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="nv">KUBE_MASTER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--master=http://{master 节点 IP}:8080&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建proxy的systemd服务文件">创建proxy的systemd服务文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>sudo vim /lib/systemd/system/kube-proxy.service
&lt;span class="ln"> 2&lt;/span>&lt;span class="o">[&lt;/span>Unit&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">Description&lt;/span>&lt;span class="o">=&lt;/span>Kubernetes Proxy
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">After&lt;/span>&lt;span class="o">=&lt;/span>network.target
&lt;span class="ln"> 5&lt;/span>&lt;span class="o">[&lt;/span>Service&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">EnvironmentFile&lt;/span>&lt;span class="o">=&lt;/span>-/opt/kubernetes/cfg/kube-proxy
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>/opt/kubernetes/bin/kube-proxy &lt;span class="se">\
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_LOGTOSTDERR&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_LOG_LEVEL&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NODE_HOSTNAME&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">KUBE_MASTER&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">Restart&lt;/span>&lt;span class="o">=&lt;/span>on-failure
&lt;span class="ln">13&lt;/span>&lt;span class="o">[&lt;/span>Install&lt;span class="o">]&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nv">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>multi-user.target
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后将/opt/kubernetes/bin 放到PATH变量中。&lt;/p>
&lt;h2 id="遇到问题">遇到问题&lt;/h2>
&lt;blockquote>
&lt;p>Failed to start ContainerManager system validation failed - Following Cgroup subsystem not mounted: [memory]&lt;/p>
&lt;/blockquote>
&lt;p>新建文件/etc/default/grub,添加：$^{[2]}$&lt;/p>
&lt;blockquote>
&lt;p>GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo update-grub
&lt;span class="ln">2&lt;/span>&lt;span class="c1"># 如果无法找到 update-grub 命令，你可以通过下面的命令安装它。&lt;/span>
&lt;span class="ln">3&lt;/span>sudo apt-get install grub2-common
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者更有效的是，在/boot/cmdline.txt之后加入
cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1&lt;br>
再reboot。就可以了。$^{[3]}$&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>[1]&lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#node-binaries">Kubernetes Github&lt;/a>&lt;/p>
&lt;p>[2]&lt;a href="https://linux.cn/article-2268-1.html">如何在linux上通过GRUB添加内核参数&lt;/a>&lt;/p>
&lt;p>[3]&lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?p=1312253">树莓派论坛&lt;/a>&lt;/p></description></item><item><title>raspberry-docker-install</title><link>https://surprisedcat.github.io/projectnotes/raspberry-docker-install/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-docker-install/</guid><description>
&lt;h2 id="树莓派安装-docker---omit-in-toc---">树莓派安装 docker&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="系统选择">系统选择&lt;/h2>
&lt;p>我使用的是2018-04-18的RASPBIAN STRETCH LITE版本，我之前用过时间靠前的版本但是安装总是失败，还了这个版本是成功的。
官网上说:&lt;/p>
&lt;blockquote>
&lt;p>To install Docker CE, you need the 64-bit version of one of these Debian or Raspbian versions:&lt;/p>
&lt;ul>
&lt;li>Buster 10 (Docker CE 17.11 Edge only)&lt;/li>
&lt;li>Stretch 9 (stable) / Raspbian Stretch&lt;/li>
&lt;li>Jessie 8 (LTS) / Raspbian Jessie&lt;/li>
&lt;li>Wheezy 7.7 (LTS)&lt;/li>
&lt;/ul>
&lt;p>Docker CE is supported on both x86_64 (or amd64) and armhf architectures for Jessie and Stretch.&lt;/p>
&lt;/blockquote>
&lt;p>但是我看了树莓派目前的官方版本是32位的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>file /bin/dash
&lt;span class="ln">2&lt;/span>/bin/dash: ELF 32-bit LSB executable, ARM, EABI5 version &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span>SYSV&lt;span class="o">)&lt;/span>, dynamically linked, interpreter /lib/ld-linux-armhf.so.3, &lt;span class="k">for&lt;/span> GNU/Linux 3.2.0, BuildID&lt;span class="o">[&lt;/span>sha1&lt;span class="o">]=&lt;/span>18bddc2d67c785bbaaf97cbb2c0dd5420a1861b3, stripped
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，&lt;strong>也安装成功了&lt;/strong>。&lt;/p>
&lt;h2 id="修改树莓派源">修改树莓派源&lt;/h2>
&lt;p>我认为这是非常重要的一步，我在用官方源的时候opencas的镜像总是无法访问，后来换成了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># /etc/apt/sources.list&lt;/span>
&lt;span class="ln">2&lt;/span>deb http://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，奇迹的可以用了。&lt;/p>
&lt;h2 id="安装docker">安装docker&lt;/h2>
&lt;p>根据官方文档的说法：一些方式是不适用于rasbian系统的。&lt;/p>
&lt;blockquote>
&lt;p>Raspbian users cannot use this method!&lt;br>
For Raspbian, installing using the repository is not yet supported. You must instead use the &lt;strong>convenience script&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>官方推荐是使用一个&lt;strong>便捷脚本&lt;/strong>，我在没有改源之前使用这个脚本也没有成功，换了源就安装成功了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>pi@raspberrypi:~ $ curl -fsSL get.docker.com -o get-docker.sh
&lt;span class="ln"> 2&lt;/span>pi@raspberrypi:~ $ sudo sh get-docker.sh
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># Executing docker install script, commit: 36b78b2&lt;/span>
&lt;span class="ln"> 4&lt;/span>+ sh -c apt-get update -qq &amp;gt;/dev/null
&lt;span class="ln"> 5&lt;/span>+ sh -c apt-get install -y -qq apt-transport-https ca-certificates curl &amp;gt;/dev/null
&lt;span class="ln"> 6&lt;/span>+ sh -c curl -fsSL &lt;span class="s2">&amp;#34;https://download.docker.com/linux/raspbian/gpg&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> apt-key add -qq - &amp;gt;/dev/null
&lt;span class="ln"> 7&lt;/span>Warning: apt-key output should not be parsed &lt;span class="o">(&lt;/span>stdout is not a terminal&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>+ sh -c &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=armhf] https://download.docker.com/linux/raspbian stretch edge&amp;#34;&lt;/span> &amp;gt; /etc/apt/sources.list.d/docker.list
&lt;span class="ln"> 9&lt;/span>+ &lt;span class="o">[&lt;/span> &lt;span class="nv">raspbian&lt;/span> &lt;span class="o">=&lt;/span> debian &lt;span class="o">]&lt;/span>
&lt;span class="ln">10&lt;/span>+ sh -c apt-get update -qq &amp;gt;/dev/null
&lt;span class="ln">11&lt;/span>+ sh -c apt-get install -y -qq --no-install-recommends docker-ce &amp;gt;/dev/null
&lt;span class="ln">12&lt;/span>+ sh -c docker version
&lt;span class="ln">13&lt;/span>Client:
&lt;span class="ln">14&lt;/span> Version: 18.05.0-ce
&lt;span class="ln">15&lt;/span> API version: 1.37
&lt;span class="ln">16&lt;/span> Go version: go1.9.5
&lt;span class="ln">17&lt;/span> Git commit: f150324
&lt;span class="ln">18&lt;/span> Built: Wed May &lt;span class="m">9&lt;/span> 22:24:36 &lt;span class="m">2018&lt;/span>
&lt;span class="ln">19&lt;/span> OS/Arch: linux/arm
&lt;span class="ln">20&lt;/span> Experimental: &lt;span class="nb">false&lt;/span>
&lt;span class="ln">21&lt;/span> Orchestrator: swarm
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>Server:
&lt;span class="ln">24&lt;/span> Engine:
&lt;span class="ln">25&lt;/span> Version: 18.05.0-ce
&lt;span class="ln">26&lt;/span> API version: 1.37 &lt;span class="o">(&lt;/span>minimum version 1.12&lt;span class="o">)&lt;/span>
&lt;span class="ln">27&lt;/span> Go version: go1.9.5
&lt;span class="ln">28&lt;/span> Git commit: f150324
&lt;span class="ln">29&lt;/span> Built: Wed May &lt;span class="m">9&lt;/span> 22:20:37 &lt;span class="m">2018&lt;/span>
&lt;span class="ln">30&lt;/span> OS/Arch: linux/arm
&lt;span class="ln">31&lt;/span> Experimental: &lt;span class="nb">false&lt;/span>
&lt;span class="ln">32&lt;/span>If you would like to use Docker as a non-root user, you should now consider
&lt;span class="ln">33&lt;/span>adding your user to the &lt;span class="s2">&amp;#34;docker&amp;#34;&lt;/span> group with something like:
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span> sudo usermod -aG docker your-user
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span>Remember that you will have to log out and back in &lt;span class="k">for&lt;/span> this to take effect!
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span>WARNING: Adding a user to the &lt;span class="s2">&amp;#34;docker&amp;#34;&lt;/span> group will grant the ability to run
&lt;span class="ln">40&lt;/span> containers which can be used to obtain root privileges on the
&lt;span class="ln">41&lt;/span> docker host.
&lt;span class="ln">42&lt;/span> Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface
&lt;span class="ln">43&lt;/span> &lt;span class="k">for&lt;/span> more information.
&lt;span class="ln">44&lt;/span>pi@raspberrypi:~ $ sudo usermod -aG docker &lt;span class="sb">`&lt;/span>whoami&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启下cmd界面（否则还是需要sudo），安装成功。&lt;/p>
&lt;h2 id="测试">测试&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>pi@raspberrypi:~ $ docker run -ti armhf/alpine:3.5 /bin/sh
&lt;span class="ln"> 2&lt;/span>Unable to find image &lt;span class="s1">&amp;#39;armhf/alpine:3.5&amp;#39;&lt;/span> locally
&lt;span class="ln"> 3&lt;/span>3.5: Pulling from armhf/alpine
&lt;span class="ln"> 4&lt;/span>e68f2aaec91c: Pull &lt;span class="nb">complete&lt;/span>
&lt;span class="ln"> 5&lt;/span>Digest: sha256:5959291b202522ad454cab5ee9960d5a7bc2c59a88ddb00a5de01d36fb70ca9e
&lt;span class="ln"> 6&lt;/span>Status: Downloaded newer image &lt;span class="k">for&lt;/span> armhf/alpine:3.5
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>/ &lt;span class="c1"># echo &amp;#34;Hi, this is a tiny Linux distribution!&amp;#34; | base64 &lt;/span>
&lt;span class="ln"> 9&lt;/span>SGksIHRoaXMgaXMgYSB0aW55IExpbnV4IGRpc3RyaWJ1dGlvbiEK
&lt;span class="ln">10&lt;/span>/ &lt;span class="c1"># cat /etc/issue&lt;/span>
&lt;span class="ln">11&lt;/span>Welcome to Alpine Linux 3.5
&lt;span class="ln">12&lt;/span>Kernel &lt;span class="se">\r&lt;/span> on an &lt;span class="se">\m&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="se">\l&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>/ &lt;span class="c1"># exit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-repository">Docker官网&lt;/a>&lt;/p></description></item><item><title>树莓派连接Wifi配置</title><link>https://surprisedcat.github.io/projectnotes/raspberry-connect-wifi/</link><pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-connect-wifi/</guid><description>
&lt;h2 id="树莓派连接wifi配置---omit-in-toc---">树莓派连接Wifi配置&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="配置网口">配置网口&lt;/h2>
&lt;p>编辑 /etc/network/interfaces 文件，将wlan0配置成dhcp，指定配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>auto wlan0
&lt;span class="ln">2&lt;/span>iface wlan0 inet dhcp
&lt;span class="ln">3&lt;/span>wpa_conf /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改wpa_supplicantconf">修改wpa_supplicant.conf&lt;/h2>
&lt;p>打开/etc/wpa_supplicant/wpa_supplicant.conf文件，加入如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nv">network&lt;/span>&lt;span class="o">={&lt;/span>
&lt;span class="ln"> 2&lt;/span>    &lt;span class="nv">ssid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;wifi的ssid&amp;#34;&lt;/span>
&lt;span class="ln"> 3&lt;/span>    &lt;span class="nv">key_mgmt&lt;/span>&lt;span class="o">=&lt;/span>WPA-PSK
&lt;span class="ln"> 4&lt;/span>    &lt;span class="nv">psk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;wifi的密码&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">network&lt;/span>&lt;span class="o">={&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">ssid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;WiFi-name2&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">psk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;WiFi-password2&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，priority 是指连接优先级，数字越大优先级越高（不可以是负数）。&lt;/p>
&lt;h2 id="连接断开wifi">连接/断开wifi&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1">#连接wifi&lt;/span>
&lt;span class="ln">2&lt;/span>sudo ifup wlan0
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 断开wifi&lt;/span>
&lt;span class="ln">4&lt;/span>sudo ifdown wlan0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不好使的话，重启一下就可以了。&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>&lt;a href="http://www.52pi.net/archives/58">树莓派中文站&lt;/a>&lt;/p></description></item><item><title>linux-often-opeartion</title><link>https://surprisedcat.github.io/projectnotes/linux-often-opeartion/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-often-opeartion/</guid><description>
&lt;h2 id="linux-常用配置1--网络地址配置---omit-in-toc---">Linux 常用配置（1）--网络地址配置&lt;!-- omit in toc -->&lt;/h2>
&lt;p>在使用cmd操作linux系统时，常常需要配置网络，网络的配置一般在这几个地方。&lt;/p>
&lt;h2 id="etcnetworkinterfaces">/etc/network/interfaces&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>auto eth0
&lt;span class="ln"> 2&lt;/span>iface eth0 inet static
&lt;span class="ln"> 3&lt;/span> address 192.168.1.3
&lt;span class="ln"> 4&lt;/span> netmask 255.255.255.0
&lt;span class="ln"> 5&lt;/span> gateway 192.168.1.1
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># 子网信息，可选&lt;/span>
&lt;span class="ln"> 7&lt;/span> network 192.168.1.0
&lt;span class="ln"> 8&lt;/span> broadcast 192.168.1.255
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># 以下是添加路由的操作，可选&lt;/span>
&lt;span class="ln">10&lt;/span> up route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1
&lt;span class="ln">11&lt;/span> up route add default gw 192.168.1.1
&lt;span class="ln">12&lt;/span> down route del default gw 192.168.1.1
&lt;span class="ln">13&lt;/span> down route del -net 192.168.1.1 netmask 255.255.255.0 gw 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者配置自动获取ip地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>auto eth0
&lt;span class="ln">2&lt;/span>iface eth0 inet dhcp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完成之后，可以采用重启网络的方式获取新的IP。&lt;/p>
&lt;h2 id="network-manager">Network-Manager&lt;/h2>
&lt;p>Network-Manager是Debian提供的网络管理工具，方便用户使用GUI的时候配置网络。这个在GUI里面比较常见，就是下图这个配置，不在赘述。&lt;/p>
&lt;p>&lt;img src="../images/debian-network-manager.png" alt="Network-Manager 网络配置">&lt;/p>
&lt;h2 id="network-manager和interfaces文件的冲突">Network-Manager和interfaces文件的冲突&lt;/h2>
&lt;p>&lt;strong>本节援引自：&lt;a href="https://www.cnblogs.com/lcword/p/5917348.html">https://www.cnblogs.com/lcword/p/5917348.html&lt;/a> 作者：lclc&lt;/strong>&lt;/p>
&lt;p>network-manager和/etc/network/interfaces冲突
如果修改了interfaces ，又配置了network-manager（简称nm），你就会发现出现了一些莫名其妙的问题：&lt;/p>
&lt;ol>
&lt;li>interfaces 和 nm 中的网络设置不一样，系统实际的IP是哪个？&lt;/li>
&lt;li>有时候莫名其妙的，界面右上角的网络连接图标就丢失了。&lt;/li>
&lt;li>明明在nm中配置了正确的网络设置，为什么就上不了网呢？&lt;/li>
&lt;/ol>
&lt;p>其实，我们要知道 interfaces 和 nm 之间的关系，这些问题就不难解释了。&lt;/p>
&lt;p>network-manager和/etc/network/interfaces的关系&lt;/p>
&lt;ol>
&lt;li>当系统内无第三方网络管理工具（如 nm）时，系统默认使用 interfaces 文件内的参数进行网络配置。&lt;/li>
&lt;li>当系统内安装了 nm 之后，nm 默认接管了系统的网络配置，使用 nm 自己的网络配置参数来进行配置。&lt;/li>
&lt;li>但若用户在安装 nm 之后（Desktop版本默认安装了nm），自己又手动修改了 interfaces 文件，那 nm 就自动停止对系统网络的管理，系统改使用 interfaces 文件内的参数进行网络配置。此时，再去修改 nm 内的参数，不影响系统实际的网络配置。若要让 nm 内的配置生效，必须重新启用nm 接管系统的网络配置。&lt;/li>
&lt;/ol>
&lt;p>现在知道了两者之间的工作关系，再看上面的三个问题：&lt;/p>
&lt;ol>
&lt;li>要看nm是否接管，如果没有接管，系统实际的IP设置以 interfaces 中的为准。反之，以 nm 中的为准。&lt;/li>
&lt;li>当 nm 停止接管的时候，网络连接图标就丢失了。&lt;/li>
&lt;li>同样是接管的问题。如果用户希望在Desktop版本中，直接使用 interfaces 进行网络配置，那最好删除 network-manager 。&lt;/li>
&lt;/ol>
&lt;p>network-manager重新接管&lt;/p>
&lt;p>如果在出现上述问题之后，希望能继续使用 nm 来进行网络配置，则需要进行如下操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo service network-managerstop &lt;span class="c1">#停止 nm 服务&lt;/span>
&lt;span class="ln">2&lt;/span>sudo rm/var/lib/NetworkManager/NetworkManager.state &lt;span class="c1">#移除 nm 的状态文件&lt;/span>
&lt;span class="ln">3&lt;/span>sudo gedit /etc/NetworkManager/nm-system-settings.conf &lt;span class="c1">#打开 nm 的配置文件&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1">## 里面有一行：managed=true&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1">## 如果你手工改过 /etc/network/interfaces ，nm 会自己把这行改成：managed=false&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="c1">## 将 false 修改成 true&lt;/span>
&lt;span class="ln">7&lt;/span>sudo service network-manager start
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="直接修改网络">直接修改网络&lt;/h2>
&lt;p>除了修改配置文件和使用管理工具，Linux还提供了命令直接修改网络地址，这些修改都是&lt;strong>临时修改&lt;/strong>，一旦出现问题或重启地址会被放弃。&lt;/p>
&lt;h3 id="使用ifconfig命令">使用ifconfig命令&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1">#设置IP和掩码&lt;/span>
&lt;span class="ln">2&lt;/span>sudo ifconfig eth0 192.168.1.4 netmask 255.255.255.0
&lt;span class="ln">3&lt;/span>&lt;span class="c1">#设置网关&lt;/span>
&lt;span class="ln">4&lt;/span>sudo route add default gw 192.168.1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用ip命令">使用ip命令&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 增加一个ip 地址&lt;/span>
&lt;span class="ln">2&lt;/span>sudo ip add add 192.168.1.4/24 dev eth0:0
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># 删除一个ip地址&lt;/span>
&lt;span class="ln">4&lt;/span>sudo ip add del 192.168.1.4/24 dev eth0:0
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 添加一条路由&lt;/span>
&lt;span class="ln">6&lt;/span>sudo ip route add 192.168.1.0/24 via 192.168.1.1 dev eth0
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># 删除一条路由&lt;/span>
&lt;span class="ln">8&lt;/span>sudo ip route del 192.168.1.0/24
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Jekyll-default-settings</title><link>https://surprisedcat.github.io/projectnotes/jekyll-default-settings/</link><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/jekyll-default-settings/</guid><description>
&lt;h2 id="jekyll的默认配置---omit-in-toc---">Jekyll的默认配置&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="jekyll的默认配置规则">Jekyll的默认配置规则&lt;/h2>
&lt;p>为了加深对Jekyll指令的了解，从官网上查找了 _config.yml 文件的默认配置$^{[1]}$，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span># Where things are
&lt;span class="ln"> 2&lt;/span>source: .
&lt;span class="ln"> 3&lt;/span>destination: ./_site
&lt;span class="ln"> 4&lt;/span>plugins_dir: ./_plugins
&lt;span class="ln"> 5&lt;/span>layouts_dir: ./_layouts
&lt;span class="ln"> 6&lt;/span>data_dir: ./_data
&lt;span class="ln"> 7&lt;/span>includes_dir: ./_includes
&lt;span class="ln"> 8&lt;/span>collections: null
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span># Handling Reading
&lt;span class="ln">11&lt;/span>safe: false
&lt;span class="ln">12&lt;/span>include: [&amp;#34;.htaccess&amp;#34;]
&lt;span class="ln">13&lt;/span>exclude: []
&lt;span class="ln">14&lt;/span>keep_files: [&amp;#34;.git&amp;#34;, &amp;#34;.svn&amp;#34;]
&lt;span class="ln">15&lt;/span>encoding: &amp;#34;utf-8&amp;#34;
&lt;span class="ln">16&lt;/span>markdown_ext: &amp;#34;markdown,mkdown,mkdn,mkd,md&amp;#34;
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span># Filtering Content
&lt;span class="ln">19&lt;/span>show_drafts: null
&lt;span class="ln">20&lt;/span>limit_posts: 0
&lt;span class="ln">21&lt;/span>future: false
&lt;span class="ln">22&lt;/span>unpublished: false
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span># Plugins
&lt;span class="ln">25&lt;/span>whitelist: []
&lt;span class="ln">26&lt;/span>gems: []
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span># Conversion
&lt;span class="ln">29&lt;/span>markdown: kramdown
&lt;span class="ln">30&lt;/span>highlighter: rouge
&lt;span class="ln">31&lt;/span>lsi: false
&lt;span class="ln">32&lt;/span>excerpt_separator: &amp;#34;\n\n&amp;#34;
&lt;span class="ln">33&lt;/span>incremental: false
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span># Serving
&lt;span class="ln">36&lt;/span>detach: false
&lt;span class="ln">37&lt;/span>port: 4000
&lt;span class="ln">38&lt;/span>host: 127.0.0.1
&lt;span class="ln">39&lt;/span>baseurl: &amp;#34;&amp;#34; # does not include hostname
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span># Outputting
&lt;span class="ln">42&lt;/span>permalink: date
&lt;span class="ln">43&lt;/span>paginate_path: /page:num
&lt;span class="ln">44&lt;/span>timezone: null
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span>quiet: false
&lt;span class="ln">47&lt;/span>defaults: []
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span># Markdown Processors
&lt;span class="ln">50&lt;/span>rdiscount:
&lt;span class="ln">51&lt;/span> extensions: []
&lt;span class="ln">52&lt;/span>
&lt;span class="ln">53&lt;/span>redcarpet:
&lt;span class="ln">54&lt;/span> extensions: []
&lt;span class="ln">55&lt;/span>
&lt;span class="ln">56&lt;/span>kramdown:
&lt;span class="ln">57&lt;/span> auto_ids: true
&lt;span class="ln">58&lt;/span> footnote_nr: 1
&lt;span class="ln">59&lt;/span> entity_output: as_char
&lt;span class="ln">60&lt;/span> toc_levels: 1..6
&lt;span class="ln">61&lt;/span> smart_quotes: lsquo,rsquo,ldquo,rdquo
&lt;span class="ln">62&lt;/span> enable_coderay: false
&lt;span class="ln">63&lt;/span>
&lt;span class="ln">64&lt;/span> coderay:
&lt;span class="ln">65&lt;/span> coderay_wrap: div
&lt;span class="ln">66&lt;/span> coderay_line_numbers: inline
&lt;span class="ln">67&lt;/span> coderay_line_number_start: 1
&lt;span class="ln">68&lt;/span> coderay_tab_width: 4
&lt;span class="ln">69&lt;/span> coderay_bold_every: 10
&lt;span class="ln">70&lt;/span> coderay_css: style
&lt;span class="ln">71&lt;/span>
&lt;span class="ln">72&lt;/span> redcloth:
&lt;span class="ln">73&lt;/span> hard_breaks: true
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>[1] &lt;a href="http://jekyll.com.cn/docs/configuration/">http://jekyll.com.cn/docs/configuration/&lt;/a>&lt;/p></description></item><item><title>raspberry-question-and-answer</title><link>https://surprisedcat.github.io/projectnotes/raspberry-question-and-answer/</link><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-question-and-answer/</guid><description>
&lt;h2 id="树莓派常见问题解决有问题时常更新---omit-in-toc---">树莓派常见问题解决（有问题时常更新）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>本页面记录了使用树莓派的过程中遇到的一些问题和解决方案。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装好系统后没有显额外示器，新版本树莓派默认关闭ssh服务器，无法连接上树莓派。&lt;/p>
&lt;blockquote>
&lt;p>在SD卡的/boot中，添加一个名为“ssh”的空文件，注意不用使用windows自带的文本编辑器动它！&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>树莓派连接上显示器之后没有反应。&lt;/p>
&lt;blockquote>
&lt;p>修改sd卡/boot分区中的config.txt文件。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">hdmi_force_hotplug&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nv">config_hdmi_boost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">hdmi_group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nv">hdmi_mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">9&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nv">hdmi_drive&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nv">hdmi_ignore_edid&lt;/span>&lt;span class="o">=&lt;/span>0xa5000080
&lt;span class="ln">7&lt;/span>&lt;span class="nv">disable_overscan&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>解释：&lt;br>
hdmi_force_hotplug：强制使用HDMI输出（强行认为HDMI口已经插入了设备）&lt;br>
config_hdmi_boost：HDMI信号增强。&lt;br>
hdmi_group、hdmi_mode：决定分辨率。group=2, mode=9 代表800×600 @ 60Hz。（参考：&lt;a href="http://elinux.org/RPiconfig">http://elinux.org/RPiconfig&lt;/a>）&lt;br>
hdmi_drive：强制音频输出到HDMI口（注意，仅适用于带音频的HDMI-VGA转换器！！如果想让音频从模拟输出，则去掉此项！！）&lt;br>
hdmi_ignore_edid：强行按hdmi_group和hdmi_mode规定的分辨率输出。不检测显示器自身的分辨率。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>图形性能如何？&lt;/p>
&lt;blockquote>
&lt;p>GPU支持OpenGL ES 2.0、硬件加速的OpenVG，和高至1080p30fps的H.264硬件解码。
GPU的通常计算能力达到1Gpixel/s, 1.5Gtexel/s 或 24 GFLOPs，并且提供一系列材质渲染过滤与DMA功能。
相比较来看，树莓派的图形性能基本上与初代Xbox等同。树莓派的总体性能也许和300MHz的奔腾2接近，不过图形能力是远远超越那个时代的。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>键盘字符打不出来问题。&lt;/p>
&lt;blockquote>
&lt;p>树莓派默认是英国键盘，字符与美式键盘有些地方不一样，所以需要一些设置。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo raspi-config
&lt;span class="ln">2&lt;/span>choose 4. Localisation Options &amp;gt;&amp;gt; I3 Change keyboard Layout &amp;gt;&amp;gt; Gernic 101-Key PC &amp;gt;&amp;gt; Other &amp;gt;&amp;gt; English &lt;span class="o">(&lt;/span>US&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span>然后一路选择默认的配置就可以了
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Jekyll-architecture</title><link>https://surprisedcat.github.io/projectnotes/jekyll-architecture/</link><pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/jekyll-architecture/</guid><description>
&lt;h2 id="jekyll-结构分析---omit-in-toc---">Jekyll 结构分析&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="1-jekyll目录结构分析">1. Jekyll目录结构分析&lt;/h2>
&lt;p>Jekyll（发音/'dʒiːk əl/）是一个静态站点生成器，它会根据网页源码生成静态文件（纯HTML+CSS+JS）。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。Jekyll是基于Ruby语言开发的，因此安装Jekyll需要Ruby以及相关的组件，具体安装可以参考&lt;a href="http://jekyllcn.com/docs/installation/">Jekyll的中文网站安装指南&lt;/a>。使用Jekyll可以让我们尽量少的接触网站相关的知识的同时，搭建出漂亮的个人博客网站。本文采用自顶向下的方式来介绍Jekyll如何实现建站。&lt;/p>
&lt;p>Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是：你用你最喜欢的标记语言来写文章，可以是 Markdown, 也可以是 Textile, 或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置 URL 路径，你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。$^{[1]}$&lt;/p>
&lt;p>一个基本的 Jekyll 网站的目录结构一般是像这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>.
&lt;span class="ln"> 2&lt;/span>├── _config.yml
&lt;span class="ln"> 3&lt;/span>├── _drafts
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">|&lt;/span> ├── begin-with-the-crazy-ideas.textile
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">|&lt;/span> └── on-simplicity-in-technology.markdown
&lt;span class="ln"> 6&lt;/span>├── _includes
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">|&lt;/span> ├── footer.html
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">|&lt;/span> └── header.html
&lt;span class="ln"> 9&lt;/span>├── _layouts
&lt;span class="ln">10&lt;/span>&lt;span class="p">|&lt;/span> ├── default.html
&lt;span class="ln">11&lt;/span>&lt;span class="p">|&lt;/span> └── post.html
&lt;span class="ln">12&lt;/span>├── _posts
&lt;span class="ln">13&lt;/span>&lt;span class="p">|&lt;/span> ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
&lt;span class="ln">14&lt;/span>&lt;span class="p">|&lt;/span> └── 2009-04-26-barcamp-boston-4-roundup.textile
&lt;span class="ln">15&lt;/span>├── _page
&lt;span class="ln">16&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>—— category.html
&lt;span class="ln">17&lt;/span>&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>—— tags.html
&lt;span class="ln">18&lt;/span>&lt;span class="p">|&lt;/span> └── archive.html
&lt;span class="ln">19&lt;/span>├── js
&lt;span class="ln">20&lt;/span>&lt;span class="p">|&lt;/span> └── main.js
&lt;span class="ln">21&lt;/span>├── css
&lt;span class="ln">22&lt;/span>&lt;span class="p">|&lt;/span> └── main.css
&lt;span class="ln">23&lt;/span>├── _site
&lt;span class="ln">24&lt;/span>├── .jekyll-metadata
&lt;span class="ln">25&lt;/span>└── index.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更精确的说，目录是一个&lt;strong>迭代包括&lt;/strong>的结构,大体来说，可以分为这几个部分：(请保持足够的屏宽来看这个插图)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span> -------------- ----------------- ---------------
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">|&lt;/span> page YML &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> _posts YML &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> index.html &lt;span class="p">|&lt;/span> -- --------------
&lt;span class="ln"> 3&lt;/span> -------------- ----------------- --------------- &lt;span class="p">|&lt;/span>&amp;lt;--&lt;span class="p">|&lt;/span> _config.yml&lt;span class="p">|&lt;/span>
&lt;span class="ln"> 4&lt;/span> ^ ^ ^ &lt;span class="p">|&lt;/span> --------------
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">|&lt;/span>_____________________&lt;span class="p">|&lt;/span>______________________&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> --------------
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>&amp;lt;--&lt;span class="p">|&lt;/span> js css sass&lt;span class="p">|&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> --------------
&lt;span class="ln"> 8&lt;/span> ------------------ ---------------- &lt;span class="p">|&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">|&lt;/span> _layouts &lt;span class="p">|&lt;/span>&amp;lt;------&lt;span class="p">|&lt;/span> _includes &lt;span class="p">|&lt;/span>______________&lt;span class="p">|&lt;/span>
&lt;span class="ln">10&lt;/span> ------------------ ----------------
&lt;span class="ln">11&lt;/span> ^ YML &lt;span class="p">|&lt;/span> ^ &lt;span class="p">|&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">|&lt;/span>______&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>______&lt;span class="p">|&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，_includes文件中是常用代码快，可以被包含在模板（_layouts ）中，用来组成模板。includes之间也快成互相包括，模板之间也可互相包括。最后页面（ _posts,page,index.html）包含所需模板实现一个完整的页面。以&lt;a href="https://github.com/Gaohaoyang/gaohaoyang.github.io">Gaohaoyang&lt;/a>的index.html为例(个人非常喜欢他改进的这个Theme)。这里就是使用了default模板，所有的内容都被放在的default模板的{{content}}里面。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>index.html
&lt;span class="ln"> 2&lt;/span>---
&lt;span class="ln"> 3&lt;/span>layout: default
&lt;span class="ln"> 4&lt;/span>---
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;page clearfix&amp;#34;&lt;/span> &lt;span class="na">index&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;left&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Welcome to HyG&amp;#39;s Blog!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">small&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>这里记录着我的前端学习之路&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">small&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">hr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">12&lt;/span> ....................中间省略.........................
&lt;span class="ln">13&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;content-ul&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> --&amp;gt;
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c">&amp;lt;!-- &amp;lt;script src=&amp;#34;{{ &amp;#34;/js/scroll.min.js &amp;#34; | prepend: site.baseurl }}&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c">&amp;lt;!-- &amp;lt;script src=&amp;#34;{{ &amp;#34;/js/pageContent.js &amp;#34; | prepend: site.baseurl }}&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个是default.html模板。它包括了一些代码片段（ head.html、header.html、footer.html、backToTop.html ）这些都是在_includes文件夹中的内容，{{content}}表示如果有网页使用了这个模板，内容就会放在这个位置,比如上面index.html的内容就是替换了{{content}}的部分。这也解释了为什么index.html中没有常见的一些头信息。此外，这个模板还包含了一些公用的js文件（main.js、smooth-scroll.min.js）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>default.html
&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> {% include head.html %}
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> {% include header.html %}
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> {{ content }}
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> {% include footer.html %}
&lt;span class="ln">14&lt;/span> {% include backToTop.html %}
&lt;span class="ln">15&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ &amp;#34;&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">js&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">main&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">js&lt;/span> &lt;span class="err">&amp;#34;&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">prepend:&lt;/span> &lt;span class="na">site&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">baseurl&lt;/span> &lt;span class="err">}}&amp;#34;&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ &amp;#34;&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">js&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">smooth-scroll&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">js&lt;/span> &lt;span class="err">&amp;#34;&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">prepend:&lt;/span> &lt;span class="na">site&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">baseurl&lt;/span> &lt;span class="err">}}&amp;#34;&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/javascript&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">smoothScroll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">speed&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Integer. How fast to complete the scroll in milliseconds
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">easing&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;easeInOutCubic&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Easing pattern to use
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">offset&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Integer. How far to offset the scrolling anchor location in pixels
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c">&amp;lt;!-- &amp;lt;script src=&amp;#34;{{ &amp;#34; /js/scroll.min.js &amp;#34; | prepend: site.baseurl }}&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="11theme的包含结构">1.1Theme的包含结构&lt;/h3>
&lt;p>在这个Theme中，包含结构大致如下：&lt;/p>
&lt;ul>
&lt;li>index.html--&amp;gt;default.html(包含head.html(&lt;strong>网页的头信息&lt;/strong>)、header.html、footer.html、backToTop.html)&lt;/li>
&lt;li>0archives.html、1categoty.html、2tags.html (包含tag.html、category.html)--&amp;gt;default.html(包含head.html(&lt;strong>网页的头信息&lt;/strong>)、header.html、footer.html、backToTop.html)&lt;/li>
&lt;li>pages（ e.g.3collections.md、4about.md )--&amp;gt;page.html(包括pageContent.js)--&amp;gt;default.html(包含head.html(&lt;strong>网页的头信息&lt;/strong>)、header.html、footer.html、backToTop.html)&lt;/li>
&lt;li>_posts(文章)--&amp;gt;post.html（包含tag.html、category.html、previousAndNext.html）--&amp;gt;default.html&lt;/li>
&lt;li>_drafts(草稿)--&amp;gt;post.html（包含tag.html、category.html、previousAndNext.html）--&amp;gt;default.html&lt;/li>
&lt;/ul>
&lt;p>此外，还有一些js，css，sass文件。Jekyll的大体结构就是这样了。如果想了解每一个文件夹的具体内容可以参考Jekyll的中文文档:&lt;a href="http://jekyllcn.com/docs/home/">将纯文本转换为静态博客网站&lt;/a>。&lt;/p>
&lt;h2 id="2-参考文献">2. 参考文献&lt;/h2>
&lt;p>[1] &lt;a href="http://jekyllcn.com/docs/structure/">http://jekyllcn.com/docs/structure/&lt;/a>&lt;/p></description></item><item><title>linux-ssh-nat</title><link>https://surprisedcat.github.io/projectnotes/linux-ssh-nat/</link><pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-ssh-nat/</guid><description>
&lt;h2 id="使用ssh实现内网穿透---omit-in-toc---">使用ssh实现内网穿透&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="反向连接穿透防火墙访问内网机器">反向连接：穿透防火墙访问内网机器&lt;/h2>
&lt;p>很多单位的机器都身处内网。内网 IP 是下面的样子，用 ifconfig 便可搞清楚。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>10.0.0.0~10.255.255.255
&lt;span class="ln">2&lt;/span>172.16.0.0~172.31.255.255
&lt;span class="ln">3&lt;/span>192.168.0.0~192.168.255.255
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有关&lt;a href="http://baike.baidu.com/view/1233066.htm">内网 IP&lt;/a> 的内容可以参考百度百科。跟内网 IP 对立的就是公网 IP（即凡是不是内网 IP 的 IP），它如同独一无二的信箱，世界各地的人们都能往这个地址寄东西。内网 IP 如同大杂院里的住户，东西只能寄到传达室，而不能直接送达。&lt;/p>
&lt;p>内网机器可以访问公网机器，但是反之却不成立。譬如，公司里的机器 A 是内网机器，我们不能在公司外直接访问机器 A。但如果，在 A 和某台公网机器 C 之间建立一条加密隧道，便可以用任何一台机器 SSH 登录 A，就如同在 A 机器所处内网的防火墙上凿穿了一个洞。用下面的图来表达这个想法更直观一些。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln">2&lt;/span>A &amp;lt;-&lt;span class="p">|&lt;/span>-&amp;gt; C &amp;lt;--- B
&lt;span class="ln">3&lt;/span> &lt;span class="p">|&lt;/span>
&lt;span class="ln">4&lt;/span>内 防 公 任
&lt;span class="ln">5&lt;/span>网 火 网 何
&lt;span class="ln">6&lt;/span>机 墙 机 机
&lt;span class="ln">7&lt;/span>器 器 器
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="反向连接">反向连接&lt;/h2>
&lt;p>首先简单地介绍一下“反向连接”。在内网机器 A 上运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ ssh -f -N -R 10000:localhost:22 username@C机器的公网IP
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处，10000 和 22 皆是端口号。上面的命令是由机器 A 发起，主动将 A 的端口 22 与机器 C 的端口 10000 绑定（这不会给 C 带来危险，对 A 的“投怀送抱”，C 是不拒绝的），即将本地端口 22（sshd 缺省的开放端口）映射为远程机器 C 的端口 10000。C 可以通过命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sockstat -l
&lt;span class="ln">2&lt;/span>或者
&lt;span class="ln">3&lt;/span>netstat -an
&lt;/code>&lt;/pre>&lt;/div>&lt;p>监听到本地端口 10000 被绑定。这样，在 A 和 C 之间就建立了一条加密隧道，机器 C 通过命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ ssh username@localhost -p &lt;span class="m">10000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>穿透内网机器 A 的防火墙 SSH 登录 A。这便是“&lt;strong>反向连接&lt;/strong>”，它是穿透防火墙的常用方法。&lt;/p>
&lt;p>为什么需要 A 主动联系 C 呢？这是因为，A 对 C 来说是不可见的，如果不对 A 进行端口映射，C 压根找不到 A。如今，A 主动献身将自己的某端口与 C 的某端口“合体”，C 通过这个“合体”就能做到远程控制 A。机器 C 为了安全起见，可以把 username 设置为机器 C 上的没有 shell 权限的用户。&lt;/p>
&lt;h2 id="公钥验证">公钥验证&lt;/h2>
&lt;p>为了让 C 能验证 A 的身份，A 产生一把公钥（public key）送给 C，这样每次连接 C 都不再需要输入密码了。而且，这样的公钥验证比设普通密码要安全得多。顾名思义，公钥是可以公开的，你可以大胆地告诉全世界你的公钥，把你的公钥列入 authorized_keys 的人们就能够安全地确认并接纳那个举世无双独一无二的你。公钥不会泄漏你的个人密码以及私人信息。&lt;/p>
&lt;p>譬如，A 产生加密类型为 RSA、长度为 1024 比特的公钥的命令是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ ssh-keygen -t rsa -b &lt;span class="m">1024&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个命令将产生两个文件：公钥文件 id_rsa.pub 和私钥文件 id_rsa，将之存放在 $HOME/.ssh/ 里。然后，A 只要把公钥文件 id_rsa.pub 发给 C 就可以了。而 C 将之加入 &lt;code>$HOME/.ssh/authorized_keys&lt;/code>，即&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ cat id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ssh-登录">SSH 登录&lt;/h2>
&lt;p>现在，从任何一台机器 B 都可以 SSH 远程登录机器 A 了。只需要&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ ssh me@C机器的公网IP -p &lt;span class="m">10000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方法的缺点是不稳定，有时候从 A 到 C 的端口映射会断掉。我们不可能从家里跑到单位再敲一次命令，所以搞一个自动检查连接状态的脚本是必须的。定时地（譬如说每半个小时）检查 A ---&amp;gt; C 是否存在，如果不存在，马上再建立一个连接。&lt;/p>
&lt;p>将下面的脚本文件存为 $HOME/Reverse_SSH.sh，让它是可执行的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/usr/local/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nv">RET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>ps ax &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;ssh -fNR 10000:localhost:22&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep -v &lt;span class="s2">&amp;#34;grep&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RET&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The recent SSH failure occured at `date`&amp;#34;&lt;/span> &amp;gt; ~/reverse_ssh.log
&lt;span class="ln">6&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Restart reverse SSH!&amp;#34;&lt;/span>
&lt;span class="ln">7&lt;/span> ssh -fNR 10000:localhost:22 username@C机器的公网IP
&lt;span class="ln">8&lt;/span> &lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>利用 crontab 让机器每隔 30 分钟就检查一次这个映射是否存在，若不存在，马上再次建立映射。具体过程是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ crontab -e
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将下面的命令加入 crontab&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>*/30 * * * * &lt;span class="nv">$HOME&lt;/span>/Reverse_SSH.sh
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>cplus-fork-function-learning</title><link>https://surprisedcat.github.io/projectnotes/cplus-fork-function-learning/</link><pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/cplus-fork-function-learning/</guid><description>
&lt;h2 id="fork函数理解---omit-in-toc---">Fork函数理解&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="fork入门知识">fork入门知识&lt;/h2>
&lt;p>一个进程，包括代码、数据和分配给进程的资源。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，
也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。&lt;/p>
&lt;p>一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cm"> * fork_test.c
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cm"> * version 1
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="p">()&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">fpid&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//fpid表示fork函数返回的值
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">fpid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fpid&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error in fork!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fpid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i am the child process, my process id is %d/n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是爹的儿子/n&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//对某些人来说中文看着更直白。
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i am the parent process, my process id is %d/n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是孩子他爹/n&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;统计结果是: %d/n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;br>
i am the parent process, my process id is 31900&lt;br>
我是孩子他爹&lt;br>
统计结果是: 1&lt;br>
i am the child process, my process id is 31901&lt;br>
我是爹的儿子&lt;br>
统计结果是: 1&lt;/p>
&lt;p>在语句fpid=fork()之前，只有一个进程在执行这段代码，但在这条语句之后，就变成两个进程在执行了，这两个进程的几乎完全相同，&lt;/p>
&lt;p>将要执行的下一条语句都是if(fpid&amp;lt;0)……
为什么两个进程的fpid不同呢，这与fork函数的特性有关。&lt;/p>
&lt;p>&lt;strong>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>在父进程中，fork返回新创建子进程的进程ID；&lt;/li>
&lt;li>在子进程中，fork返回0；&lt;/li>
&lt;li>如果出现错误，fork返回一个负值；&lt;/li>
&lt;/ol>
&lt;p>在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。&lt;/p>
&lt;p>引用一位网友的话来解释fpid的值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id,&lt;/p>
&lt;p>因为子进程没有子进程，所以其fpid为0.&lt;/p>
&lt;p>&lt;strong>fork出错可能有两种原因：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。&lt;/li>
&lt;li>系统内存不足，这时errno的值被设置为ENOMEM。&lt;/li>
&lt;/ol>
&lt;p>创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。&lt;/p>
&lt;p>&lt;strong>fork执行完毕后，出现两个进程&lt;/strong>。&lt;/p></description></item><item><title>linux-print-n</title><link>https://surprisedcat.github.io/projectnotes/linux-print-n/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-print-n/</guid><description>
&lt;h2 id="转载-linux下printf中n的重要作用---omit-in-toc---">转载： linux下printf中\n的重要作用&lt;!-- omit in toc -->&lt;/h2>
&lt;p>原文链接：&lt;a href="http://blog.sina.com.cn/s/blog_563f0ca801000bfe.html">http://blog.sina.com.cn/s/blog_563f0ca801000bfe.html&lt;/a>
作者：George&lt;/p>
&lt;h2 id="linux下printf中n的重要作用">linux下printf中\n的重要作用&lt;/h2>
&lt;p>今天遇到一个很有趣的问题:
我用的是linux 2.6.11
程序大概是这样的(参数不详写了):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">listen&lt;/span>&lt;span class="p">(...);&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">accept&lt;/span>&lt;span class="p">(...);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序死活打不出&amp;quot;abc&amp;quot;来.用gdb查看,程序又确实是运行到了accept这里。&lt;/p>
&lt;p>有大虾告诉我:在abc末尾加\n试试。&lt;/p>
&lt;p>加了以后,abc就打出来了。&lt;/p>
&lt;p>后来又试了类似的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">recvfrom&lt;/span>&lt;span class="p">(...);&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="c1">//程序一样打不出abc来,
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">recvfrom&lt;/span>&lt;span class="p">(...);&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="c1">//abc就打出来了.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>大虾说linux下printf是以&amp;quot;行&amp;quot;来做缓冲区来刷新stdout的,如果遇到\n会强制立即刷新。否则刷新可能会延迟。因为printf中没有包含\n,内核决定满一行再刷新,而此时程序由于调用accept或recvfrom这类会block的api函数,造成屏幕一直显示不出来,除非收到了tcp连接请求或数据包,系统才会重新决定是否刷新屏幕。&lt;/p>
&lt;p>看来小小的\n还是蛮重要的。此问题可以在&amp;lt;&amp;lt;UNIX网络编程 第2版 第2卷进程间通信&amp;gt;&amp;gt;里找到一些相关知识。多了解了解文件I/O还是很有必要的。&lt;/p></description></item><item><title>raspberry-network-ssh</title><link>https://surprisedcat.github.io/projectnotes/raspberry-network-ssh/</link><pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-network-ssh/</guid><description>
&lt;h2 id="树莓派首次开机一根网线的控制ssh与配置文件---omit-in-toc---">树莓派首次开机一根网线的控制（ssh与配置文件）&lt;!-- omit in toc -->&lt;/h2>
&lt;p>最近的设备比较多，搞了一个KVM切换器，让多个主机共享一套显示器和键鼠。但是明显树莓派这个东东不太需要单独给他再加个外设，树莓派上的程序基本不会用的GUI，都是shell能搞定的东西，所以ssh就能搞定树莓派上所有的问题。&lt;/p>
&lt;h2 id="开启ssh">开启ssh&lt;/h2>
&lt;p>Raspberry Pi 3自带openssh服务器，可以直接通过ssh连接操作树莓派，但是第一次开机的时候，ssh并未自动开启（之前的版本可以，3代不可以）。官网的解决方案很简单，在树莓派存储介质（SD卡或者U盘）上加一个名为&lt;code>ssh&lt;/code>的空文件，就开启了ssh服务。&lt;/p>
&lt;blockquote>
&lt;p>注意：千万不要用windows的记事本新建这个文件！&lt;/p>
&lt;/blockquote>
&lt;h2 id="获取raspberry的ip">获取Raspberry的IP&lt;/h2>
&lt;p>当ssh服务开启之后，我们还需要树莓派的IP才能登陆树莓派。&lt;/p>
&lt;p>如果你的树莓派插在一个路由器或者交换机上，网络中自然会有DHCP服务器在树莓派分配IP，这是可以借助nmap、ipscan22.exe等扫描工具搜寻Raspberry的地址。树莓派的MAC地址为b8-27-eb-XX-XX-XX，有些能显示网络名称的工具直接会显示Raspberry Pi。&lt;/p>
&lt;p>如果可以登陆路由器，那么树莓派的信息就会显示在路由器管理界面的设备管理页面。&lt;/p>
&lt;p>如果树莓派直接连接电脑上，可以通过在电脑上安装一个DHCP服务器来给树莓派分配IP，例如isc-dhcp-server。&lt;/p>
&lt;p>如果这些都觉得太复杂，可以采取修改cmdline.txt的方法。打开U盘中的cmdline.txt文件，在结尾加入语句ip=&lt;em>&lt;strong>.&lt;/strong>&lt;/em>.&lt;em>&lt;strong>.&lt;/strong>&lt;/em>（IP地址）。然后在把自己的网段配成和cmdline.txt里一样的网段，就可以连接树莓派了。树莓派的默认账户密码：pi -- raspberry&lt;/p>
&lt;h2 id="configtxt">config.txt&lt;/h2>
&lt;p>由于树莓派并没有传统意义上的BIOS, 所以现在各种系统配置参数通常被存在&amp;quot;config.txt&amp;quot;这个文本文件中。树莓派的config.txt文件会在ARM内核初始化之前被&lt;strong>GPU&lt;/strong>读取。这个文件存在引导分区上的。对于Linux, 路径通常是/boot/config.txt, 如果是Windows (或者OS X) 它会被识别为SD卡中可访问部分的一个普通文件。&lt;/p>
&lt;p>你可以使用下列命令去获取当前激活的设置:&lt;/p>
&lt;ul>
&lt;li>列出指定的配置参数.&lt;/li>
&lt;li>例如: vcgencmd get_config arm_freq
&lt;ul>
&lt;li>vcgencmd get_config&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出所有已设置的整形配置参数(非零)
&lt;ul>
&lt;li>vcgencmd get_config int&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>列出所有已设置的字符型配置参数(非零)
&lt;ul>
&lt;li>vcgencmd get_config str&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>文件格式:&lt;/p>
&lt;p>当值是整形时格式为”属性=值”。 每行只指定一个参数。 注释使用’#’井号作为一行开头。
注意: 在新版的树莓派里每行都有#注释, 要想使用该行参数只需移除#。&lt;/p>
&lt;p>具体的文件配置强烈推荐一下两篇文章：&lt;/p>
&lt;p>&lt;a href="https://elinux.org/RPiconfig">https://elinux.org/RPiconfig&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://elinux.org/R-Pi_configuration_file">https://elinux.org/R-Pi_configuration_file&lt;/a>&lt;/p>
&lt;h2 id="更新piroot的密码">更新pi、root的密码&lt;/h2>
&lt;h2 id="更新软件源">更新软件源&lt;/h2>
&lt;h2 id="参看文献">参看文献&lt;/h2></description></item><item><title>raspberry-os-install</title><link>https://surprisedcat.github.io/projectnotes/raspberry-os-install/</link><pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-os-install/</guid><description>
&lt;h2 id="树莓派系统安装与u盘启动---omit-in-toc---">树莓派系统安装与U盘启动&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="系统推荐">系统推荐&lt;/h2>
&lt;p>Raspbian是默认的最常用于Raspberry Pi的免费操作系统。Raspbian是基于Debian的一个版本（针对Raspberry Pi硬件Debian进行了专门的优化，并构建了超过35000个Raspbian包）。Debian的软件策略偏保守，稳定第一，升级是次要的。&lt;/p>
&lt;p>Raspbian也是树莓派官方支持的操作系统。这个系统镜像可以分为带GUI和不带GUI两种：&lt;/p>
&lt;blockquote>
&lt;p>Raspbain Stretch With PIXEL 树莓派官方系统，带PIXEL图形界面。特点是兼容性和性能优秀。&lt;/p>
&lt;p>Raspbain Stretch Lite 树莓派官方系统，不带图形界面。特点是兼容性和性能优秀，比PIXEL版本的安装包更小。&lt;/p>
&lt;/blockquote>
&lt;p>Raspbian仍处于积极开发状态，并把重点放在提升尽可能多Debian包的稳定性和性能。对于初学编程的人来说这是一个很好的起点，Raspbian自带的x windows，因此可以使用它类似WIN风格的GUI界面，Raspbian还包括一个“Pi商店”，你可以免费或付费下载一些应用，比如Libre Office、Free Civ（游戏）等等。&lt;/p>
&lt;p>树莓派在一般情况下可以采用Raspian系统。其他可用操作系统可以参考一下网址：
&lt;a href="http://wiki.nxez.com/rpi:list-of-oses">http://wiki.nxez.com/rpi:list-of-oses&lt;/a>&lt;/p>
&lt;h2 id="必备软件">必备软件&lt;/h2>
&lt;ul>
&lt;li>镜像烧录工具（有一个即可）
&lt;ul>
&lt;li>Win32DiskImager(仅windows)&lt;/li>
&lt;li>Etcher（跨平台）&lt;/li>
&lt;li>USB Image Tool&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="系统安装">系统安装&lt;/h2>
&lt;p>我们首先需要准备一张SD卡，由于我之后打算使用U盘启动，所以SD卡不用准备的太大，能写入镜像就可以了。本文章使用的镜像是2017-09-07-raspbian-stretch-lite.img，一共不到2G，所以我只选用了一个4G的SD卡。如果使用的桌面版的Raspian，最好选用8GB和更大的SD卡。&lt;/p>
&lt;p>然后，我们使用Etcher将镜像文件写入。这个过程很简单，可以参考：官方指南：&lt;a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">https://www.raspberrypi.org/documentation/installation/installing-images/README.md&lt;/a>&lt;/p>
&lt;h2 id="使用u盘启动beta">使用U盘启动（BETA）&lt;/h2>
&lt;p>目前我们手中的U盘应该比SD更多，所以我非常希望使用U盘取代SD卡来启动，Raspian的国外大神真有做到这点的。&lt;/p>
&lt;p>国外的大神发现，博通芯片2835/6/7内部其实有一个小的boot ROM。这个小boot ROM从SD卡中读取一个叫bootcode.bin的文件，然后在执行它，接下来就可以从SD卡中载入剩余的系统，比如固件和ARM内核。但是，其实BCM芯片是可以支持从U盘启动的，只不过默认不开启。所以我们需要先做一个系统进入树莓派，通过OTP开启USB boot功能。&lt;/p>
&lt;p>当我们从SD卡启动树莓派后，首先执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ sudo apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt-get upgrade
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果安装的镜像是2017-04-10以后的Raspbian 则不用&lt;code>sudo apt-get upgrade&lt;/code>。&lt;/p>
&lt;p>找到&lt;code>/boot&lt;/code>文件夹，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">program_usb_boot_mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> sudo tee -a /boot/config.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样将usb boot模式开启。接着&lt;code>sudo reboot&lt;/code>重启树莓派，开机后执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>me~$ vcgencmd otp_dump &lt;span class="p">|&lt;/span> grep 17:
&lt;span class="ln">2&lt;/span>17:3020000a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你输出的是&lt;code>0x3020000a&lt;/code>那说明可以使用USB启动了。&lt;strong>注意config.txt文件结尾不要空格。&lt;/strong>
接下来，要将2017-04-10日期之后 Raspbian镜像烧录到U盘中，和烧录的SD卡中的步骤一样。再把U盘插入树莓派，拔掉SD卡就可以执行中U盘启动了。自己&lt;strong>感觉&lt;/strong>（未测试）从U盘启动的树莓派要比从SD卡慢一些。&lt;/p>
&lt;p>几点注意：&lt;/p>
&lt;ul>
&lt;li>仅树莓派3支持使用U盘启动&lt;/li>
&lt;li>文件系统格式最好为FAT32&lt;/li>
&lt;li>并不是所有的U盘都作为启动盘，明确可用的U盘有：
&lt;ul>
&lt;li>Sandisk Force 8GB（本人使用，亲测可用）&lt;/li>
&lt;li>Sandisk Cruzer Fit 16GB&lt;/li>
&lt;li>Sandisk Cruzer Blade 16Gb&lt;/li>
&lt;li>Samsung 32GB USB 3.0 drive&lt;/li>
&lt;li>MeCo 16GB USB 3.0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="u盘复原">U盘复原&lt;/h2>
&lt;p>被当成树莓派系统盘的U盘通常会被划分成&lt;code>/boot&lt;/code>和实际存储区，我们在电脑上插入U盘的时候，这回显示&lt;code>/boot&lt;/code>分区，不能显示完整的U盘空间。如果不在需要这个系统U盘，就需要还原U盘大小。&lt;/p>
&lt;ol>
&lt;li>打开cmd 输入diskpart&lt;/li>
&lt;li>非常重要：右键我的电脑--&amp;gt;管理--&amp;gt;磁盘管理。查看磁盘信息，一般情况下U盘会显示成磁盘1。&lt;/li>
&lt;li>在diskpart的cmd中输入 select disk 1 (非常重要，这个磁盘一定要是U盘的磁盘)。&lt;/li>
&lt;li>输入clean删除其他分区。（如果之前磁盘选错，会删除电脑中其他分区！！！）&lt;/li>
&lt;li>创建新的分区: create partition primary。&lt;/li>
&lt;li>激活分区: active。&lt;/li>
&lt;li>U盘已经恢复原来大小，选择合适的格式将他格式化，就可以重新当U盘使用了。&lt;/li>
&lt;li>找到我的电脑中的U盘盘符，格式化即可。&lt;/li>
&lt;/ol>
&lt;h2 id="疑问">疑问&lt;/h2>
&lt;p>如果我直接把镜像写到U盘里，然后修改config.txt是否就不需要用SD卡现状个系统了？？&lt;/p>
&lt;blockquote>
&lt;p>显然不可能。树莓派默认直接中SD卡启动，如果上来就插U盘的系统，树莓派的usb boot根本没Enable。&lt;/p>
&lt;/blockquote></description></item><item><title>raspberry-general</title><link>https://surprisedcat.github.io/projectnotes/raspberry-general/</link><pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/raspberry-general/</guid><description>
&lt;h2 id="新玩具--树莓派3b---omit-in-toc---">新玩具--树莓派3B+&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="树莓派raspberry-pi">树莓派Raspberry Pi&lt;/h2>
&lt;p>Raspberry Pi(中文名为“树莓派”,简写为 RPi，或者 RasPi/RPi)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于 Linux。&lt;/p>
&lt;p>树莓派由注册于英国的慈善组织“Raspberry Pi 基金会”开发，Eben·Upton /埃·厄普顿为项目带头人。2012 年 3 月，英国剑桥大学埃本·阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi 电脑板，中文译名&amp;quot;树莓派&amp;quot;！这一基金会以提升学校计算机科学及相关学科的教育，让计算机变得有趣为宗旨。基金会期望这 一款电脑无论是在发展中国家还是在发达国家，会有更多的其它应用不断被开发出来，并应用到更多领域。$^{[1]}$&lt;/p>
&lt;h3 id="raspberry-pi-3-model-b">Raspberry Pi 3 Model B&lt;/h3>
&lt;p>树莓派3B于2016年2月29日发布，从外观上来看，Raspberry Pi 3B和2B没有太大的区别，同样是85.6 x 56.5 mm x 17mm（重量45g略有增加）。然而在内在配置上提升很可观的，具体配置包括：$^{[2]}$&lt;/p>
&lt;ul>
&lt;li>Broadcom BCM2837 SoC, with quad-core ARM Cortex-A53 1200 MHz processor&lt;/li>
&lt;li>博通 BCM2847 芯片，集成了ARM Cortex-A53四核处理器，1200MHz主频。&lt;/li>
&lt;li>VideoCore IV dual-core 400 MHz GPU&lt;/li>
&lt;li>VideoCore IV双核400MHz GPU&lt;/li>
&lt;li>1 GB SDRAM - shared by the GPU and CPU&lt;/li>
&lt;li>1GB SDRAM -由GPU和CPU共享&lt;/li>
&lt;li>MicroSD card slot for boot and storage&lt;/li>
&lt;li>启动和存储的MicroSD card卡槽&lt;/li>
&lt;li>4 x USB 2.0 ports (via on-board 5 port hub)&lt;/li>
&lt;li>4个USB2.0端口&lt;/li>
&lt;li>RJ45 10/100 MBit/s Ethernet port&lt;/li>
&lt;li>RJ45 10/100 MBit/s 以太网口&lt;/li>
&lt;li>HDMI and Composite video, audio through TRRS jack&lt;/li>
&lt;li>HDMI和音频TRRS复合段端子&lt;/li>
&lt;li>40 pin GPIO Interface connector&lt;/li>
&lt;li>40引脚的GPIO连接柱&lt;/li>
&lt;li>CSI (camera) and DSI (display) connectors&lt;/li>
&lt;li>CSI 和 DSI 接口&lt;/li>
&lt;li>4 squarely positioned mounting holes&lt;/li>
&lt;li>4个角的固定孔&lt;/li>
&lt;/ul>
&lt;p>此外，Raspberry Pi 3B还集成了802.11n和Bluetooth4.1无线功能，这算是功能上最新颖的扩展了。&lt;/p>
&lt;h2 id="型号与版本对照">型号与版本对照&lt;/h2>
&lt;p>&lt;img src="../images/raspberrypi-version-compare.png" alt="树莓派型号对比图">$^{[3]}$&lt;/p>
&lt;h2 id="raspberry-pi-3b-电气参数">Raspberry Pi 3B 电气参数&lt;/h2>
&lt;h3 id="电源供电能力">电源供电能力&lt;/h3>
&lt;p>The board takes fixed 5V input, (with the 1.2 V core voltage generated directly from the input using the internal switch-mode supply on the BCM2835 die). This permits adoption of the micro USB form factor, which, in turn, prevents the user from inadvertently plugging in out-of-range power inputs; that would be dangerous, since the 5 V would go straight to HDMI and output USB ports, even though the problem should be mitigated by some protections applied to the input power: The board provides a polarity protection diode, a voltage clamp, and a self-resetting semiconductor fuse.&lt;/p>
&lt;p>Premier Farnell recommend the following power supplies:&lt;/p>
&lt;p>Model A: 5 V DC, 500-700 mA
Model B: 5 V DC, 700-1500 mA&lt;/p>
&lt;p>Power consumption of the Raspberry Pi device is&lt;/p>
&lt;p>Board A: 5 V, 500 mA (2.5 W) without any devices connected (e.g. USB, Ethernet, HDMI)
Board B: 5 V, 700 mA (3.5 W) without any devices connected (e.g. USB, Ethernet, HDMI) (Is this correct? The 700 mA is only required if &amp;quot;using networking and high-current USB peripherals&amp;quot;.)
You will need to provide a power supply that can provide enough current to power the device plus any connected peripherals, and taking into account inefficiencies of the supply itself and the cable between the power supply and Raspberry Pi. The community advises opting for a power supply that can supply &lt;strong>at least 1 A&lt;/strong> if using USB peripherals or Pi plates that draw more than a few tens of milliamperes of current.&lt;/p>
&lt;p>As the 5 V rail is brought out in the GPIO pins, you can power the Raspberry Pi from there too. You should mind however, that those are behind the power protection circuitry, so you should provide your own.&lt;/p>
&lt;p>It is possible to power the Raspberry Pi from a powered USB hub the Raspberry Pi controls, but only on 'dumb' devices, that allow the port to supply the full current without waiting for the USB device to ask for it. As the power input of the Raspberry Pi doesn't have its data leads connected, there is no chance for a communication loop of some sorts.&lt;/p>
&lt;p>POE (power over Ethernet) is currently &lt;strong>not available&lt;/strong> for the Raspberry Pi (but nobody stops you from taking your soldering iron and doing it yourself - mind though that the Ethernet jack on the board is a 'magjack' - &lt;a href="http://www.sparkfun.com/datasheets/Prototyping/MagJack.pdf">http://www.sparkfun.com/datasheets/Prototyping/MagJack.pdf&lt;/a> - which means that the usual 'dumb or passive PoE' power pins 47 and 78 are &lt;strong>not&lt;/strong> wired through to the board. So this is not an entirely trivial exercise).&lt;/p>
&lt;p>Back-Powering; (powering the Raspberry Pi from a USB hub through the uplink/data port, single cable) Back powering is possible on the Raspberry Pi, but not advisable. Revision 1.0 boards have to be modified to back power, this is due to the 140 mA &amp;quot;polyfuses&amp;quot; that are installed in the USB port circuit. Revision 1.1 boards do not need modifications to back-power, they have replaced the polyfuses with 0 ohm resistors in their place. Revision 2.0 boards do not need modification, they have neither resistors nor polyfuses. It is advised that short (12&amp;quot; (.3 meter) or less) USB cables be used for back-powering a Raspberry Pi. Cable resistance plus connector resistance can quickly reduce operating voltages below the proper range (5.25 V to 4.75 V). But do note that if you do not power the Raspberry Pi in the &amp;quot;official manner&amp;quot;, that is through its micro-USB port, but use any alternative way (such as through the GPIO header, the test points TP1 and TP2), but also by back-powering it, you are actually bypassing the Raspberry Pi's input polyfuse protection device! This can have extreme consequences if ever you manage to put more than 6 V on the Raspberry Pi, even for a very short period. As this causes the overvoltage device D17 on the Raspberry Pi to trigger and short the 5 V supply! Without the polyfuse limiting the current through D17, it will burn out, probably melting the Raspberry Pi's enclosure with it, (if you have any) and possibly causing a fire-hazard. It will probably also create a permanent short of the 5 V supply! So be warned, and if you use back power make sure your hub or its PSU has a fuse to prevent this from happening. If not, add your own fuse.&lt;/p>
&lt;h3 id="power-supply-problems">Power supply problems&lt;/h3>
&lt;p>There have been a number of problems reported that seem to be caused by inadequate power, this is an attempt to explain what is needed and the consequences of not having enough power.&lt;/p>
&lt;p>The power required by the Pi will vary depending on how busy it is and what peripherals are connected.&lt;/p>
&lt;ul>
&lt;li>Running a GUI will take more power.&lt;/li>
&lt;li>The USB devices and Ethernet connection will take power.&lt;/li>
&lt;li>Running the GPU will take extra power.&lt;/li>
&lt;/ul>
&lt;p>This means that it's difficult to say exactly how much power is needed. People have reported current requirements of between 300 mA and 550 mA. But it could in reality take more, especially for short periods. A simple multimeter will not show short surges on the power requirement. A surge in the power requirement for a few milliseconds will not be detectable by a meter but will be enough to cause problems. If the board does not get enough power the voltage will drop. If it drops enough parts of the system will run unreliably because data can get corrupted. The &lt;strong>USB IC&lt;/strong> runs on 5 V and handles the USB and Ethernet ports so it's likely that this will be the first thing to fail. Problems seen are unreliable Ethernet connection and unreliable operation of the Keyboard and/or mouse.&lt;/p>
&lt;p>Each of the two USB ports on the Pi has a polyfuse rated at 140 mA, so any connected USB devices should draw less than this amount of current. In addition the polyfuse will cause a significant voltage drop, so that USB devices get less voltage than is available on the Raspberry Pi itself, sometimes up to half a volt less (maybe more if the fuse has recently been hot). For regular &amp;quot;low power&amp;quot; USB devices this doesn't cause a problem as they are designed to work with voltages as low as 4.4 volt. This isn't the case however with some USB devices such as Wi-Fi dongles which may need 4.75 volt, and are also known to draw more than 150 mA when configured and active. Because of the problems these polyfuses caused Raspberry Pi's produced after August 25, 2012 have the USB polyfuses F1 &amp;amp; F2 removed (replaced with shorts).&lt;/p>
&lt;p>The microUSB input port also has a 1.1 A polyfuse (700 mA &amp;quot;hold current&amp;quot;) which may also have enough resistance (although much smaller than the 140 mA fuses) to cause a significant voltage drop on the board, even below its 1.1 A total current.&lt;/p>
&lt;p>A extended explanation of the consequences of the use of these polyfuses can be found here Polyfuses explained&lt;/p>
&lt;p>There are several reasons why the power to the board may be inadequate:&lt;/p>
&lt;p>The PSU may not deliver enough power. Although the maximum power requirement is said to be 700 mA, that is with no peripherals connected (USB, Ethernet etc), so a 1000 mA PSU should be regarded as a minimum. This allows some leeway in case the power supply cannot deliver its full power without the voltage dropping.&lt;/p>
&lt;p>The PSU is not regulated.&lt;/p>
&lt;p>The cable connecting the PSU to the Pi may not be good. People have reported cables with 4 ohms resistance on the power connections. At 500 mA drain this would reduce a 5 V supply to 3 V.&lt;/p>
&lt;p>If the PSU is unregulated it can also output too high a voltage, which may trigger the overvoltage device in the Raspberry Pi, which will temporarily short the 5 V to ground, this will then &amp;quot;blow&amp;quot; polyfuse F3, which will take several days to recover from. Meanwhile (possibly with another PSU) the Raspberry Pi might not get enough power because the (partly) blown polyfuse is consuming some of the power. The solution is when this happens to ways a few days to give the polyfuse time to recover before attempting to use the better PSU. If you suspect a blow polyfuse, measure the voltage across F3, which should be less than 0.05 volt.
How can I tell if the power supply is inadequate?&lt;/p>
&lt;h3 id="common-symptoms-of-an-inadequate-power-supply">Common symptoms of an inadequate power supply&lt;/h3>
&lt;ul>
&lt;li>Unreliable Ethernet or keyboard operation, especially if it's OK at first but not when the GUI is started.&lt;/li>
&lt;li>SD card errors at start up seems to be another symptom of poor power.&lt;/li>
&lt;/ul>
&lt;p>If you think you have a problem with your power supply, it is a good idea to check the actual voltage on the Raspberry Pi circuit board. Two test points labelled TP1 and TP2 are provided on the circuit board to facilitate voltage measurements.&lt;/p>
&lt;p>Use a multimeter which is set to the range 20 volts DC (or 20 V =). You should see a voltage between 4.75 and 5.25 volts. Anything outside this range indicates that you have a problem with your power supply or your power cable, or the input polyfuse F3. Anything inside, but close to the limits, of this range may indicate a problem.&lt;/p>
&lt;h3 id="gpio口电气信息">GPIO口电气信息&lt;/h3>
&lt;p>In addition to the familiar USB, Ethernet and HDMI ports, the Raspberry Pi offers the ability to connect directly to a variety of electronic devices. These include:&lt;/p>
&lt;blockquote>
&lt;p>Digital outputs: turn lights, motors, or other devices on or off
Digital inputs: read an on or off state from a button, switch, or other sensor
Communication with chips or modules using low-level protocols: SPI, I²C, or serial UART
Connections are made using GPIO (&amp;quot;General Purpose Input/Output&amp;quot;) pins. Unlike USB, etc., these interfaces are &lt;strong>not &amp;quot;plug and play&amp;quot;&lt;/strong> and require care to avoid miswiring. The Raspberry PI GPIOs use &lt;strong>3.3V&lt;/strong> logic levels, and can be damaged if connected directly to 5V levels (as found in many older digital systems) without level-conversion circuitry.&lt;/p>
&lt;/blockquote>
&lt;p>Note that &lt;strong>no analogue input or output is available&lt;/strong>. However, add-on boards such as the Rpi Gertboard provide this capability.$^{[4]}$&lt;/p>
&lt;h2 id="40pin引脚对照表">40pin引脚对照表&lt;/h2>
&lt;p>&lt;img src="../images/300px-B_plus_hdr_sm.jpg" alt="B+图">$^{[5]}$
&lt;img src="../images/300px-Pi-GPIO-header.png" alt="40pin引脚">$^{[5]}$&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>[1]&lt;a href="http://wiki.jikexueyuan.com/project/raspberry-pi/overview.html">http://wiki.jikexueyuan.com/project/raspberry-pi/overview.html&lt;/a>&lt;/p>
&lt;p>[2]&lt;a href="https://elinux.org/RPi_Hardware">https://elinux.org/RPi_Hardware&lt;/a>&lt;/p>
&lt;p>[3]&lt;a href="http://shumeipai.nxez.com/raspberry-pi-version-compare">http://shumeipai.nxez.com/raspberry-pi-version-compare&lt;/a>&lt;/p>
&lt;p>[4]&lt;a href="https://elinux.org/RPi_Hardware">https://elinux.org/RPi_Hardware&lt;/a>&lt;/p>
&lt;p>[5]&lt;a href="https://elinux.org/RPi_Low-level_peripherals">https://elinux.org/RPi_Low-level_peripherals&lt;/a>&lt;/p></description></item><item><title>linux-svn-server</title><link>https://surprisedcat.github.io/projectnotes/linux-svn-server/</link><pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-svn-server/</guid><description>
&lt;h2 id="linux上svn服务器搭建---omit-in-toc---">Linux上SVN服务器搭建&lt;!-- omit in toc -->&lt;/h2>
&lt;p>一般我们使用git进行代码的版本管理，但是git自身只能识别文本文件。我们常用的office系列是文本与二进制的组合，git diff等操作无法正常使用。况且office软件自带diff的功能，我仅仅想做一个版本管理与云同步，在不想用SharePoint的倾向下，我选择在云主机上搭建一个基于Debian Linux的SVN服务器。&lt;/p>
&lt;h2 id="linux下的svn服务器">Linux下的svn服务器&lt;/h2>
&lt;p>Subversion是一个自由开源的版本控制系统。在Subversion管理下，文件和目录可以超越时空。Subversion将文件存放在中心版本库里，这个版本库很像一个普通的文件服务器，不同的是，它可以记录每一次文件和目录的修改情况，这样就可以借此将数据恢复到以前的版本，并可以查看数据的更改细节。$^{[1]}$&lt;/p>
&lt;p>Subversion集服务端和客户端一体，当linux中拥有Subversion之后，既可以做SVN的服务端，也可以作为客户端。而在Windows下，服务端与客户端通常是不同的软件，例如服务端使用Visualsvn server,客户端使用TortoiseSVN。&lt;/p>
&lt;p>在Debian Linux下安装Subversion特别简单&lt;code>sudo apt install subversion&lt;/code>即可。&lt;/p>
&lt;h2 id="创建工作目录与库">创建工作目录与库&lt;/h2>
&lt;p>首先我们需要给Subversion创建一个目录作为工作区。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>mkdir ~/svn
&lt;/code>&lt;/pre>&lt;/div>&lt;p>工作目录是存放SVN库的目录，因为会创建不只一个的库，比如下面的场景，接下来到工作目录中创建svn版本库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">cd&lt;/span> svn
&lt;span class="ln">2&lt;/span>svnadmin create repo1
&lt;span class="ln">3&lt;/span>svnadmin create repo2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就在工作目录下创建了两个版本库。&lt;/p>
&lt;h2 id="配置一个库">配置一个库&lt;/h2>
&lt;p>SVN版本库的配置文件都放在对应版本库的&lt;code>conf&lt;/code>目录下，我们需要用到&lt;strong>authz、passwd、svnserve.conf&lt;/strong>这三个文件。&lt;/p>
&lt;p>首先编辑svnserve.conf主配置文件(应仔细阅读该文件里面的注释，了解每一项的作用)，对以下几项修改如下:$^{[2]}$&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>general&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>anon-access &lt;span class="o">=&lt;/span> none &lt;span class="c1">#取消匿名访问&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>auth-access &lt;span class="o">=&lt;/span> write &lt;span class="c1">#授权用户有可写权限&lt;/span>
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>password-db &lt;span class="o">=&lt;/span> passwd &lt;span class="c1">#指定用户配置文件，后面会用到&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;span class="ln">9&lt;/span>authz-db &lt;span class="o">=&lt;/span> authz &lt;span class="c1">#指定权限配置文件，后面会用到&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编辑passwd文件，建立svn客户端用户以及密码，一行一个，这里建立了两个用户,对应我的两台主机。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">### This file is an example password file for svnserve.&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">### Its format is similar to that of svnserve.conf. As shown in the&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">### example below it contains one section labelled [users].&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">### The name and password for each user follow, one account per line.&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">[&lt;/span>users&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># harry = harryssecret&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># sally = sallyssecret&lt;/span>
&lt;span class="ln"> 9&lt;/span>cx-laptop &lt;span class="o">=&lt;/span> buptlab635
&lt;span class="ln">10&lt;/span>cx-server &lt;span class="o">=&lt;/span> buptlab635
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编辑authz文件，指定SVN仓库目录，以及每个认证用户的权限，这里均为可读可写&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>aliases&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="o">[&lt;/span>groups&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># harry_and_sally = harry,sally&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># harry_sally_and_joe = harry,sally,&amp;amp;joe&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># [/foo/bar]&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># harry = rw&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># &amp;amp;joe = r&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c1"># * =&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># [repository:/baz/fuz]&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c1"># @harry_and_sally = rw&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># * = r&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">[&lt;/span>repo1:/&lt;span class="o">]&lt;/span>
&lt;span class="ln">18&lt;/span>cx-laptop &lt;span class="o">=&lt;/span> rw
&lt;span class="ln">19&lt;/span>cx-server &lt;span class="o">=&lt;/span> rw
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动SVN服务，-d表示后台运行svn服务，-r是指定svn目录；然后执行了netstat检查端口，默认监听在3690端口上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>svnserve -d -r ~/svn/
&lt;span class="ln">2&lt;/span>netstat -anp &lt;span class="p">|&lt;/span> grep &lt;span class="m">3690&lt;/span> &lt;span class="c1"># 通过查看这个端口判断SVN服务器是否正常启动&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="windows客户端tortoisesvn的操作">windows客户端TortoiseSVN的操作&lt;/h2>
&lt;p>在Windows使用SVN服务的话，需要下载一个TortoiseSVN客户端软件，安装好软件后在本地电脑创建一个工作目录，右键该目录选择checkout，checkout就是把SVN服务器上的文件下载到本地工作目录内的操作。&lt;/p>
&lt;p>&lt;img src="../images/tortoisesvn1.JPG" alt="tortoiseSVN操作">&lt;/p>
&lt;p>在对话框里输入SVN服务器的地址以及需要存放文件的目录。&lt;strong>repo1&lt;/strong>是服务器工作区的一个版本库，然后点击ok按钮，之后会要求输入用户名密码，这个时候就输入在passwd里设置的信息即可。&lt;/p>
&lt;p>&lt;img src="../images/tortoisesvn2.JPG" alt="tortoiseSVN操作">&lt;/p>
&lt;h2 id="路径问题">路径问题&lt;/h2>
&lt;p>许多人搭建SVN服务器不成功都是因为SVN版本库路径的问题。在搭建过程中，有几个路径需要注意：&lt;/p>
&lt;ol>
&lt;li>SVN工作区所在路径，就是本文中&lt;code>mkdir ~/svn&lt;/code>的路径，具体来说是&lt;code>/home/your-host-name/svn/&lt;/code>，这个路径和&lt;code>svnserve -d -r ~/svn/&lt;/code>的路径保持一致。&lt;/li>
&lt;li>SVN版本库配置路径，即&lt;code>authz&lt;/code>里面的路径，&lt;code>[repo1:/]&lt;/code>这一项，这个名字要和对应版本库名字一致。&lt;code>/&lt;/code>表示repo1这个版本库下的所有文件。&lt;/li>
&lt;li>客户端checkout路径，在客户端checkout的时候，&lt;code>svn://server-ip&lt;/code>对应于服务器上&lt;code>svnserve -d -r ~/svn/&lt;/code>的路径，因此在checkout的时候，需要再跟上版本库的名字，即加上的&lt;code>repo1&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>[1] &lt;a href="https://baike.baidu.com/item/subversion/7818587?fr=aladdin">https://baike.baidu.com/item/subversion/7818587?fr=aladdin&lt;/a>&lt;/p>
&lt;p>[2] &lt;a href="http://www.linuxidc.com/Linux/2016-04/130346.htm">http://www.linuxidc.com/Linux/2016-04/130346.htm&lt;/a>&lt;/p></description></item><item><title>cplus-NS3-Tracing</title><link>https://surprisedcat.github.io/projectnotes/cplus-ns3-tracing/</link><pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/cplus-ns3-tracing/</guid><description>
&lt;h2 id="ns3-tutorial-tracing---omit-in-toc---">NS3 Tutorial Tracing&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="tracing">Tracing&lt;/h2>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在Using the Tracing System中提到,ns3的整个目的在于使用仿真来产生用于研究的数据。目前，ns3提供了两种策略来获取数据：通过通用的预先定义的块输出机制，并将他们的内容转换为可以提取有效信息方式（我觉得应该说的是系统定义的NS_LOG）；或者，使用一种输出机制，只传递我们想要的信息。&lt;/p>
&lt;p>使用预定义的块输出机制有一些优点，比如不需要对ns3有额外的修改，但是需要我们写额外的脚本来转换和过滤我们感兴趣的消息。通常，PCAP和NS_LOG输出消息会在仿真运行中被收集起来，并通过运行额外的脚本程序（grep，sed，awk）来将输出精简转换成方便管理的形式。我们必须自己写一些转换程序，因此也不能说是完全不费功夫的。NS_LOG的输出不被认为是ns3 API的一部分，并且可能不经通知就在不同版本之间做出修改。此外，NS_LOG输出只在DEBUG模式下有效，因此依赖于LOG必然会导致一些性能的损失。当然，如果我们感兴趣的信息并不以预定义的信息块模式出现，这种方式就没法用了。&lt;/p>
&lt;p>如果你需要给预先定义的信息增加一些额外的小片段，这当然也是可以的；如果你使用了一种预先定义的ns3机制，你的工作可以作为对ns3的一些contribution。&lt;/p>
&lt;p>ns3提供了另一套机制，叫做Tracing，来避免从块状输出机制固有的一些问题。它有一些重要的优点。首先，你可以通过只Tracing你感兴趣的事件来降低你需要处理的数据量（在一些大型的仿真中，记录所有的事件会造成IO瓶颈）。第二，如果你使用这种方式，你可以直接控制输出的格式，因此可以避免后期处理的时候使用grep，sed，awk，perl或者python脚本。如果你希望的话，可以直接讲格式定义为gnuplot可以识别的格式。你可以在core中添加钩子（hook）来给别人使用，但是这不会给出明确的信息，除非明确被要求这么做。因为这些理由，我们相信ns3的Tracing系统使我们获取仿真信息的最好方式，所以也是在ns3中需要我们理解的重要机制。&lt;/p>
&lt;h2 id="blunt-instrument">Blunt Instrument&lt;/h2>
&lt;p>有许多从程序获取信息的办法，最直接的方式就是通过标准输入输出来直接打印信息（C语言是的printf，cout等等）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="p">...&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">SomeFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">Some_INTERESTING_VALUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">...&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;The Value of x is &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">...&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>没人会制止你在ns3的核心代码从加入额外的输出信息。这种做法也不是很难，然而，你需要完全掌控你自己的ns3分支。从长期来看，这并不会得到令人满意的结果&lt;/p>
&lt;p>随着在自己代码中添加的输出信息越来越多，管理和处理这些输出信息也变得越来越复杂。最终，你可能觉得需要一些方式来控制哪些信息需要被输出，而哪些不需要；或许通过打开或关闭某些输出类，或者增加或减少所需信息的数量。如果在这条路上越走越远，最终你可能发现自己重新实现了一遍NS_LOG机制。为了避免这一点，我们应该合理的最大化利用NS_LOG本身。&lt;/p>
&lt;p>我们在上面提到过，一个获取ns3有效信息的方式是将现存的NS_LOG输出转换成感兴趣的消息。如果你发现你感兴趣的信息片段不在LOG信息中，你可以编辑ns3的core模块将你需要的信息加入输出流中。目前，这显然比添加自己的输出语句要好，因为这遵循了ns3的惯例，并且有可能作为一个补丁加入到ns3内核中，从而帮助其他人。&lt;/p>
&lt;p>让我们随机选一个例子。如果你希望增加一些额外的logging给ns3的Tcp Socket（tcp-scoket-base.cc），你可以只是在实现中增加一个新的消息。注意，在 &lt;code>TCPSocketBase::ReceivedAck()&lt;/code>,原本没有任何关于no ack 情况下的log信息。你可以简单地增加一句话。&lt;/p>
&lt;p>这是原来的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/** Process the newly received ACK */&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kt">void&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">TcpSocketBase&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ReceivedAck&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Packet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">packet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">TcpHeader&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">NS_LOG_FUNCTION&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">// Received ACK. Compare the ACK number against highest unacked seqno
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetFlags&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">TcpHeader&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ACK&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="c1">// Ignore if no ACK flag
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了记录no ack的情况，你可以增加一个NS_LOG_LOGIC在if语句中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/** Process the newly received ACK */&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kt">void&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">TcpSocketBase&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ReceivedAck&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Packet&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">packet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">TcpHeader&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">NS_LOG_FUNCTION&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">// Received ACK. Compare the ACK number against highest unacked seqno
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tcpHeader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetFlags&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">TcpHeader&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ACK&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="c1">// Ignore if no ACK flag
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">NS_LOG_LOGIC&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TcpSocketBase &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; no ACK flag&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样乍看上去看起来似乎相当简单和令人满意。但是必须考虑到，如果你在NS_LOG中添加额外的代码，你同时也必须使用文本处理脚本（grep、sed、awk）来转换输出的信息以分离出你需要的内容。这是因为即使你通某种方式控制了logging系统，也只是控制了输出的级别，是一种非常粗粒度的管理。&lt;/p>
&lt;p>如果你正在向ns3模块中添加新的输出信息，也需要考虑到其他开发者也正在添加他们自己所感兴趣的信息。你最终可能发现，为了得到自己所需要的一小片信息，你必须处理一大片自己完全没有兴趣的大段输出内容。最终这些大量的log文件会占用大量的磁盘，无论你需要什么信息都必须进行了大量额外处理。&lt;/p>
&lt;p>既然，对ns3的NS_LOG输出的稳定我们并没有严格的稳定性保证，你可能发现你需要或依赖的log信息可能在不同的版本是不一样的，甚至可能在下一个版本完全删除了。如果你依赖于这种类型的输出，你会发现不同版本的ns3会需要不同的文本处理脚本！&lt;/p>
&lt;p>最后，NS_LOG只在DEBUG模式下有效，在优化模式下是没有log输出的（优化模式运行速度快了两倍）。依赖NS_LOG会严重影响仿真的性能。&lt;/p>
&lt;p>由于这些原因，我们认为使用&lt;code>std::cout&lt;/code> 和 &lt;code>NS_LOG&lt;/code> 是一种快速不标准的获取ns3更多信息的方式，但是并不适合严格的工作。&lt;/p>
&lt;p>我们实际上十分需要一种稳定的API同时能够只获得我们所需要的信息的机制。同时不需要改变额重新编译仿真平台的核心系统。更好的是，如果能通知用户代码他所感兴趣的事件改变或者发生了，这样用户就不用在系统的大段输出中到处找东西了。&lt;/p>
&lt;p>ns3的Tracing系统被设计和代码一起工作，并且和&lt;strong>Attribute&lt;/strong>和&lt;strong>Config&lt;/strong>子系统融合在一起，来提供相对简单的使用环境。&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>ns3的Tracing系统是由独立的跟踪源（Tracing Source）和跟踪槽（Tracing Sink）以及一种统一的机制连接跟踪源和跟踪槽组成的。&lt;/p>
&lt;p>跟踪源是仿真过程中信号事件产生的实体，并提供底层数据的获取。例如，一个跟踪源可能意味着当一个数据包被一个网络设备收到，并能够为跟踪槽提供数据包内容。一个跟踪源也可能是系统模型的可改变的状态，比如，一个TCP模型的拥塞窗口是一个初始状态代表着一个跟踪源。每当拥塞窗口发生变化时，跟踪槽就会收到原先的值和现在的值。&lt;/p>
&lt;p>跟踪源本身是没有什么用的，它必须和代码中其他部分联系起来，这些代码会使用源的这些有用信息做一些有用的事情。这些使用跟踪源信息的实体叫做跟踪槽。跟踪源是数据的产生者，而跟踪槽是数据的消费者。这种显式的分离模式可以使大量的跟踪源分布在系统不同的地方，这些地方往往是建模者认为有用的地方。插入跟踪源只需要增加很小的负载。&lt;/p>
&lt;p>一个跟踪源产生的信息可能被一个或多个使用者使用。我们可以想象一个跟踪源是一个点到多点的链路。你的代码和可以和其他使用这个被追踪事件源的代码愉快地共存。&lt;/p>
&lt;p>除非一个用户将一个跟踪槽和其中一个跟踪源联系起来，否则不会有任何信息输出。通过使用Tracing系统，你和其他关注同一个跟踪源上的人都可以获取，并只获取你们所关心的内容。你们之间不会因为改变输出的信息二队他人造成影响。如果你增加了一个跟踪源，你在为良好开源工作者的工作将会允许其他人来提供新的对大家都有益的工作，而不需要对ns3的内核做出任何改进。&lt;/p>
&lt;h2 id="简单的例子">简单的例子&lt;/h2>
&lt;p>让我们花几分钟来过一个简单的例子。我们需要一些有关回调的背景知识来理解这个例子，所以我们先来绕一点路。&lt;/p>
&lt;h3 id="回调">回调&lt;/h3>
&lt;p>ns3中的回调系统目的在于让一段代码调用一个函数而不需要模块间依赖。这意味这你需要一些间接的方式，&lt;strong>你需要将被调用函数的地址作为一个变量&lt;/strong>。这种变量叫做函数指针变量，函数和函数指针的关系和类与类指针的关系没有什么区别。&lt;/p>
&lt;p>在C语言中，函数指针的典型例子是返回整形的函数指针（pointer to function returning integer, PFI）。PFI使用一个整形参数，它可能像如下这样被声明：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pfi&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这个声明中，你可以获得一个名叫pfi的变量，被初始化为0。如果你想将这个指针初始化为更加有意义的值，你首先需要一个参数和返回值类型都匹配的函数，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">MyFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你有了这个目标函数，你可以通过如下方式初始化你的函数指针：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="n">pfi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MyFunction&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你可以使用更具有提示性的方式来间接地调用&lt;code>MyFunction&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pfi&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">1234&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个可以清楚的看出，你解引用了一个函数指针，但是通常编译器知道函数指针和函数的队友了关系，因此写成这样也是没有问题的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pfi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1234&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看上去就像你调用了一个叫做&lt;code>pfi&lt;/code> 的函数一样。但是编译器足够智能，知道我们使用的是变量 &lt;code>pfi&lt;/code> ，它间接的调用了函数 &lt;code>MyFunction&lt;/code> 。&lt;/p>
&lt;p>概念上来说，这就是Tracing系统的工作方式。基本上，跟踪槽就是一个回调。当一个跟踪槽表示出对某个跟踪事件的兴趣时，它将自己加入到一个回调列表中，这个回调列表由跟踪源内部维护。当一个感兴趣的事件发生后，跟踪源唤醒它的 &lt;code>operator(...)&lt;/code> 提供0个或者多个参数。 &lt;code>operator(...)&lt;/code> 最终深入到系统中，做一些和刚刚的间接调用非常相似的工作，提供0个或多个参数，就像上面调用 &lt;code>pfi&lt;/code> 传递一个参数到目标函数&lt;code>MyFunction&lt;/code> 一样。&lt;/p>
&lt;p>Tracing系统和回调的重要不同是对于每一个跟踪源，内部有一系列的回调。不仅仅是触发一个回调，一个跟踪源可能出发多个回调。当一个跟踪槽对一个跟踪源表示出兴趣，只是意味着讲自己的回调加入到回调列表中。&lt;/p>
&lt;p>如果你对这个部分的细节希望有更多的了解，可以去查看ns3 manual中关于回调的部分。&lt;/p>
&lt;h2 id="walkthroughfourthcc">WalkThrough：fourth.cc&lt;/h2>
&lt;p>我们提供了最简单例子来解释Tracing系统的使用方式。你可以在&lt;code>fourth.cc&lt;/code> 中发现这段代码，让我们一起看一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/* -*- Mode:C++; c-file-style:&amp;#34;gnu&amp;#34;; indent-tabs-mode:nil; -*- */&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cm">* This program is free software; you can redistribute it and/or modify
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cm">* it under the terms of the GNU General Public License version 2 as
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="cm">* published by the Free Software Foundation;
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cm">*
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="cm">* This program is distributed in the hope that it will be useful,
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="cm">* but WITHOUT ANY WARRANTY; without even the implied warranty of
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="cm">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="cm">* GNU General Public License for more details.
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="cm">*
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="cm">* You should have received a copy of the GNU General Public License
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="cm">* along with this program; if not, write to the Free Software
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="cm">* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ns3/object.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ns3/uinteger.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ns3/traced-value.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ns3/trace-source-accessor.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">ns3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>大部分代码看上去都是十分熟悉的。就像上面提到那样，Tracing系统非常依赖于Object和Attribute系统，所以我们需要先include它们。前面两个include表示将它们的声明引入系统。我们可以使用 &lt;code>#include &amp;quot;ns3/core-module.h&amp;quot;&lt;/code> 来将它们一次性引入，我们这样分别引入只是表明这种功能食很简单的。&lt;/p>
&lt;p>文件 &lt;code>traced-value.h&lt;/code> 将引入跟踪数据所需要遵循的语义。由于Tracing 系统和attribute系统融合在一起，而Attribute系统和Object 一起工作。因此跟踪源必须依附于一个类，接下来的代码段定义并声明了我们需要的一个类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyObject&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Object&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="n">TypeId&lt;/span> &lt;span class="n">GetTypeId&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="n">TypeId&lt;/span> &lt;span class="n">tid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TypeId&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MyObject&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">SetParent&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetTypeId&lt;/span> &lt;span class="p">())&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">SetGroupName&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MyGroup&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">AddConstructor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">()&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">AddTraceSource&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MyInteger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s">&amp;#34;An integer value to trace.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">MakeTraceSourceAccessor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">MyObject&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">m_myInt&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="s">&amp;#34;ns3::TracedValueCallback::Int32&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="n">MyObject&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="n">TracedValue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">m_myInt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在以上的两行代码中，和Tracing密切相关的就是.AddTraceSource 和 TracedValue声明的m_myInt。&lt;/p>
&lt;p>.AddTraceSource提供了通过Config系统连接跟踪源和外界的钩子。第一个参数是给跟踪源的命名，名字可以自己取；第二个参数是一个提示字符串；&lt;strong>我们需要关注的是第三个参数“&lt;code>&amp;amp;MyObject::m_myInt&lt;/code>”。这表示着需要被加到跟踪类中的需要跟踪的值，第三个参数总是类的成员变量。&lt;/strong> 第四个参数是TracedValue的一个typedef,是一个字符串。这个正确的回调函数签名产生文档，在一些更为通用的回调函数中十分有用。&lt;/p>
&lt;p>TracedValue&amp;lt;&amp;gt;声明提供了驱动回调进程的基础。任何时候，只要底层的值发生变化，TracedValue机制就会提供新的值和旧的值，在本例中是一个int32_t类型的值。跟踪槽函数traceSink跟踪这个TracedValue，并需要签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">traceSink&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有和这个跟踪源关联的跟踪槽都需要这个签名。我们接下来就讨论在其他场景下，如何决定所需回调函数的签名。&lt;/p>
&lt;p>我们继续过fourth.cc我们看到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">IntTrace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">oldValue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Traced&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">oldValue&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; to &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">newValue&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里定义了一个匹配的跟踪槽函数。他直接对应与回调函数的签名。一旦被连接，这个函数就会在TracedValue 改变时被调用。&lt;/p>
&lt;p>我们已经看过了跟踪源和跟踪槽，代码接下来要做的就是连接跟踪源和跟踪槽，这个在main函数中完成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">Ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CreateObject&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">myObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">TraceConnectWithoutContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MyInteger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">MakeCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">IntTrace&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">myObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_myInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1234&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们首先创造一个MyObject实例，这样我们的跟踪源可以存在。&lt;/p>
&lt;p>下一步，&lt;code>TraceConnectWithoutContext&lt;/code> 形成了跟踪源和跟踪槽之间的连接。&lt;strong>第一个参数就是跟踪源的名称&lt;/strong>,我们在上面已经定义过了。需要注意的是，&lt;code>MakeCallback&lt;/code> 是一个函数模板，这个函数模板做一些ns3底层的回调类生成，关联函数（和IntTrace函数）等等工作。&lt;code>TraceConnect&lt;/code>将会关联你提供的回调函数，同时重载（）操作符。关联之后，跟踪源的被跟踪的变量将会对准你提供的回调函数。&lt;strong>第二个参数就是MakeCallback（你的函数地址）。&lt;/strong>&lt;/p>
&lt;p>实现这些功能的代码并不平凡，但是本质上，就像一开始我们提到的使用&lt;code>pfi&lt;/code> 回调一样。在类中&lt;code>TracedValue&amp;lt;int32_t&amp;gt; m_myInt;&lt;/code> 的声明做一些重载分配操作符的工作，将会调用&lt;code>operator（）&lt;/code>来实际唤醒Callback并提供所需的参数。&lt;code>.AddTraceSource&lt;/code>将会连接回调函数和Config系统，而&lt;code>TraceConnectWithoutContext&lt;/code>将会通过Attribute系统的Attribute Name连接你的回调函数和跟踪源的名字。&lt;/p>
&lt;p>我们先不管其他的一些内容。最后一行是给m_myInt重新分配值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="n">myObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m_myInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1234&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要解释的是通过重载operator=，不仅完成了赋值的工作，还将1234作为参数传递了。&lt;/p>
&lt;p>由于 m_myInt是一个被跟踪的值,因此它的回调函数是将两个整数值作为参数（一个旧值，一个新值），且返回空值。这也正如我们的例子所表示的那样，IntTrace。&lt;/p>
&lt;p>总结一下，一个跟踪源本质上是一个有一系列函调函数的变量。一个跟踪槽是一个函数被用为回调的目标。Attribute和Object类信息系统，被用来连接跟踪源和跟踪槽。当一个跟踪的数据有变动时，就是重载一个操作符触发回调。这样，就使得在跟踪源注册的回调被源所提供的参数调用。
如果你编译运行这个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span> me~$ ./waf --run fourth
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你将会看到IntTrace函数被执行，一旦跟踪源有变动：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span> Traced &lt;span class="m">0&lt;/span> to &lt;span class="m">1234&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们执行到代码，&lt;code>myObject-&amp;gt;m_myInt = 1234;&lt;/code>,跟踪源被击中，并提供原先和现在的值给跟踪槽。函数IntTrace使用便准输入输出打印。&lt;/p></description></item><item><title>linux-nttcp</title><link>https://surprisedcat.github.io/projectnotes/linux-nttcp/</link><pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/linux-nttcp/</guid><description>
&lt;h2 id="翻译-新tcp测试工具nttcp---omit-in-toc---">翻译： 新TCP测试工具——nttcp&lt;!-- omit in toc -->&lt;/h2>
&lt;p>原链接:&lt;a href="http://linux.die.net/man/1/nttc">http://linux.die.net/man/1/nttc&lt;/a> 作者：Elmar Bartel&lt;/p>
&lt;h2 id="名称">名称&lt;/h2>
&lt;p>　　nttcp 新的tcp测试工具，适用于Linux系统。&lt;/p>
&lt;h2 id="语法格式">语法格式&lt;/h2>
&lt;p>　　&lt;strong>nttcp&lt;/strong> [ &lt;strong>local options&lt;/strong> ] &lt;strong>partner-host [ partner-host ] ...&lt;/strong> [ &lt;strong>remote options&lt;/strong> ]&lt;/p>
&lt;h2 id="描述">描述&lt;/h2>
&lt;p>　　&lt;strong>nttcp&lt;/strong>用来测量TCP，UDP和多播UDP连接的传输速率。使用　&lt;strong>nttcp&lt;/strong>时，需要两台电脑，一台本地主机，一台服务器。在服务器端，只需要简单的运行&lt;code>nttcp -i&lt;/code>。在本地主机上，将partner-host设置为服务起的IP地址。两台电脑会自动建立连接进行传输。&lt;strong>在默认情况下&lt;/strong>，客户端会向服务器发送2048个buffer，每个数据包大小为4KB（总共8M字节）。发送端和接收端的性能情况都会反馈到本地主机，我们可以通过命令行调整几乎每一个参数，甚至如何显示结果。&lt;/p>
&lt;h2 id="参数选项">参数选项&lt;/h2>
&lt;p>&lt;strong>-r&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>定义传输接收方向，本地主机为接收端，数据由服务器端发往本地主机。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-t&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>定义传输发送方向，本地主机为发送端，数据由本地主机发往服务器端，&lt;strong>这是默认的选项&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-T&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>打印标题线。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-u&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>使用UDP协议代替TCP协议（默认为TCP协议）。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-g&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>在两个数据包之间的间隔毫秒数。这种延时是通过**&lt;a href="http://linux.die.net/man/2/select">select&lt;/a>&lt;strong>和&lt;/strong>&lt;a href="http://linux.die.net/man/2/gettimeofday">gettimeofday&lt;/a>&lt;strong>两个系统函数实现的。他们的值具有误导性，大多数主机无法实现绝对精准的延时量。代码实现中，将尽量的保证准确的时延。对于TCP连接来说，这个时延只是在调用系统函数&lt;/strong>&lt;a href="http://linux.die.net/man/2/write">write&lt;/a>**之间的时间间隔，并不是物理设备真正输出之间的时延。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-v&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>给出更多更详细的输出内容，仅用于调试目的。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-D&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>在发送端设置为TCP_NODELAY选项，发送端将不缓存任何wirte请求。（存疑）&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-f&lt;/strong> format string&lt;/p>
&lt;blockquote>
&lt;p>格式化输出的内容，具体见OUTPUT。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-n&lt;/strong> number of buffer&lt;/p>
&lt;blockquote>
&lt;p>每次发送的buffer数量，默认为2048个。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-l&lt;/strong> length of a buffer&lt;/p>
&lt;blockquote>
&lt;p>每一个buffer的大小（说的就是每一个数据包大小），默认为4096KB。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-x&lt;/strong> fixed length of data&lt;/p>
&lt;blockquote>
&lt;p>发送数据包的总长度，如果接下来定义了-n或者-l ，将会自动计算剩下来的那个值，但是要保证buffers*length = fixed data length。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-w&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>定义接收方与发送放的buffer size，这个通常是由系统决定的，通常为16KB。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-c&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>如果这一项被启用，接收端将会比较接收端的字节与发送端的字节。至多前100个不同将会被报告出来。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-s&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>如果使用UDP传输，将会强制启动一个stream pattern.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-S&lt;/strong> seed string&lt;/p>
&lt;blockquote>
&lt;p>产生一个字符串来传输，使用-S将会自动启动-c。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-p&lt;/strong> port number&lt;/p>
&lt;blockquote>
&lt;p>设置对方机器的端口，默认为5037。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-i&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>作为接收端监听连接请求。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-R&lt;/strong> &lt;em>number of getpid() calls&lt;/em>*:&lt;/p>
&lt;blockquote>
&lt;p>这个选项将不会传输任何的数据，计算每秒调用getpid()的次数，通常作为衡量计算速度和调用端口速度的测量方法。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>-m&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>使用多播IP,将会强制使用-t和-u参数。&lt;/p>
&lt;/blockquote>
&lt;h2 id="输出">输出&lt;/h2>
&lt;p>　　输出结果由两行字母组成（如果使用多播将会由多行结果）。第一行结果是本地主机的测量结果，第二行结果是对端主机的测量结果。第一行的第一个字母为“&lt;strong>l&lt;/strong>”(local)，而第二行的第一个字母为“&lt;strong>r&lt;/strong>”(remote);如果使用了“&lt;strong>-T&lt;/strong>”参数，就会多一行标题行。默认的输出格式如下所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Sides&lt;/th>
&lt;th style="text-align:center">Bytes&lt;/th>
&lt;th style="text-align:center">Real s&lt;/th>
&lt;th style="text-align:center">CPU s&lt;/th>
&lt;th style="text-align:center">Real-MBit/s&lt;/th>
&lt;th style="text-align:center">CPU-MBit/s&lt;/th>
&lt;th style="text-align:center">Calls&lt;/th>
&lt;th style="text-align:center">Real-C/s&lt;/th>
&lt;th style="text-align:center">CPU-C/s&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">8388608&lt;/td>
&lt;td style="text-align:center">7.51&lt;/td>
&lt;td style="text-align:center">0.25&lt;/td>
&lt;td style="text-align:center">8.7307&lt;/td>
&lt;td style="text-align:center">259.8676&lt;/td>
&lt;td style="text-align:center">2048&lt;/td>
&lt;td style="text-align:center">272.83&lt;/td>
&lt;td style="text-align:center">8120.86&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">r&lt;/td>
&lt;td style="text-align:center">8388608&lt;/td>
&lt;td style="text-align:center">7.55&lt;/td>
&lt;td style="text-align:center">0.95&lt;/td>
&lt;td style="text-align:center">8.6804&lt;/td>
&lt;td style="text-align:center">68.9853&lt;/td>
&lt;td style="text-align:center">3831&lt;/td>
&lt;td style="text-align:center">507.42&lt;/td>
&lt;td style="text-align:center">4032.63&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>标有CPU计时（CPU s）和频率(CPU-C/s)的值表示使用系统和用户的总时间。Real时间和频率值表示从传输开始到结束的总时间。还有可能由另一种格式输出，详见原文档。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>n&lt;/strong> prints the buffer count. Integer value.
&lt;strong>c&lt;/strong> prints the number of calls. Integer value.
&lt;strong>rt&lt;/strong> prints the real time in s. Float value.
&lt;strong>rbr&lt;/strong> prints the real bit rate in MBit/s. Float value.
&lt;strong>rcr&lt;/strong> prints the real call rate in calls/s. Float value.
&lt;strong>ct&lt;/strong> prints the cpu time in s. Float value.
&lt;strong>cbr&lt;/strong> prints the cpu bit rate in MBit/s. Float value.
&lt;strong>ccr&lt;/strong> prints the cpu call rate in calls/s. Float value.
The default format is produced with the following format string:
&amp;quot;%9b%8.2rt%8.2ct%12.4rbr%12.4cbr%8c%10.2rcr%10.2ccr&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;h2 id="作者">作者&lt;/h2>
&lt;p>Elmar Bartel
Fakultaet fuer Informatik,
Technische Universitaet Muenchen.&lt;/p></description></item><item><title>python-Eclipse-pydev-encode</title><link>https://surprisedcat.github.io/projectnotes/python-eclipse-pydev-encode/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/python-eclipse-pydev-encode/</guid><description>
&lt;h2 id="转载eclipsepydev解决中文显示和注释问题的方法大全---omit-in-toc---">转载：Eclipse+pydev解决中文显示和注释问题的方法大全&lt;!-- omit in toc -->&lt;/h2>
&lt;p>原文地址：&lt;a href="http://blog.sina.com.cn/s/blog_779eecd801011j7x.html">http://blog.sina.com.cn/s/blog_779eecd801011j7x.html&lt;/a> 作者：海木棉枫&lt;/p>
&lt;h2 id="eclipse的设置">Eclipse的设置&lt;/h2>
&lt;p>window-&amp;gt;preferences-&amp;gt;general-&amp;gt;editors-&amp;gt;text editors-&amp;gt;spelling-&amp;gt;encoding-&amp;gt;UTF-8，编辑器的编码格式&lt;/p>
&lt;p>window-&amp;gt;preferences-&amp;gt;workspace-&amp;gt;text file encoding-&amp;gt;UTF-8&lt;/p>
&lt;p>打开eclipse安装目录-&amp;gt;eclipse.ini，末行加上”-Dfile.encoding=UTF-8”&lt;/p>
&lt;h2 id="文件编码">文件编码&lt;/h2>
&lt;p>py文件记得保存成UTF-8，文件首行加上”#coding=utf-8” ，这一句话可控制代码中可输入中文字符&lt;/p>
&lt;h2 id="run时设置">run时设置&lt;/h2>
&lt;p>run--&amp;gt;run configurations-&amp;gt;python run-&amp;gt;Common-&amp;gt; Encoding -&amp;gt;UTF-8.这个应该是运行时的可解决中文乱码问题。&lt;/p>
&lt;p>更改空白模块默认显示# -&lt;em>- coding: utf-8 -&lt;/em>-&lt;/p>
&lt;p>如果想每次新建一个空模块时自动添加”# -&lt;em>- coding: utf-8 -&lt;/em>-” 这样的一句话，可以通过window--Preferences--Pydev--Editor--Template--Empty，然后点击“Edit”按钮，把我们要添加的语句加进去就可以了，将事先默认的语句去掉，改写为：# -&lt;em>- coding: utf-8 -&lt;/em>- 这样的一句话,然后你再新建一个空白模块，再也不需要每次都要复制那个编码语句了。&lt;/p>
&lt;p>当在建立的python项目时，输入的中文太细，可以通过
Window &amp;gt; Preferences&amp;gt;General&amp;gt;Appearance&amp;gt;Color and Fonts中的第一个来设置，Basic里面的TextFonts设置大小即可。&lt;/p></description></item><item><title>cplus-DES对称加密实现</title><link>https://surprisedcat.github.io/projectnotes/cplus-des%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0/</link><pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/cplus-des%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0/</guid><description>
&lt;h2 id="desdata-encryption-standard对称加密方法---omit-in-toc---">DES（Data Encryption Standard）对称加密方法&lt;!-- omit in toc -->&lt;/h2>
&lt;p>DES算法全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法。DES算法是一种对称算法，即可以使用同一个密钥进行加密和解密。DES的具体原理解析，&lt;strong>本人推荐J. Orlin Grabbe的名作&lt;a href="http://page.math.tu-berlin.de/~kant/teaching/hess/krypto-ws2006/des.htm">《DES Algorithm Illustrated》&lt;/a> 以及一篇非常优秀的中文介绍：&lt;a href="http://www.hankcs.com/security/des-algorithm-illustrated.html">DES算法示例讲解&lt;/a>&lt;/strong>。本文的重点是用C++代码 &lt;strong>逐步实现DES算法的具体过程&lt;/strong> 。&lt;/p>
&lt;h2 id="0前提说明">0.前提说明&lt;/h2>
&lt;p>本文实现的是基于ECB的Zeropadding的DES加密算法。ECB指的是将加密的数据分成若干组，每组的大小跟加密密钥长度相同；然后每组都用相同的密钥加密， 如果最后一个分组长度不够64位，要补齐64位。Zeropadding指的是补齐着这64位的方法是用&lt;strong>0&lt;/strong>填充。这种模式是实现DES的&lt;strong>基本模式&lt;/strong>。
DES的输入有三个部分，第一个部分是明文，就是需要加密内容；第二个部分是密钥，用来加密数据；第三个部分是工作模式，有两种，加密和解密。明文的长度不固定，但是都被分为固定的64位“数据块”，以一个块为单位进行加密，输出的密文也是一个64位的“块”；密钥的长度是64位，但是实际用到的只有56位，第8、16、24、32、40、48、56、64位是校验位，做加密中用不到。本文输入的格式为文本，例如明文‘12345678’，等同于16进制&lt;/p>
&lt;h2 id="1密钥的生成">1.密钥的生成&lt;/h2>
&lt;h2 id="11实现字符到bit的转换">1.1实现字符到bit的转换&lt;/h2>
&lt;p>DES加密本质上是对二进制数据的加密，而正常我们输入电脑的多用的是文本形式，因此我们需要将字符转变为文本。我们把它放在类的成员函数中，在密钥生成阶段和明文加密阶段都会用到。本文以密钥“12345678”为例。主要分成两个函数：
第一个函数：选取8字节密钥，超过8字节只选取前面8字节，不足8字节用0补齐。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span> &lt;span class="c1">//设置密钥的内容，截取或补齐
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">DataEncrytionStandard&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SetKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">_key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lengthCout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_key&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">lengthCout&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lengthCout&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lengthCout&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//密码的长度只截取前面8位，不够的话用‘0’补齐。
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">lengthCout&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二个函数将8字节转换为64bits。本文使用的是64位的array&amp;lt;bool,64&amp;gt;实现。过去曾用bitset尝试过，但是bitset默认存储的是二进制数字，比特位顺序和DES加密的顺序相反；同时bitset还要考虑小端规则，对于降下来的处理不是很方便，因此用数组替代。本人发现网上的一些C++实现没有注意到这些问题，导致加密的结果与标准结果不一样。现推荐一个网站可以查看每一步实现的数据变化：&lt;a href="http://people.eku.edu/styere/Encrypt/JS-DES.html">JavaScript DES Example&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">DataEncrytionStandard&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CharToBits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">_inChar&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="c1">//这里注意顺序
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_inChar&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>获得密钥:0011000100110010001100110011010000110101001101100011011100111000&lt;/p>
&lt;/blockquote>
&lt;h2 id="12密钥的pc-1转换">1.2密钥的PC-1转换&lt;/h2>
&lt;p>这个64位的秘钥首先根据表格PC-1进行变换，变成56位的密钥。这个表格含义是64bits密钥的第57位，变成新密钥的第1位；原密钥的第49位变成新密钥的第2位；以此类推。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span> PC-1
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="m">57&lt;/span> &lt;span class="m">49&lt;/span> &lt;span class="m">41&lt;/span> &lt;span class="m">33&lt;/span> &lt;span class="m">25&lt;/span> &lt;span class="m">17&lt;/span> &lt;span class="m">9&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="m">58&lt;/span> &lt;span class="m">50&lt;/span> &lt;span class="m">42&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">26&lt;/span> &lt;span class="m">18&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="m">10&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">59&lt;/span> &lt;span class="m">51&lt;/span> &lt;span class="m">43&lt;/span> &lt;span class="m">35&lt;/span> &lt;span class="m">27&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="m">19&lt;/span> &lt;span class="m">11&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">60&lt;/span> &lt;span class="m">52&lt;/span> &lt;span class="m">44&lt;/span> &lt;span class="m">36&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="m">55&lt;/span> &lt;span class="m">47&lt;/span> &lt;span class="m">39&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">23&lt;/span> &lt;span class="m">15&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="m">7&lt;/span> &lt;span class="m">62&lt;/span> &lt;span class="m">54&lt;/span> &lt;span class="m">46&lt;/span> &lt;span class="m">38&lt;/span> &lt;span class="m">30&lt;/span> &lt;span class="m">22&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="m">14&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">61&lt;/span> &lt;span class="m">53&lt;/span> &lt;span class="m">45&lt;/span> &lt;span class="m">37&lt;/span> &lt;span class="m">29&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="m">21&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">28&lt;/span> &lt;span class="m">20&lt;/span> &lt;span class="m">12&lt;/span> &lt;span class="m">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="c1">//第一次转换，将64bit的密钥根据PC-1变换转换成56bit。
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CharToBits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyPC_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">keyPC_1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keyInit&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PC_1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">9&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>56位密钥：00000000000000001111111111110110011001111000100000001111&lt;/p>
&lt;/blockquote>
&lt;h2 id="13-密钥拆分与移位构成16轮子密钥">1.3 密钥拆分与移位构成16轮子密钥&lt;/h2>
&lt;p>现在我们将56位的密钥拆分成前后两个等长部分（28位），C0、D0。我们现在创建16个块Cn 和 Dn, 1&amp;lt;=n&amp;lt;=16。每一对Cn 和 Dn都是由前一对Cn-1 和 Dn-1移位而来。具体说来，对于n = 1, 2, …, 16，在前一轮移位的结果上，使用下表进行一些次数的左移操作。这意味着，比如说，C3 和 D3是C2 和 D2移位而来的，具体来说，通过2次左移位；C16 和 D16 则是由C15和D15通过1次左移得到的。移位完成后，再将其拼接起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>第n轮 左移位数
&lt;span class="ln"> 2&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="m">6&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="m">7&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="m">8&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="m">9&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="m">10&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="m">12&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="m">13&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="m">14&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="m">15&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="m">16&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln"> 1&lt;/span> &lt;span class="c1">//进行16轮移位，获取16个子密钥块
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//array&amp;lt;array&amp;lt;bool,48&amp;gt;,16&amp;gt;subKeys; defined in the head file
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//array&amp;lt;array&amp;lt;bool,48&amp;gt;,16&amp;gt;subKeys; defined in the head file
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">offKeys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SubKeyOff&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keyPC_1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">keyOff&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">offKeys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SubKeyOff&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">offKeys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">keyOff&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">DataEncrytionStandard&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SubKeyOff&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">_key56&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">off&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//将密钥拆分成左右两半，各28位。
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1">//移位后的结果
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">keyOffResult&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//前28位
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_key56&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">//后28位
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_key56&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1">//循环移位,for内是一次移位
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">off&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="n">keyOffResult&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="n">keyC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">28&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">keyOffResult&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="n">keyD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">50&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">keyOffResult&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">52&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以得到如下16组子密钥。&lt;/p>
&lt;blockquote>
&lt;p>C0 = 0000000000000000111111111111
D0 = 0110011001111000100000001111
C1: 0000000000000001111111111110
D1: 1100110011110001000000011110
C2: 0000000000000011111111111100
D2: 1001100111100010000000111101
C3: 0000000000001111111111110000
D3: 0110011110001000000011110110
C4: 0000000000111111111111000000
D4: 1001111000100000001111011001
C5: 0000000011111111111100000000
D5: 0111100010000000111101100110
C6: 0000001111111111110000000000
D6: 1110001000000011110110011001
C7: 0000111111111111000000000000
D7: 1000100000001111011001100111
C8: 0011111111111100000000000000
D8: 0010000000111101100110011110
C9: 0111111111111000000000000000
D9: 0100000001111011001100111100
C10: 1111111111100000000000000001
D10: 0000000111101100110011110001
C11: 1111111110000000000000000111
D11: 0000011110110011001111000100
C12: 1111111000000000000000011111
D12: 0001111011001100111100010000
C13: 1111100000000000000001111111
D13: 0111101100110011110001000000
C14: 1110000000000000000111111111
D14: 1110110011001111000100000001
C15: 1000000000000000011111111111
D15: 1011001100111100010000000111
C16: 0000000000000000111111111111
D16: 0110011001111000100000001111&lt;/p>
&lt;/blockquote>
&lt;h2 id="14子密钥变换">1.4子密钥变换&lt;/h2>
&lt;p>以上获得的16个56位子密钥并不是最后加密用的子密钥，还需要根据PC-2变换成48位的子密钥。于是，第n轮的新秘钥Kn 的第1位来自组合子秘钥CnDn的第14位，第2位来自第17位，依次类推，知道新秘钥的第48位来自组合秘钥的第32位。这才是加密用的子密钥。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span> PC-2
&lt;span class="ln">2&lt;/span>&lt;span class="m">14&lt;/span> &lt;span class="m">17&lt;/span> &lt;span class="m">11&lt;/span> &lt;span class="m">24&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="m">28&lt;/span> &lt;span class="m">15&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">21&lt;/span> &lt;span class="m">10&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="m">23&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">12&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">26&lt;/span> &lt;span class="m">8&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="m">16&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">27&lt;/span> &lt;span class="m">20&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="m">41&lt;/span> &lt;span class="m">52&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">37&lt;/span> &lt;span class="m">47&lt;/span> &lt;span class="m">55&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="m">30&lt;/span> &lt;span class="m">40&lt;/span> &lt;span class="m">51&lt;/span> &lt;span class="m">45&lt;/span> &lt;span class="m">33&lt;/span> &lt;span class="m">48&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="m">44&lt;/span> &lt;span class="m">49&lt;/span> &lt;span class="m">39&lt;/span> &lt;span class="m">56&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">53&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="m">46&lt;/span> &lt;span class="m">42&lt;/span> &lt;span class="m">50&lt;/span> &lt;span class="m">36&lt;/span> &lt;span class="m">29&lt;/span> &lt;span class="m">32&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span>&lt;span class="c1">//第二次转换，通过PC-2将56位子密钥变成48位子密钥，得到最后的第n轮加密使用的子密钥。
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">subKeys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">offKeys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">PC_2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>KS1:010100000010110010101100010101110010101011000010
KS2:010100001010110010100100010100001010001101000111
KS3:110100001010110000100110111101101000010010001100
KS4:111000001010011000100110010010000011011111001011
KS5:111000001001011000100110001111101111000000101001
KS6:111000001001001001110010011000100101110101100010
KS7:101001001101001001110010100011001010100100111010
KS8:101001100101001101010010111001010101111001010000
KS9:001001100101001101010011110010111001101001000000
KS10:001011110101000101010001110100001100011100111100
KS11:000011110100000111011001000110010001111010001100
KS12:000111110100000110011001110110000111000010110001
KS13:000111110000100110001001001000110110101000101101
KS14:000110110010100010001101101100100011100110010010
KS15:000110010010110010001100101001010000001100110111
KS16:010100010010110010001100101001110100001111000000&lt;/p>
&lt;/blockquote>
&lt;p>得到最终的16轮48位子密钥。&lt;/p>
&lt;h2 id="2加密64位的数据块">2.加密64位的数据块&lt;/h2>
&lt;h2 id="21-字符到比特的转换">2.1 字符到比特的转换&lt;/h2>
&lt;p>本文的明文将以“helloDES”为例。明文的预处理和密钥是一样的，我们这一节只考虑正好8个字节的明文。首先还是要将字符串转换成二进制bit位，这里用的方法和处理密钥的是一样的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">msgInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CharToBits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>2进制明文：01101000 01100101 01101100 01101100 01101111 01000100 01000101 01010011&lt;/p>
&lt;/blockquote>
&lt;h2 id="22-初始ip变换">2.2 初始IP变换&lt;/h2>
&lt;p>IP是重新变换数据M的每一位产生的。产生过程由下表决定，表格的下标对应新数据的下标，表格的数值x表示新数据的这一位来自旧数据的第x位。原理和密钥的PC-1、PC-2变换也是一样的。区别是IP是一个64位到64位变换，位数不变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span> IP
&lt;span class="ln">2&lt;/span>&lt;span class="m">58&lt;/span> &lt;span class="m">50&lt;/span> &lt;span class="m">42&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">26&lt;/span> &lt;span class="m">18&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="m">60&lt;/span> &lt;span class="m">52&lt;/span> &lt;span class="m">44&lt;/span> &lt;span class="m">36&lt;/span> &lt;span class="m">28&lt;/span> &lt;span class="m">20&lt;/span> &lt;span class="m">12&lt;/span> &lt;span class="m">4&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="m">62&lt;/span> &lt;span class="m">54&lt;/span> &lt;span class="m">46&lt;/span> &lt;span class="m">38&lt;/span> &lt;span class="m">30&lt;/span> &lt;span class="m">22&lt;/span> &lt;span class="m">14&lt;/span> &lt;span class="m">6&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="m">64&lt;/span> &lt;span class="m">56&lt;/span> &lt;span class="m">48&lt;/span> &lt;span class="m">40&lt;/span> &lt;span class="m">32&lt;/span> &lt;span class="m">24&lt;/span> &lt;span class="m">16&lt;/span> &lt;span class="m">8&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="m">57&lt;/span> &lt;span class="m">49&lt;/span> &lt;span class="m">41&lt;/span> &lt;span class="m">33&lt;/span> &lt;span class="m">25&lt;/span> &lt;span class="m">17&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="m">59&lt;/span> &lt;span class="m">51&lt;/span> &lt;span class="m">43&lt;/span> &lt;span class="m">35&lt;/span> &lt;span class="m">27&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">11&lt;/span> &lt;span class="m">3&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="m">61&lt;/span> &lt;span class="m">53&lt;/span> &lt;span class="m">45&lt;/span> &lt;span class="m">37&lt;/span> &lt;span class="m">29&lt;/span> &lt;span class="m">21&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="m">55&lt;/span> &lt;span class="m">47&lt;/span> &lt;span class="m">39&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">23&lt;/span> &lt;span class="m">15&lt;/span> &lt;span class="m">7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参照上表，明文2进制的第58位成为IP变换后的第1位，第50位成为IP变换后的第2位，第7位成为IP变换后的最后1位。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="ln">1&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">msgIP&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">msgIP&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">msgInit&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">IP&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>IP转换后 ： 11111111 10000000 01111110 11010010 00000000 00011111 00011101 10010000&lt;/p>
&lt;/blockquote>
&lt;h2 id="23">2.3&lt;/h2>
&lt;h2 id="3输入明文拆分与填充">3.输入明文拆分与填充&lt;/h2>
&lt;p>TODO&lt;/p>
&lt;h2 id="4拼接密文块并输出">4.拼接密文块并输出&lt;/h2>
&lt;p>TODO&lt;/p>
&lt;h2 id="遇到的问题">遇到的问题&lt;/h2>
&lt;h2 id="问题1为什么网上的des加密算法得到的结果不一样">问题1.为什么网上的DES加密算法得到的结果不一样？&lt;/h2>
&lt;p>这个问题主要涉及编码、输入格式、输出格式、加密模式这几个方面的问题，还有一些细节问题比如空格与回车。
首先是编码问题，在线的编码格式一般默认是UTF-8，因此如果网页编码不是UTF-8，则会导致加密的结果不一样。因为DES算法本质上是对二进制内容进行加密，同样的文字经过不同的编码映射成的二进制内容并不相同。
其次，是输入格式问题。一般在网页的输入是文本格式（Plain Text），但是许多教程为了方便理解，写的输入格式是16进制，比如 &lt;a href="http://www.hankcs.com/security/des-algorithm-illustrated.html">DES算法实例讲解&lt;/a> 这篇文章里面主要用的是16进制格式作为讲解，对于许多在线工具，明文和密钥输入用的是文本格式。因此，在输入的时候一定要注意区分。
然后，是输出格式的问题。有些在线加密工具输出会自动进行Base64编码，这样结果和直接加密的结果完全不同。DES加密的密文是16进制格式的，无法一一对应成ASCII码。密文要么以16进制输出，要么输出一堆乱码，而Base64能将一个较长的16进制数组编码为一个字符串，方便处理。
最后，是加密模式的问题。DES本身采用的是ECB（电子密码本）模式，即将加密的数据分成若干组，每组的大小跟加密密钥长度相同，这样密文输出完全由明文和密钥决定。为了进一步加强安全性，有许多安全性扩展，就诞生了别的加密模式，比如加密块链模式CBC、加密反馈模式CFB等等。不同的模式加密结果也会完全不同。
在附带一点细节问题，即空格与回车的问题。尤其是在字符串处理的时候，有些字符串会带回车换行（0x0D 0x0A）,这会造成最后一个64位字符块加密有些许差别。还有一些文本框自动（trigger）去除空格，就导致文本中的空格没有被计算在内，导致加密不同。&lt;/p></description></item><item><title>windows-link</title><link>https://surprisedcat.github.io/projectnotes/windows-link/</link><pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/windows-link/</guid><description>
&lt;h2 id="转载windows-的快捷方式符号链接软链接和硬链接---omit-in-toc---">转载：Windows 的快捷方式，符号链接，软链接和硬链接&lt;!-- omit in toc -->&lt;/h2>
&lt;p>原文地址：&lt;a href="https://blog.alphatr.com/windows-mklink.html">https://blog.alphatr.com/windows-mklink.html&lt;/a> 作者：AlphaTr&lt;/p>
&lt;p>在我之前的印象中，Linux 下面的 ln 命令好像类似于 Windows 下面的快捷方式，但是在接触了 Windows 下面的 mklink 命令后，发现 Windows 下面的链接还是很强大的。&lt;/p>
&lt;h2 id="linux-下面的-ln-命令">Linux 下面的 ln 命令&lt;/h2>
&lt;p>linux 下面的 ln 命令还是很强大的，可以创建软链接和硬链接，使用方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>ln -s &lt;span class="nb">source&lt;/span> dist &lt;span class="c1"># 建立软连接&lt;/span>
&lt;span class="ln">2&lt;/span>ln &lt;span class="nb">source&lt;/span> dist &lt;span class="c1"># 建立硬连接&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于 Linux 下面的软链和硬链，可以看看这篇文章：&lt;a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">理解 Linux 的硬链接与软链接&lt;/a>.&lt;/p>
&lt;h2 id="windows-下面的链接">Windows 下面的链接&lt;/h2>
&lt;p>Windows 7 下面，在 NTFS 文件系统下面，如果把快捷方式也算是一种链接的话，共有快捷方式，符号链接，软链接和硬链接四种方式。&lt;/p>
&lt;h3 id="快捷方式">快捷方式&lt;/h3>
&lt;p>快捷方式应该都是很熟悉的，有指向本地文件的和指向 Web Url 的之分，而且不受分区等的影响，使用的是系统的绝对路径，并且双击快捷方式也会跳到它指向文件的环境来做一些事情。&lt;/p>
&lt;p>快捷方式就是普通的文件，只是后缀分别使用了 lnk 和 url 两种，分别指代指向本地文件和网络的快捷方式，而且这两种后缀在普通情况下是没办法显示出来的，可以在命令行模式使它们显示出来，使用一些文本编辑器打开它们，可以看到有一部分是它指向文件的路径。&lt;/p>
&lt;h3 id="windows-下面的-mklink-命令">Windows 下面的 mklink 命令&lt;/h3>
&lt;p>打开命令行，直接输入 mklink 可以看到输出 mklink 的帮助信息
创建符号链接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>MKLINK &lt;span class="o">[[&lt;/span>/D&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="o">[&lt;/span>/H&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="o">[&lt;/span>/J&lt;span class="o">]]&lt;/span> Link Target
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> /D 创建目录符号链接。默认为文件
&lt;span class="ln">4&lt;/span> 符号链接。
&lt;span class="ln">5&lt;/span> /H 创建硬链接，而不是符号链接。
&lt;span class="ln">6&lt;/span> /J 创建目录联接。
&lt;span class="ln">7&lt;/span> Link 指定新的符号链接名称。
&lt;span class="ln">8&lt;/span> Target 指定新链接引用的路径
&lt;span class="ln">9&lt;/span> &lt;span class="o">(&lt;/span>相对或绝对&lt;span class="o">)&lt;/span>。
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，功能还是蛮多的，大概有下面几种链接方式
MKLINK Link Target # 创建指向文件的符号链接
MKLINK /D Link Target # 创建指向文件夹的符号链接
MKLINK /J Link Target # 创建指向文件夹的软链接(联接)
MKLINK /H Link Target # 创建指向文件的硬链接&lt;/p>
&lt;h3 id="符号链接">符号链接&lt;/h3>
&lt;p>符号链接支持文件和文件夹，和快捷方式的区别就是快捷方式会跳回自己的环境，而符号链接不会跳回，而是使用创建后的环境，例如分别创建名为 link 的符号链接和快捷方式指向 a 文件，分别打开 link 文件，符号链接显示的文件名是 link，而快捷方式显示的是 a。符号链接指向的文件更新后，原文件也会跟着更新。还有一个，Windows 下面创建的符号链接就相当于 Linux 下面的符号链接(软链接)。&lt;/p>
&lt;h3 id="软链接">软链接&lt;/h3>
&lt;p>软链接只是支持文件夹的链接，而不支持文件的链接，和符号链接的区别就是符号链接在创建时候可以使用相对路径和绝对路径，创建成功后也就是对应的相对路径和绝对路径，绝对路径在原文件(夹)不移动的情况下都可以，而相对路径是相对于两个文件的路径，所以两个文件的相对位置没有改变就不会链接错误，而软链接不管在创建的时候使用的是相对路径还是绝对路径，创建后全部转换为绝对路径。另外一个区别就是，符号链接属性是一个快捷方式类似的，而软链接类型是一个和指向文件没有区别的类型，如下图:&lt;/p>
&lt;p>&lt;img src="../images/windows-links-compare.png" alt="软链接类型是一个和指向文件没有区别的类型">&lt;/p>
&lt;h3 id="硬链接">硬链接&lt;/h3>
&lt;p>同样，和 Linux 一样，在 Windows 下面，硬链接是不支持文件夹(目录)的，这和文件系统是有关系的，硬链接和软链接的区别就是硬链接完全就是一个文件，和从指向的文件是处在同级的，两个文件指向了同一块物理路径而已，所以删除任意一个，对另外一个都没有影响，而且一个文件更新，另外一个也会同样恨着更新。正因为如此，所以硬链接只能创建在同一个分区中。
几个区别有如下的示意图&lt;/p>
&lt;p>&lt;img src="../images/windows-links.png" alt="几种链接的区别">&lt;/p></description></item><item><title>matlab-genetic-toolbox-2</title><link>https://surprisedcat.github.io/projectnotes/matlab-genetic-toolbox-2/</link><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/matlab-genetic-toolbox-2/</guid><description>
&lt;h2 id="matlab遗传算法工具箱sheffield源码解析2---omit-in-toc---">MatLab遗传算法工具箱（Sheffield）源码解析（2）&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="适应度计算函数">适应度计算函数&lt;/h2>
&lt;h2 id="目标函数与适应度函数">目标函数与适应度函数&lt;/h2>
&lt;p>目标函数和适应度函数是GA算法中非常重要的两个概念。目标函数（objective function），是衡量一个种群的个体好坏的判别式。通常，目标函数是我们需要解决的问题。例如在$f(x)=\frac{sin(10\pi x)}{x}$,$f(x)$就是目标函数，我们可以直接通过目标函数判断某个个体的好坏，比如求$min_{f(x)}$,适应度最好的个体就是使$f(x)$最小的个体。&lt;/p>
&lt;p>但是，$f(x)$的值域是不确定的，在一个函数中很大的值在另一个函数中有可能只是沧海一粟，绝对值的比较在GA算法中意义不太，而且直接用目标函数的值去进行“选择”操作也不太好操作，因此需要将$f(x)$的值做一些规划与变换，将$f(x)$的值由绝对值转换成相对值，即$F(x)=g(f(x))$,$F(x)$表示相对的适应度，这个变化的函数$g(\cdot )$，我们称之为&lt;strong>适应函数(fitness function)&lt;/strong>。GA Manual中的解释为：&lt;/p>
&lt;blockquote>
&lt;p>The fitness function, is normally used to transform the objective function value into a measure of relative fitness.$^{[1]}$&lt;/p>
&lt;/blockquote>
&lt;p>matlab的Sheffield工具箱中，适应度计算函数共有一下两个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln">1&lt;/span>&lt;span class="c">% Fitness assignment&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c">% ranking - rank-based fitness assignment&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c">% scaling - proportional fitness-scaling&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="scaling">Scaling&lt;/h2>
&lt;p>适应函数,原理是将本来不可限制的值域映射到一个指定的范围中。最简单的适应函数就是按比例归一化，将值域映射到(0,1)上。公式表达为&lt;/p>
&lt;p>$F(x_i) =\frac{f(x_i)}{\sum_{i=1}^{N_{ind}} f(x_i)}$&lt;/p>
&lt;p>其中，$N_{ind}$是种群的数量，$x_i$是每一个基因的表现性（即二进制编码对应目标函数定义域的值）。这种适应函数直观容易理解，每一个个体繁殖的概率和它的适应能力成正比。换一个通用的表达式：&lt;/p>
&lt;p>$F(x)=af(x)+b$&lt;/p>
&lt;p>其中，a是缩放因子，我们如果求目标最大值，则a为正；反之，a为负。b为偏移量，用来保证$F(x)$非负。但是这种适应函数对于负数无能为力，&lt;strong>同时容易快速收敛（这会降低找到全局最优的概率）&lt;/strong>。因为在完全线性的变换中，一旦一个种群在早期出现一个明显优秀的个体，那么根据繁殖概率正比于适应能力，这个个体将主导种群的繁衍，如果这个个体是一个局部最优，这种线性变化能以跳出局部最优的限制。&lt;strong>scaling&lt;/strong>函数就是这种使用$F(x)=af(x)+b$的适应函数，这个变换的优点明显：简单易用。scaling函数的参数计算有些难以理解的地方，也不推荐使用，这里按下不表。&lt;/p>
&lt;h2 id="ranking">Ranking&lt;/h2>
&lt;h3 id="线性适应函数">线性适应函数&lt;/h3>
&lt;p>于是，有很多人提出了其他的适应函数。在GA工具箱中，大体分为线性和非线性两类。线性适应函数形如：，Baker$^{[2]}$提出了基于限定范围和划分等级的适应函数（大概是这个意思）。首先，选定一个MAX值，用来决定对最好个体的偏好（这个值在文献也有被翻译为&lt;strong>压差，selective pressure&lt;/strong>），然后规定了以下几个值：&lt;/p>
&lt;ul>
&lt;li>$MIN = 2.0 - MAX$&lt;/li>
&lt;li>$INC = (MAX -MIN)/N_{ind} = 2.0 * (MAX-1.0)/N_{ind}$&lt;/li>
&lt;li>$LOW = INC / 2.0$&lt;/li>
&lt;/ul>
&lt;p>MAX通常取在[1.1,2.0]之间，MIN表示下界。将[MIN,MAX]划分成$N_{ind}$份，INC表示相邻两个等级之间差距，LOW表示选择的次数？？。因此，可以将目标函数做如下变化：&lt;/p>
&lt;p>$F(x_i) = MIN + 2(MAX-1.0)\frac {x_i-1}{N_{ind}-1}$ 可以看出后面一项是INC的变形，分成$N_{ind}-1$份是因为包括了上下边界。&lt;/p>
&lt;p>这个式子中最重要的${x_i}$，这个是将$N_{ind}$个个体按照排序（从大到小，或者从小到大，根据求最大还是最小值）之后，在排序中的位置。&lt;/p>
&lt;h3 id="非线性适应函数">非线性适应函数&lt;/h3>
&lt;p>非线性函数使用的是指数分割的方法。&lt;/p>
&lt;h3 id="适应值的分配">适应值的分配&lt;/h3>
&lt;p>我们如果不考虑多种群的场景，函数中适应值的分配很简单，按照目标值大小分配适应值。&lt;/p>
&lt;h3 id="实现代码">实现代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">function&lt;/span>&lt;span class="w"> &lt;/span>FitnV &lt;span class="p">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">cxranking&lt;/span>&lt;span class="p">(&lt;/span>ObjV, RFun, SUBPOP&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">%Identify the vector size (Nind)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ObjV&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c">%第二个参数的处理&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nargin&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="k">end&lt;/span> &lt;span class="c">%仅有一个参数，后面会有默认赋值&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nargin&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">% 不合理RFun的处理&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">isnan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[];&lt;/span>&lt;span class="k">end&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c">% numel函数返回的是矩阵中元素的个数,增强性能&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">numel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c">% RFun 为1行2列的向量&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NonLin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">%判断线性还是非线性&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NonLin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Parameter for ranking method must be 0 or 1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">isnan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="nb">numel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c">% RFun是一个列向量，列向量和ObjV对应 &lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">numel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;ObjV and RFun disagree&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="c">%第三个参数分组的处理&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nargin&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SUBPOP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nargin&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">isempty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">SUBPOP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="nb">isnan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">SUBPOP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="nb">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;SUBPOP must be a scalar&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="c">%分组必须能够整除总数&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="nb">fix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;ObjV and SUBPOP disagree&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">Nind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">% Compute &lt;/span>
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c">% Check ranking function and use default values if necessary&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">isempty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c">%为空的时候，采用默认值&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="c">% 默认值：selective pressure： 2，线性&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;#39;/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="nb">numel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">%RFun在之前已经处理过，变成一个标量&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">NonLin&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="c">%非线性处理,指数分割&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Selective pressure must be greater than 1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Selective pressure too big&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="n">Root1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">roots&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Nind&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]]);&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="c">%指数分割&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Root1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">.^&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="c">%线性处理&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="c">% linear ranking with SP between 1 and 2&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Selective pressure for linear ranking must be between 1 and 2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="n">RFun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">RFun&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;#39;/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">56&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">58&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="n">FitnV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="ln">60&lt;/span>
&lt;span class="ln">61&lt;/span> &lt;span class="c">%子群处理&lt;/span>
&lt;span class="ln">62&lt;/span>&lt;span class="c">% loop over all subpopulations&lt;/span>
&lt;span class="ln">63&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="n">irun&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">SUBPOP&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">64&lt;/span> &lt;span class="c">% Copy objective values of actual subpopulation&lt;/span>
&lt;span class="ln">65&lt;/span> &lt;span class="n">ObjVSub&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ObjV&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">irun&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">irun&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">66&lt;/span> &lt;span class="c">% Sort does not handle NaN values as required. So, find those...&lt;/span>
&lt;span class="ln">67&lt;/span> &lt;span class="n">NaNix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">isnan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ObjVSub&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">68&lt;/span> &lt;span class="n">Validix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">NaNix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">69&lt;/span> &lt;span class="c">% ... and sort only numeric values (smaller is better).&lt;/span>
&lt;span class="ln">70&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ix&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ObjVSub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Validix&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">71&lt;/span>
&lt;span class="ln">72&lt;/span> &lt;span class="c">% Now build indexing vector assuming NaN are worse than numbers,&lt;/span>
&lt;span class="ln">73&lt;/span> &lt;span class="c">% (including Inf!)...&lt;/span>
&lt;span class="ln">74&lt;/span> &lt;span class="n">ix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NaNix&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">Validix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ix&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;span class="ln">75&lt;/span> &lt;span class="c">% ... and obtain a sorted version of ObjV&lt;/span>
&lt;span class="ln">76&lt;/span> &lt;span class="n">Sorted&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ObjVSub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">77&lt;/span>
&lt;span class="ln">78&lt;/span> &lt;span class="c">% Assign fitness according to RFun.&lt;/span>
&lt;span class="ln">79&lt;/span> &lt;span class="nb">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">80&lt;/span> &lt;span class="n">FitnVSub&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">zeros&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">81&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nb">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">Sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">82&lt;/span> &lt;span class="n">FitnVSub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RFun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">j&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">83&lt;/span> &lt;span class="nb">i&lt;/span> &lt;span class="p">=&lt;/span>&lt;span class="nb">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">84&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">85&lt;/span>
&lt;span class="ln">86&lt;/span> &lt;span class="c">% Finally, return unsorted vector.&lt;/span>
&lt;span class="ln">87&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uix&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">88&lt;/span> &lt;span class="n">FitnVSub&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">FitnVSub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">89&lt;/span>
&lt;span class="ln">90&lt;/span> &lt;span class="c">% Add FitnVSub to FitnV&lt;/span>
&lt;span class="ln">91&lt;/span> &lt;span class="n">FitnV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">FitnV&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">FitnVSub&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">92&lt;/span>&lt;span class="k">end&lt;/span>
&lt;span class="ln">93&lt;/span>
&lt;span class="ln">94&lt;/span>
&lt;span class="ln">95&lt;/span>&lt;span class="c">% End of function&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="未完成多种群">未完成：多种群&lt;/h3>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;p>[1] K. A. De Jong, Analysis of the Behaviour of a Class of Genetic Adaptive Systems, PhD Thesis, Dept. of Computer and Communication Sciences, University of Michigan, Ann Arbor, 1975.&lt;/p>
&lt;p>[2] J. E. Baker, “Adaptive Selection Methods for Genetic Algorithms”, Proc. ICGA 1, pp. 101-111, 1985.&lt;/p></description></item><item><title>matlab-genetic-toolbox-1</title><link>https://surprisedcat.github.io/projectnotes/matlab-genetic-toolbox-1/</link><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/matlab-genetic-toolbox-1/</guid><description>
&lt;h2 id="matlab遗传算法工具箱sheffield源码解析1---omit-in-toc---">MatLab遗传算法工具箱（Sheffield）源码解析（1）&lt;!-- omit in toc -->&lt;/h2>
&lt;h2 id="创建种群相关函数">创建种群相关函数&lt;/h2>
&lt;p>crtbase：创建一个包含基因基因座信息的向量。&lt;/p>
&lt;h2 id="crtbase">crtbase&lt;/h2>
&lt;p>crtbase：创建一个包含基因基因座信息的向量。&lt;/p>
&lt;p>关于这个函数的释义，原文文档解释如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="c">% CRTBASE.m - Create base vector &lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c">% This function creates a vector containing the base of the loci&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c">% in a chromosome.&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c">% Syntax: BaseVec = crtbase(Lind, Base)&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c">% Input Parameters:&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c">% Lind - A scalar or vector containing the lengths&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c">% of the alleles. Sum(Lind) is the length of&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c">% the corresponding chromosome.这句话很重要Lind的和是基因的长度。&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c">% Base - A scalar or vector containing the base of&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c">% the loci contained in the Alleles.&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c">% Output Parameters:&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c">% BaseVec - A vector whose elements correspond to the base&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c">% of the loci of the associated chromosome structure.&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c">% Author: Andrew Chipperfield&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="c">% Date: 19-Jan-94&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是看了源码之后，我发现一些疑似bug的地方，下文用将会标注出来，我自己修正了一下。这个项目是九几年的，而且matlab也出了自己的遗传算法工具箱gatool，所以这个bug权当是学习了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">function&lt;/span>&lt;span class="w"> &lt;/span>BaseVec &lt;span class="p">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">crtbase&lt;/span>&lt;span class="p">(&lt;/span>Lind, Base&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">%使用逗号区分返回值&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ml&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">LenL&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">nargin&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="c">% 只有一个参数执行&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c">%这里ones()的行列是相反的&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">LenL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">end&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c">%使用逗号区分返回值&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">LenB&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c">% check parameter consistency&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c">% 使用||和&amp;amp;&amp;amp;替换|和&amp;amp;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">ml&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">mb&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">% 限定必须都是一维行向量&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Lind or Base is not a vector&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">elseif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LenL&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">LenB&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">LenL&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">LenB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LenL&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">LenB&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Vector dimension must agree&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="k">elseif&lt;/span> &lt;span class="n">LenB&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">LenL&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c">%这里的ones()行列是相反的&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">LenL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="k">end&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">BaseVec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="nb">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">LenL&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c">%这里ones()的行列是相反的&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">BaseVec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">BaseVec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">i&lt;/span>&lt;span class="p">))];&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="crtbp">crtbp&lt;/h2>
&lt;p>crtbp:创建任意进制的离散随机种群。这个函数可有三种格式。&lt;/p>
&lt;ol>
&lt;li>[Chrom, Lind, BaseV] = crtbp(Nind, Lind)。 创建一个Nind*Lind的随机二进制矩阵。Nind与Lind都是标量，Nind表示种群中个体数量，Lind表示基因长度。&lt;/li>
&lt;li>[Chrom, Lind, BaseV] = crtbp(Nind, Base)。创建一个Nind*Base长度的矩阵。Nind是标量，Base是矢量，base中的值，表示基因位的进制数。或者Nind是矢量，第一位表示个数，第二位表示基因长度Base是矢量，base中的值，表示基因位的进制数。&lt;/li>
&lt;li>[Chrom, Lind, BaseV] = crtbp(Nind, Lind, Base)。创建一个Nind*Lind的随机矩阵，每一位的进制数由Base决定。&lt;/li>
&lt;/ol>
&lt;p>关于这个函数的释义，原文文档解释如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="c">% crtbp.m - Create an initial population&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c">% This function creates a binary population of given size and structure.&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c">% Syntax: [Chrom Lind BaseV] = crtbp(Nind, Lind, Base)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c">% Input Parameters:&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c">% Nind - Either a scalar containing the number of individuals&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c">% in the new population or a row vector of length two&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c">% containing the number of individuals and their length.&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c">% Lind - A scalar containing the length of the individual&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c">% chromosomes.&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c">% Base - A scalar containing the base of the chromosome &lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c">% elements or a row vector containing the base(s) &lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c">% of the loci of the chromosomes.&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c">% Output Parameters:&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c">% Chrom - A matrix containing the random valued chromosomes &lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="c">% row wise.&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c">% Lind - A scalar containing the length of the chromosome.&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="c">% BaseV - A row vector containing the base of the &lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c">% chromosome loci.&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c">% Author: Andrew Chipperfield&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c">% Date: 19-Jan-94&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>源码解析如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">function&lt;/span>&lt;span class="w"> &lt;/span>[Chrom, Lind, BaseV] &lt;span class="p">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">cxcrtbp&lt;/span>&lt;span class="p">(&lt;/span>Nind, Lind, Base&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">nargin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c">%~表示这个变量后面不会用到&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nN&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nL&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nB&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="n">nN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c">%Nind是一个向量，第一位Nind(1)表示种群数量，第二位Nind(2)表示基因长度。&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c">%仅有一个参数&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">Lind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">Nind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">BaseV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">cxcrtbase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">nL&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c">%Nind是一个向量,两个参数的时候，第二个参数必然是基因位的进制数,并且是一个标量&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">BaseV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">cxcrtbase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Lind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c">%Nind(2)其实是基因的长度，Lind原来值是进制数&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">Nind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">nL&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c">%Nind是一个向量,两个参数的时候，第二个参数必然是基因位的进制数,是一个向量&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c">%BUG 原来的代码if Lind ~= length(Lind), error(&amp;#39;Lind and Base disagree&amp;#39;); end&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="c">%这里是想做一个判断，看看基因的长度和基向量的长度是否一致，但是长度应该是Nind（2）而不是Lind，Lind在这个分值里BaseV&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="nb">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Lind and Base disagree&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">BaseV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Lind&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">Lind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">Nind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Nind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="k">elseif&lt;/span> &lt;span class="n">nN&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">%Nind是一个标量，表示种群数量&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c">%仅有一个参数&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Not enough input arguments.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c">%两个参数，需要看看第二位是标量还是向量&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nL&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c">%第二个参数是标量。说明是基因长度&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">BaseV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">cxcrtbase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="c">% 第二个参数是向量，表示他是基向量&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">BaseV&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Lind&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="n">Lind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">nL&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c">%基向量的长度表示基因的长度&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c">% 第二位 Lind 标量，第三位基因进制信息&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nB&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">BaseV&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">cxcrtbase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c">%第三位标量，表示基因有统一的进制base&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="k">elseif&lt;/span> &lt;span class="n">nB&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">Lind&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Lind and Base disagree&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="c">%第三位向量，看看长度是否匹配&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">BaseV&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c">%标准形式，第一位Nind，第二位Lind，第三位BaseV&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="k">end&lt;/span>
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="c">% Create a structure of random chromosomes in row wise order, dimensions&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="c">% Nind by Lind. The base of each chromosomes loci is given by the value&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="c">% of the corresponding element of the row vector base.&lt;/span>
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="c">%BaseV(ones(Nind,1),:)表示向量扩展成矩阵，重复扩展Nind行&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="c">%floor 向下取整&lt;/span>
&lt;span class="ln">51&lt;/span>&lt;span class="n">Chrom&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Lind&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="n">BaseV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),:));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="crtrp">crtrp&lt;/h2>
&lt;p>crtrp的功能是产生一个实数值种群,crtbp可以产生一定进制的种群，但都是离散值，crtrp是产生连续值（相对的）的种群。&lt;/p>
&lt;p>crtrp的参数相对固定，必须要有两个，第一个Nind表示种群的个数，第二个参数为一个2*Lind的矩阵，分别代表着上下界，Lind为基因的长度。函数的源码介绍如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="c">% crtrp.m (CReaTe an initial (Real-value) Population)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c">% This function creates a population of given size of random real-values. &lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c">% Syntax: Chrom = crtrp(Nind,FieldDR);&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c">% Input parameters:&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c">% Nind - A scalar containing the number of individuals in the new &lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c">% population.&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c">%&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="c">% FieldDR - A matrix of size 2 by number of variables describing the&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c">% boundaries of each variable. It has the following structure:&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c">% [lower_bound; (vector with lower bound for each veriable)&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="c">% upper_bound] (vector with upper bound for each veriable)&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c">% [lower_bound_var_1 lower_bound_var_2 ... lower_bound_var_Nvar;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c">% upper_bound_var_1 upper_bound_var_2 ... upper_bound_var_Nvar]&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="c">% example - each individuals consists of 4 variables:&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="c">% FieldDR = [-100 -50 -30 -20; % lower bound&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c">% 100 50 30 20] % upper bound&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c">% &lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c">% Output parameter:&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c">% Chrom - A matrix containing the random valued individuals of the&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="c">% new population of size Nind by number of variables.&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c">% Author: Hartmut Pohlheim&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="c">% History: 23.11.93 file created&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="c">% 25.02.94 clean up, check parameter consistency&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>源码中输入参数处理的部分比上两个函数简单很多，却有一个明显bug，很多人也提过，就是nargin赋值的问题。同时将rep函数替换成系统自带的repmat函数，提高可靠性与性能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">function&lt;/span>&lt;span class="w"> &lt;/span>Chrom &lt;span class="p">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">crtrp&lt;/span>&lt;span class="p">(&lt;/span>Nind,FieldDR&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nargs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">nargin&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c">% Check parameter consistency&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">nargs&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;parameter FieldDR missing&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c">%下面这句明显是个错误，nargin是个函数，不能赋值。注释掉，不需要&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c">% BUG&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c">%if nargs &amp;gt; 2, nargin = 2; end&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">mN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nN&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">mF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Nvar&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FieldDR&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c">%Nind必须是个标量，表示种群个数&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mN&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">nN&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;Nind has to be a scalar&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c">% FieldDR必须是个2行矩阵，第一行为下界，第二行为上界&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">mF&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;FieldDR must be a matrix with 2 rows&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c">% Compute Matrix with Range of variables and Matrix with Lower value&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="c">% 用来生成制定范围的随机数，使用matlab自带的repmat函数代替工具箱中的rep函数&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c">% repmat（arg1,arg2）函数：将矩阵arg1,扩展行arg2(1)次，列arg2(2)次&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">Range&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">repmat&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">FieldDR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,:)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">FieldDR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,:)),[&lt;/span>&lt;span class="n">Nind&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">Lower&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">repmat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FieldDR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,:),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Nind&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="c">% Create initial population&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c">% Each row contains one individual, the values of each variable uniformly&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="c">% distributed between lower and upper bound (given by FieldDR)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">Chrom&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Nind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Nvar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">.*&lt;/span> &lt;span class="n">Range&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Lower&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="c">% End of function&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，Sheffield工具箱中的种群随机生成函数就这么多了。&lt;/p></description></item><item><title>matlab-notes</title><link>https://surprisedcat.github.io/projectnotes/matlab-notes/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>https://surprisedcat.github.io/projectnotes/matlab-notes/</guid><description>
&lt;h2 id="matlab使用的tips---omit-in-toc---">MatLab使用的Tips&lt;!-- omit in toc -->&lt;/h2>
&lt;ul>
&lt;li>Matlab安装新的工具箱，以Sheffield（设菲尔德大学）遗传算法工具箱为例。
&lt;ol>
&lt;li>解压gatbx-origin.zip，得到DOC和SRC文件夹；&lt;/li>
&lt;li>拷贝SRC到Matlab安装目录下的toolbox文件夹中，并将SRC更名为genetic；&lt;/li>
&lt;li>在Matlab的setpath中添加genetic所在的位置&lt;/li>
&lt;li>v=ver('genetic')检验是否成功安装。如果成功：&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="ln">1&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">ver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#39;genetic&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#39;Genetic Algorithm Toolbox&amp;#39;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">Version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#39;1.2&amp;#39;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">Release&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#39;15-Apr-94&amp;#39;&lt;/span>
&lt;span class="ln">9&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>